/**
 * NIUM Platform
 * NIUM Platform
 *
 * OpenAPI spec version: 2023.12.12
 * Contact: experience@nium.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { WalletRfiAttributeResponse } from '../models/WalletRfiAttributeResponse';
import { HttpFile } from '../http/http';

export class TransactionRfiDetailsResponse {
    /**
    * This field contains the description of the RFI.
    */
    'description'?: string;
    /**
    * This field contains the type of the document if applicable, for example, POI, POA, etc.
    */
    'documentType'?: string;
    /**
    * This flag signifies if the RFI is mandatory or not.
    */
    'mandatory'?: boolean;
    /**
    * This field contains the remarks provided while raising the RFI.
    */
    'remarks'?: string;
    /**
    * This array contains the required data for the RFI.
    */
    'requiredData'?: Array<WalletRfiAttributeResponse>;
    /**
    * This field contains the unique RFI hash ID.
    */
    'rfiHashId'?: string;
    /**
    * This field contains the unique identifier for group of RFI raised for the customer transaction.
    */
    'rfiId'?: string;
    /**
    * This field contains Transaction RFI status.
    */
    'rfiStatus'?: TransactionRfiDetailsResponseRfiStatusEnum;
    /**
    * This field contains the type of the transaction entity. The possible values are: DEBTOR CREDITOR
    */
    'transactionEntityType'?: TransactionRfiDetailsResponseTransactionEntityTypeEnum;
    /**
    * This field contains the type of RFI. It could be document or data.
    */
    'type'?: string;

    static readonly discriminator: string | undefined = undefined;

    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [
        {
            "name": "description",
            "baseName": "description",
            "type": "string",
            "format": ""
        },
        {
            "name": "documentType",
            "baseName": "documentType",
            "type": "string",
            "format": ""
        },
        {
            "name": "mandatory",
            "baseName": "mandatory",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "remarks",
            "baseName": "remarks",
            "type": "string",
            "format": ""
        },
        {
            "name": "requiredData",
            "baseName": "requiredData",
            "type": "Array<WalletRfiAttributeResponse>",
            "format": ""
        },
        {
            "name": "rfiHashId",
            "baseName": "rfiHashId",
            "type": "string",
            "format": ""
        },
        {
            "name": "rfiId",
            "baseName": "rfiId",
            "type": "string",
            "format": ""
        },
        {
            "name": "rfiStatus",
            "baseName": "rfiStatus",
            "type": "TransactionRfiDetailsResponseRfiStatusEnum",
            "format": ""
        },
        {
            "name": "transactionEntityType",
            "baseName": "transactionEntityType",
            "type": "TransactionRfiDetailsResponseTransactionEntityTypeEnum",
            "format": ""
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "string",
            "format": ""
        }    ];

    static getAttributeTypeMap() {
        return TransactionRfiDetailsResponse.attributeTypeMap;
    }

    public constructor() {
    }
}


export enum TransactionRfiDetailsResponseRfiStatusEnum {
    None = 'NONE',
    InProgress = 'IN_PROGRESS',
    Completed = 'COMPLETED',
    ActionRequired = 'ACTION_REQUIRED',
    Error = 'ERROR',
    Reject = 'REJECT',
    Expired = 'EXPIRED',
    RfiRequested = 'RFI_REQUESTED',
    RfiResponded = 'RFI_RESPONDED',
    Unknown = 'UNKNOWN',
    Initiated = 'INITIATED',
    Pending = 'PENDING',
    Clear = 'CLEAR',
    Closed = 'CLOSED'
}
export enum TransactionRfiDetailsResponseTransactionEntityTypeEnum {
    Debtor = 'DEBTOR',
    Creditor = 'CREDITOR'
}

