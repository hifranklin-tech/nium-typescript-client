/**
 * NIUM Platform
 * NIUM Platform
 *
 * OpenAPI spec version: 2023.12.12
 * Contact: experience@nium.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Addresses } from '../models/Addresses';
import { LegalDetails } from '../models/LegalDetails';
import { HttpFile } from '../http/http';

export class BusinessPartner {
    'addresses'?: Addresses;
    /**
    * This field accepts the entity type of the business partner. The acceptable values are: Director Ultimate Beneficial Owner Shareholder Authorized Signatory Authorized Representative Protector Partner Trustee Settlor Members Executor  AU: Optional EU: Optional UK: Optional SG: Optional
    */
    'businessEntityType'?: string;
    /**
    * This field accepts the registered business name of the business partner. This is required when the stakeholder(s) is a business entity  AU: Optional EU: Conditional UK: Optional SG: Optional
    */
    'businessName'?: string;
    /**
    * This field accepts the registered business registration number of the business partner. This is required when the stakeholder(s) is a business entity  AU: Optional EU: Conditional UK: Optional SG: Optional
    */
    'businessRegistrationNumber'?: string;
    /**
    * This field accepts the legal entity type of the business. The supported entity types are: Sole Trader Private Limited Company Public Company Partnership Limited Liability Partnership Firm Government Body Associations Trust Regulated Trust Unregulated Trust Unincorporated Partnership This is required when the stakeholder(s) is a business entity.  AU: Optional EU: Conditional UK: Optional SG: Optional
    */
    'businessType'?: string;
    'description'?: string;
    'legalDetails'?: LegalDetails;
    /**
    * This field accepts the share percentage that the business partner or the stakeholder holds in the company.  AU: NA EU: Optional UK: NA SG: Optional
    */
    'sharePercentage'?: string;

    static readonly discriminator: string | undefined = undefined;

    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [
        {
            "name": "addresses",
            "baseName": "addresses",
            "type": "Addresses",
            "format": ""
        },
        {
            "name": "businessEntityType",
            "baseName": "businessEntityType",
            "type": "string",
            "format": ""
        },
        {
            "name": "businessName",
            "baseName": "businessName",
            "type": "string",
            "format": ""
        },
        {
            "name": "businessRegistrationNumber",
            "baseName": "businessRegistrationNumber",
            "type": "string",
            "format": ""
        },
        {
            "name": "businessType",
            "baseName": "businessType",
            "type": "string",
            "format": ""
        },
        {
            "name": "description",
            "baseName": "description",
            "type": "string",
            "format": ""
        },
        {
            "name": "legalDetails",
            "baseName": "legalDetails",
            "type": "LegalDetails",
            "format": ""
        },
        {
            "name": "sharePercentage",
            "baseName": "sharePercentage",
            "type": "string",
            "format": ""
        }    ];

    static getAttributeTypeMap() {
        return BusinessPartner.attributeTypeMap;
    }

    public constructor() {
    }
}

