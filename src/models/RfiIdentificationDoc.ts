/**
 * NIUM Platform
 * NIUM Platform
 *
 * OpenAPI spec version: 2023.12.12
 * Contact: experience@nium.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { IdentificationDocumentDTO } from '../models/IdentificationDocumentDTO';
import { HttpFile } from '../http/http';

/**
* This field is an object which holds document details. It is required to send any document RFI under this object.
*/
export class RfiIdentificationDoc {
    /**
    * This field accepts the color of the medicare card which may be one of three values - G, B, Y. It is mandatory for medicare card.
    */
    'identificationDocColor'?: string;
    /**
    * This field accepts the document expiry date.
    */
    'identificationDocExpiry'?: string;
    /**
    * This field accepts the name of the document holder exactly according to the document uploaded.
    */
    'identificationDocHolderName'?: string;
    /**
    * This field accepts the document issuance country.
    */
    'identificationDocIssuanceCountry'?: string;
    /**
    * This field accepts the reference number for the document being uploaded.
    */
    'identificationDocReferenceNumber'?: string;
    /**
    * It is an array of actual Base-64 documents as required. The maximum allowed size of this payload is 10MB. A separate object is needed for each document image.
    */
    'identificationDocument'?: Array<IdentificationDocumentDTO>;
    /**
    * This field accepts the name of the authorized issuer of the document such as the name of the government agency issuing the document.
    */
    'identificationIssuingAuthority'?: string;
    /**
    * This field accepts the document issuance date.
    */
    'identificationIssuingDate'?: string;
    /**
    * This field accepts the identification type for the document being uploaded. Refer the details of the RFI raised and respond accordingly.
    */
    'identificationType'?: string;
    /**
    * The field accepts the document number (value) for the document such as passport number, driving licence number, etc.
    */
    'identificationValue'?: string;

    static readonly discriminator: string | undefined = undefined;

    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [
        {
            "name": "identificationDocColor",
            "baseName": "identificationDocColor",
            "type": "string",
            "format": ""
        },
        {
            "name": "identificationDocExpiry",
            "baseName": "identificationDocExpiry",
            "type": "string",
            "format": ""
        },
        {
            "name": "identificationDocHolderName",
            "baseName": "identificationDocHolderName",
            "type": "string",
            "format": ""
        },
        {
            "name": "identificationDocIssuanceCountry",
            "baseName": "identificationDocIssuanceCountry",
            "type": "string",
            "format": ""
        },
        {
            "name": "identificationDocReferenceNumber",
            "baseName": "identificationDocReferenceNumber",
            "type": "string",
            "format": ""
        },
        {
            "name": "identificationDocument",
            "baseName": "identificationDocument",
            "type": "Array<IdentificationDocumentDTO>",
            "format": ""
        },
        {
            "name": "identificationIssuingAuthority",
            "baseName": "identificationIssuingAuthority",
            "type": "string",
            "format": ""
        },
        {
            "name": "identificationIssuingDate",
            "baseName": "identificationIssuingDate",
            "type": "string",
            "format": ""
        },
        {
            "name": "identificationType",
            "baseName": "identificationType",
            "type": "string",
            "format": ""
        },
        {
            "name": "identificationValue",
            "baseName": "identificationValue",
            "type": "string",
            "format": ""
        }    ];

    static getAttributeTypeMap() {
        return RfiIdentificationDoc.attributeTypeMap;
    }

    public constructor() {
    }
}

