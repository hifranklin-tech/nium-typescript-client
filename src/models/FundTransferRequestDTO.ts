/**
 * NIUM Platform
 * NIUM Platform
 *
 * OpenAPI spec version: 2023.12.12
 * Contact: experience@nium.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { ClientCustomTagDTO } from '../models/ClientCustomTagDTO';
import { DeviceDetailsDTO } from '../models/DeviceDetailsDTO';
import { HttpFile } from '../http/http';

export class FundTransferRequestDTO {
    'tags'?: Array<ClientCustomTagDTO>;
    /**
    * This field accepts the authentication code generated as part of SCA (Strong Customer Authentication). Note: Authentication code is expected if regulatory region is UK or EU.
    */
    'authenticationCode'?: string;
    /**
    * This field accepts customer comments for the wallet to wallet transfer.
    */
    'customerComments'?: string;
    /**
    * The amount to be transferred.
    */
    'destinationAmount': number;
    /**
    * This field accepts the 3-letter [ISO-4217 currency code](doc:currency-and-country-codes) for the amount.
    */
    'destinationCurrencyCode': string;
    /**
    * The walletHashId of Niumâ€™s customer who is the recepient of the funds.
    */
    'destinationWalletHashId': string;
    'deviceDetails'?: DeviceDetailsDTO;
    /**
    * This field accepts the reason code for the exemption provided as part of SCA (Strong Customer Authentication). Allowed values: 01 - Trusted Beneficiary 02 - Low Value Transaction 03 - Recurring Transactions 04 - Payment to Self  Note: Exemption code is required if regulatory region is UK or EU
    */
    'exemptionCode'?: string;
    /**
    * This field accepts the purpose code for the payment. Refer to the [Glossary of Purpose Codes](doc:purpose-of-transfer-codes) to identify the correct value to be provided.
    */
    'purposeCode': string;
    /**
    * The amount to be transferred.
    */
    'sourceAmount': number;
    /**
    * This field accepts the 3-letter [ISO-4217 currency code](doc:currency-and-country-codes) for the amount.
    */
    'sourceCurrencyCode': string;

    static readonly discriminator: string | undefined = undefined;

    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [
        {
            "name": "tags",
            "baseName": "tags",
            "type": "Array<ClientCustomTagDTO>",
            "format": ""
        },
        {
            "name": "authenticationCode",
            "baseName": "authenticationCode",
            "type": "string",
            "format": ""
        },
        {
            "name": "customerComments",
            "baseName": "customerComments",
            "type": "string",
            "format": ""
        },
        {
            "name": "destinationAmount",
            "baseName": "destinationAmount",
            "type": "number",
            "format": "double"
        },
        {
            "name": "destinationCurrencyCode",
            "baseName": "destinationCurrencyCode",
            "type": "string",
            "format": ""
        },
        {
            "name": "destinationWalletHashId",
            "baseName": "destinationWalletHashId",
            "type": "string",
            "format": ""
        },
        {
            "name": "deviceDetails",
            "baseName": "deviceDetails",
            "type": "DeviceDetailsDTO",
            "format": ""
        },
        {
            "name": "exemptionCode",
            "baseName": "exemptionCode",
            "type": "string",
            "format": ""
        },
        {
            "name": "purposeCode",
            "baseName": "purposeCode",
            "type": "string",
            "format": ""
        },
        {
            "name": "sourceAmount",
            "baseName": "sourceAmount",
            "type": "number",
            "format": "double"
        },
        {
            "name": "sourceCurrencyCode",
            "baseName": "sourceCurrencyCode",
            "type": "string",
            "format": ""
        }    ];

    static getAttributeTypeMap() {
        return FundTransferRequestDTO.attributeTypeMap;
    }

    public constructor() {
    }
}

