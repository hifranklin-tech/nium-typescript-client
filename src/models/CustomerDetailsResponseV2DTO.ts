/**
 * NIUM Platform
 * NIUM Platform
 *
 * OpenAPI spec version: 2023.12.12
 * Contact: experience@nium.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { CorporateCustomerResponseDTO } from '../models/CorporateCustomerResponseDTO';
import { CustomerAccountDetail } from '../models/CustomerAccountDetail';
import { IndividualCustomerResponseDTO } from '../models/IndividualCustomerResponseDTO';
import { HttpFile } from '../http/http';

export class CustomerDetailsResponseV2DTO {
    'tags'?: { [key: string]: string; };
    'accountDetails'?: Array<CustomerAccountDetail>;
    /**
    * This field contains the comment entered while blocking the customer, if applicable. Otherwise, it contains null.
    */
    'blockComment'?: string;
    /**
    * This field contains the reason for blocking the customer, if applicable. Otherwise, it contains null.
    */
    'blockReason'?: CustomerDetailsResponseV2DTOBlockReasonEnum;
    /**
    * This field contains the details of the entity updating a customer block/unblock, if applicable. Otherwise, it contains null. The possible values are CLIENT or NIUM.
    */
    'blockUpdatedBy'?: CustomerDetailsResponseV2DTOBlockUpdatedByEnum;
    /**
    * This field contains the compliance level for the customer. The possible values for customer type INDIVIDUAL are: SCREENING_KYC, SCREENING, SCREENING_KYB. The possible values for customer type CORPORATE is SCREENING_KYB.
    */
    'complianceLevel'?: string;
    /**
    * This field contains the compliance remarks from Compliance officer, if applicable.
    */
    'complianceRemarks'?: string;
    'complianceStatus'?: string;
    'corporateCustomer'?: CorporateCustomerResponseDTO;
    /**
    * This field contains the timestamp of customer creation in the format YYY-MM-DD hh:mm:ss, for example, 2021-07-29 06:11:43.
    */
    'createdAt'?: Date;
    'customerHashId'?: string;
    'customerType'?: CustomerDetailsResponseV2DTOCustomerTypeEnum;
    'individualCustomer'?: IndividualCustomerResponseDTO;
    /**
    * This field contains the kyc mode  The possible values for customer type INDIVIDUAL are: E_KYC, MANUAL_KYC, SCREENING, EVERIFY_KYC, or NONE.  The possible values for customer type CORPORATE are: KYB or NONE.
    */
    'kycMode'?: string;
    /**
    * This field contains any system-generated compliance comments, if applicable.
    */
    'remarks'?: string;
    'segment'?: string;
    /**
    * This field contains the overall KYC status of the customer
    */
    'status'?: CustomerDetailsResponseV2DTOStatusEnum;
    /**
    * This flag denotes that the customer has accepted the Terms and Conditions.
    */
    'termsAndConditionAcceptanceFlag'?: boolean;
    /**
    * This name that the customer has accepted the Terms and Conditions.
    */
    'termsAndConditionName'?: string;
    /**
    * This version that the customer has accepted the Terms and Conditions.
    */
    'termsAndConditionVersionId'?: string;
    /**
    * This field contains the timestamp of last customer updation in the format YYY-MM-DD hh:mm:ss, for example, 2021-07-29 06:11:43.
    */
    'updatedAt'?: Date;
    /**
    * This flag contain the customer consent to proceed in case e-Document verification flow is initiated.
    */
    'verificationConsent'?: boolean;

    static readonly discriminator: string | undefined = undefined;

    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [
        {
            "name": "tags",
            "baseName": "tags",
            "type": "{ [key: string]: string; }",
            "format": ""
        },
        {
            "name": "accountDetails",
            "baseName": "accountDetails",
            "type": "Array<CustomerAccountDetail>",
            "format": ""
        },
        {
            "name": "blockComment",
            "baseName": "blockComment",
            "type": "string",
            "format": ""
        },
        {
            "name": "blockReason",
            "baseName": "blockReason",
            "type": "CustomerDetailsResponseV2DTOBlockReasonEnum",
            "format": ""
        },
        {
            "name": "blockUpdatedBy",
            "baseName": "blockUpdatedBy",
            "type": "CustomerDetailsResponseV2DTOBlockUpdatedByEnum",
            "format": ""
        },
        {
            "name": "complianceLevel",
            "baseName": "complianceLevel",
            "type": "string",
            "format": ""
        },
        {
            "name": "complianceRemarks",
            "baseName": "complianceRemarks",
            "type": "string",
            "format": ""
        },
        {
            "name": "complianceStatus",
            "baseName": "complianceStatus",
            "type": "string",
            "format": ""
        },
        {
            "name": "corporateCustomer",
            "baseName": "corporateCustomer",
            "type": "CorporateCustomerResponseDTO",
            "format": ""
        },
        {
            "name": "createdAt",
            "baseName": "createdAt",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "customerHashId",
            "baseName": "customerHashId",
            "type": "string",
            "format": ""
        },
        {
            "name": "customerType",
            "baseName": "customerType",
            "type": "CustomerDetailsResponseV2DTOCustomerTypeEnum",
            "format": ""
        },
        {
            "name": "individualCustomer",
            "baseName": "individualCustomer",
            "type": "IndividualCustomerResponseDTO",
            "format": ""
        },
        {
            "name": "kycMode",
            "baseName": "kycMode",
            "type": "string",
            "format": ""
        },
        {
            "name": "remarks",
            "baseName": "remarks",
            "type": "string",
            "format": ""
        },
        {
            "name": "segment",
            "baseName": "segment",
            "type": "string",
            "format": ""
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "CustomerDetailsResponseV2DTOStatusEnum",
            "format": ""
        },
        {
            "name": "termsAndConditionAcceptanceFlag",
            "baseName": "termsAndConditionAcceptanceFlag",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "termsAndConditionName",
            "baseName": "termsAndConditionName",
            "type": "string",
            "format": ""
        },
        {
            "name": "termsAndConditionVersionId",
            "baseName": "termsAndConditionVersionId",
            "type": "string",
            "format": ""
        },
        {
            "name": "updatedAt",
            "baseName": "updatedAt",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "verificationConsent",
            "baseName": "verificationConsent",
            "type": "boolean",
            "format": ""
        }    ];

    static getAttributeTypeMap() {
        return CustomerDetailsResponseV2DTO.attributeTypeMap;
    }

    public constructor() {
    }
}


export enum CustomerDetailsResponseV2DTOBlockReasonEnum {
    CustomerRequest = 'CUSTOMER_REQUEST',
    ClientRequest = 'CLIENT_REQUEST',
    Deceased = 'DECEASED',
    AccountClosure = 'ACCOUNT_CLOSURE',
    SuspiciousActivity = 'SUSPICIOUS_ACTIVITY',
    FraudulentActivity = 'FRAUDULENT_ACTIVITY',
    PotentialSanction = 'POTENTIAL_SANCTION',
    SanctionedCustomer = 'SANCTIONED_CUSTOMER'
}
export enum CustomerDetailsResponseV2DTOBlockUpdatedByEnum {
    Nium = 'NIUM',
    Client = 'CLIENT'
}
export enum CustomerDetailsResponseV2DTOCustomerTypeEnum {
    Individual = 'INDIVIDUAL',
    Corporate = 'CORPORATE'
}
export enum CustomerDetailsResponseV2DTOStatusEnum {
    Pending = 'Pending',
    Clear = 'Clear',
    Failed = 'Failed',
    Suspended = 'Suspended',
    Blocked = 'Blocked'
}

