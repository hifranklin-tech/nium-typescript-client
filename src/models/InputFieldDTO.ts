/**
 * NIUM Platform
 * NIUM Platform
 *
 * OpenAPI spec version: 2023.12.12
 * Contact: experience@nium.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { HttpFile } from '../http/http';

export class InputFieldDTO {
    /**
    * This field accepts the client card widget style for text filed active border color.
    */
    'activeBorderColor'?: string;
    /**
    * This field accepts the client card widget style for text filed error border color.
    */
    'errorBorderColor'?: string;
    /**
    * This field accepts the client car d widget style for text filed error label color.
    */
    'errorMessageColor'?: string;
    /**
    * This field accepts the client card widget style for text filed label color.
    */
    'labelColor'?: string;
    /**
    * This field accepts the client card widget style for text filed label size.
    */
    'labelFontSize'?: string;

    static readonly discriminator: string | undefined = undefined;

    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [
        {
            "name": "activeBorderColor",
            "baseName": "activeBorderColor",
            "type": "string",
            "format": ""
        },
        {
            "name": "errorBorderColor",
            "baseName": "errorBorderColor",
            "type": "string",
            "format": ""
        },
        {
            "name": "errorMessageColor",
            "baseName": "errorMessageColor",
            "type": "string",
            "format": ""
        },
        {
            "name": "labelColor",
            "baseName": "labelColor",
            "type": "string",
            "format": ""
        },
        {
            "name": "labelFontSize",
            "baseName": "labelFontSize",
            "type": "string",
            "format": ""
        }    ];

    static getAttributeTypeMap() {
        return InputFieldDTO.attributeTypeMap;
    }

    public constructor() {
    }
}

