/**
 * NIUM Platform
 * NIUM Platform
 *
 * OpenAPI spec version: 2023.12.12
 * Contact: experience@nium.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Address } from '../models/Address';
import { HttpFile } from '../http/http';

export class UpdateContactInfoRequestDTO {
    /**
    * Card holder Email
    */
    'email'?: string;
    /**
    * Country code for mobile number in [ISO Alpha-2](doc:currency-and-country-codes) format.
    */
    'countryCode'?: string;
    /**
    * Card holder mobile number
    */
    'mobile'?: string;
    'delivery'?: Address;
    /**
    * This field can be used to print the customer name. The value sent in this field will be updated on the card.If this field is left empty, line 1 will not be printed on the card. This field accepts alphanumeric characters along with space(s) The maximum character limit is 26.
    */
    'nameOnCard'?: string;

    static readonly discriminator: string | undefined = undefined;

    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [
        {
            "name": "email",
            "baseName": "email",
            "type": "string",
            "format": ""
        },
        {
            "name": "countryCode",
            "baseName": "countryCode",
            "type": "string",
            "format": ""
        },
        {
            "name": "mobile",
            "baseName": "mobile",
            "type": "string",
            "format": ""
        },
        {
            "name": "delivery",
            "baseName": "delivery",
            "type": "Address",
            "format": ""
        },
        {
            "name": "nameOnCard",
            "baseName": "nameOnCard",
            "type": "string",
            "format": ""
        }    ];

    static getAttributeTypeMap() {
        return UpdateContactInfoRequestDTO.attributeTypeMap;
    }

    public constructor() {
    }
}

