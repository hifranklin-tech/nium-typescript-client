/**
 * NIUM Platform
 * NIUM Platform
 *
 * OpenAPI spec version: 2023.12.12
 * Contact: experience@nium.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { AdditionalFeesDTO } from '../models/AdditionalFeesDTO';
import { Beneficiary } from '../models/Beneficiary';
import { DeviceDetailsDTO } from '../models/DeviceDetailsDTO';
import { Payout } from '../models/Payout';
import { RemitterRequestDTO } from '../models/RemitterRequestDTO';
import { HttpFile } from '../http/http';

export class RemittanceTransactionsRequestDTO {
    'additionalFees'?: AdditionalFeesDTO;
    /**
    * This field accepts the authentication code generated as part of SCA (Strong Customer Authentication).  Note: Either exemption code or authentication is expected if the program\'s regulatory region is UK or EU. This field does not accept a value for any other region.
    */
    'authenticationCode'?: string;
    'beneficiary': Beneficiary;
    /**
    * This field is used to add any customer comments.  Maximum character limit is 512.  Note: Special characters are not allowed in this field.
    */
    'customerComments'?: string;
    'deviceDetails'?: DeviceDetailsDTO;
    /**
    * This field accepts the reason code for the exemption provided as part of SCA (Strong Customer Authentication). This must be 2 character string and the valid values are as following: 01 - Trusted Beneficiary 03 - Recurring Transactions 04 - Payment to Self Note: Exemption code is expected if authenticationCode is not provided and regulatory region is UK or EU.
    */
    'exemptionCode'?: RemittanceTransactionsRequestDTOExemptionCodeEnum;
    /**
    * This field applies only to licensed financial institutions. Boolean value \'false\' indicates an on-behalf payout request or \'true\' indicates a payout executed by the Financial Institution itself. If the field is absent from the request, the default flag is set to \'false\'. A valid remitter object is required to be passed for on-behalf payout.
    */
    'ownPayment'?: boolean;
    'payout': Payout;
    /**
    * This field accepts the purpose code for the payment. Refer to the [Glossary of Purpose Codes](doc:purpose-of-transfer-codes) to identify the correct value to be provided.  If purpose code value is not passed then the default value will be IR01802 (Advertising & Public relations-related expenses).  Purpose Code - Description IR001         - Transfer to own account IR002         - Family Maintenance IR003         - Education-related student expenses IR004         - Medical Treatment IR005         - Hotel Accommodation IR006         - Travel IR007         - Utility Bills IR008         - Repayment of Loans IR009         - Tax Payment IR010         - Purchase of Residential Property IR011         - Payment of Property Rental IR012         - Insurance Premium IR013         - Product indemnity insurance IR014         - Insurance Claims Payment IR015         - Mutual Fund Investment IR016         - Investment in Shares IR017         - Donations IR01801       - Information Service Charges IR01802       - Advertising & Public relations-related expenses IR01803       - Royalty fees, trademark fees, patent fees, and copyright fees IR01804       - Fees for brokers, front end fee, commitment fee, guarantee fee and custodian fee IR01805       - Fees for advisors, technical assistance, and academic knowledge, including remuneration for specialists IR01806       - Representative office expenses IR01807       - Construction costs/expenses IR01808       - Transportation fees for goods IR01809       - For payment of exported goods IR01810       - Delivery fees for goods IR01811       - General Goods Trades - Offline trade
    */
    'purposeCode': string;
    'remitter'?: RemitterRequestDTO;
    /**
    * This field accepts the source of funds. The possible values are: Salary Personal Savings Personal Wealth Retirement Funds Business Owner/Shareholder Loan Facility Personal Account Corporate Account
    */
    'sourceOfFunds': RemittanceTransactionsRequestDTOSourceOfFundsEnum;

    static readonly discriminator: string | undefined = undefined;

    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [
        {
            "name": "additionalFees",
            "baseName": "additionalFees",
            "type": "AdditionalFeesDTO",
            "format": ""
        },
        {
            "name": "authenticationCode",
            "baseName": "authenticationCode",
            "type": "string",
            "format": ""
        },
        {
            "name": "beneficiary",
            "baseName": "beneficiary",
            "type": "Beneficiary",
            "format": ""
        },
        {
            "name": "customerComments",
            "baseName": "customerComments",
            "type": "string",
            "format": ""
        },
        {
            "name": "deviceDetails",
            "baseName": "deviceDetails",
            "type": "DeviceDetailsDTO",
            "format": ""
        },
        {
            "name": "exemptionCode",
            "baseName": "exemptionCode",
            "type": "RemittanceTransactionsRequestDTOExemptionCodeEnum",
            "format": ""
        },
        {
            "name": "ownPayment",
            "baseName": "ownPayment",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "payout",
            "baseName": "payout",
            "type": "Payout",
            "format": ""
        },
        {
            "name": "purposeCode",
            "baseName": "purposeCode",
            "type": "string",
            "format": ""
        },
        {
            "name": "remitter",
            "baseName": "remitter",
            "type": "RemitterRequestDTO",
            "format": ""
        },
        {
            "name": "sourceOfFunds",
            "baseName": "sourceOfFunds",
            "type": "RemittanceTransactionsRequestDTOSourceOfFundsEnum",
            "format": ""
        }    ];

    static getAttributeTypeMap() {
        return RemittanceTransactionsRequestDTO.attributeTypeMap;
    }

    public constructor() {
    }
}


export enum RemittanceTransactionsRequestDTOExemptionCodeEnum {
    _01 = '01',
    _03 = '03',
    _04 = '04'
}
export enum RemittanceTransactionsRequestDTOSourceOfFundsEnum {
    Salary = 'Salary',
    PersonalSavings = 'Personal Savings',
    PersonalWealth = 'Personal Wealth',
    RetirementFunds = 'Retirement Funds',
    BusinessOwnerShareholder = 'Business Owner/Shareholder',
    LoanFacility = 'Loan Facility',
    PersonalAccount = 'Personal Account',
    CorporateAccount = 'Corporate Account'
}

