/* tslint:disable */
/* eslint-disable */
/**
 * NIUM Platform
 * NIUM Platform
 *
 * The version of the OpenAPI document: 2023.12.12
 * Contact: experience@nium.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import { AddCategoryResponseDTO } from '../model';
// @ts-ignore
import { CommonResponse } from '../model';
// @ts-ignore
import { ComplianceRFITemplateMetadataResponseDTO } from '../model';
// @ts-ignore
import { CorporateComplianceDocumentRequestDTO } from '../model';
// @ts-ignore
import { CorporateComplianceDocumentResponseDTO } from '../model';
// @ts-ignore
import { CorporateCustomerRequestsDTO } from '../model';
// @ts-ignore
import { CorporateDetailResponseDTO } from '../model';
// @ts-ignore
import { CorporateEnrichedDetailResponseDTO } from '../model';
// @ts-ignore
import { CustomerApiError } from '../model';
// @ts-ignore
import { ProductApiError } from '../model';
// @ts-ignore
import { ProductCorporateCustomerResponseDTO } from '../model';
// @ts-ignore
import { RegenerateKYCURL400Response } from '../model';
// @ts-ignore
import { RegenerateUrlResponse } from '../model';
// @ts-ignore
import { RespondRfiRequestDTO } from '../model';
// @ts-ignore
import { RespondRfiResponseDTO } from '../model';
// @ts-ignore
import { UpdateCorporateKybResponseDTO } from '../model';
/**
 * CustomerAccountCorporateApi - axios parameter creator
 * @export
 */
export const CustomerAccountCorporateApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This API allows you to fetch both public and non-public exhaustive corporate details using business ID.  >ℹ️ INFO   >Every call for this API incurs a fee. Contact your Nium account manager to use it. This API only supports the corporate customer onboarding process. Avoid unnecessary API calls by using the throttling and debouncing techniques. This API should only be called after getting a successful response from [Public Corporate Details using Business ID API](/apis/reference/publiccorporatedetailsusingbusinessid).
         * @summary Exhaustive Corporate Details using Business ID
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} countryCode This field accepts the 2-letter [ISO-2 country code](https://nium-documents.s3-eu-west-1.amazonaws.com/spend-documents/Country+Code.pdf) of the corporate customer.
         * @param {string} [searchReferenceId] This field accepts the search reference id of the corporate customer as received in response of public corporate details api.
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exhaustiveCorporateDetailsUsingBusinessID: async (clientHashId: string, countryCode: string, searchReferenceId?: string, xRequestId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'clientHashId' is not null or undefined
            assertParamExists('exhaustiveCorporateDetailsUsingBusinessID', 'clientHashId', clientHashId)
            // verify required parameter 'countryCode' is not null or undefined
            assertParamExists('exhaustiveCorporateDetailsUsingBusinessID', 'countryCode', countryCode)
            const localVarPath = `/api/v2/client/{clientHashId}/corporate/lookup`
                .replace(`{${"clientHashId"}}`, encodeURIComponent(String(clientHashId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication default required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (countryCode !== undefined) {
                localVarQueryParameter['countryCode'] = countryCode;
            }

            if (searchReferenceId !== undefined) {
                localVarQueryParameter['searchReferenceId'] = searchReferenceId;
            }

            if (xRequestId != null) {
                localVarHeaderParameter['x-request-id'] = String(xRequestId);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This API returns the acceptable values for the `category` query param to be used as input in the corporate onboarding flow. Refer to the [Fetch Corporate Constants](doc:fetch-corporate-constants-api) user guide for details on usage instructions on this API.
         * @summary Fetch corporate constants
         * @param {FetchCorporateConstantsUsingGETCategoryEnum} category This field is used to select one of the category used during corporate customer onboarding. The API response will return list of allowed values for the selected category.
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {FetchCorporateConstantsUsingGETRegionEnum} region The response will be filtered based on the value selected in this field for regulatory region of the customer.
         * @param {FetchCorporateConstantsUsingGETTypeEnum} type Type of Customer being onboarded.
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchCorporateConstantsUsingGET: async (category: FetchCorporateConstantsUsingGETCategoryEnum, clientHashId: string, region: FetchCorporateConstantsUsingGETRegionEnum, type: FetchCorporateConstantsUsingGETTypeEnum, xRequestId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'category' is not null or undefined
            assertParamExists('fetchCorporateConstantsUsingGET', 'category', category)
            // verify required parameter 'clientHashId' is not null or undefined
            assertParamExists('fetchCorporateConstantsUsingGET', 'clientHashId', clientHashId)
            // verify required parameter 'region' is not null or undefined
            assertParamExists('fetchCorporateConstantsUsingGET', 'region', region)
            // verify required parameter 'type' is not null or undefined
            assertParamExists('fetchCorporateConstantsUsingGET', 'type', type)
            const localVarPath = `/api/v2/client/{clientHashId}/onboarding/constants`
                .replace(`{${"clientHashId"}}`, encodeURIComponent(String(clientHashId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication default required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (category !== undefined) {
                localVarQueryParameter['category'] = category;
            }

            if (region !== undefined) {
                localVarQueryParameter['region'] = region;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (xRequestId != null) {
                localVarHeaderParameter['x-request-id'] = String(xRequestId);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This API allows you to fetch details of RFI raised as part of corporate customer onboarding.
         * @summary Fetch Corporate Customer RFI Details
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} [caseId] This field contains unique case ID generated and returned in Onboard API response.
         * @param {string} [clientId] This field contains unique client ID generated and returned in Onboard API response.
         * @param {string} [customerHashId] This field contains the customerHashId, For example, 909ffc5f-c8ab-4df0-bcb2-111fcdd6f735.
         * @param {string} [region] This field contains the region code for which onboarding has been triggered, For example, AU, EU, UK, SG.
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchCorporateCustomerRFIDetails: async (clientHashId: string, caseId?: string, clientId?: string, customerHashId?: string, region?: string, xRequestId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'clientHashId' is not null or undefined
            assertParamExists('fetchCorporateCustomerRFIDetails', 'clientHashId', clientHashId)
            const localVarPath = `/api/v1/client/{clientHashId}/corporate/rfi`
                .replace(`{${"clientHashId"}}`, encodeURIComponent(String(clientHashId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication default required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (caseId !== undefined) {
                localVarQueryParameter['caseId'] = caseId;
            }

            if (clientId !== undefined) {
                localVarQueryParameter['clientId'] = clientId;
            }

            if (customerHashId !== undefined) {
                localVarQueryParameter['customerHashId'] = customerHashId;
            }

            if (region !== undefined) {
                localVarQueryParameter['region'] = region;
            }

            if (xRequestId != null) {
                localVarHeaderParameter['x-request-id'] = String(xRequestId);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This API allows you to onboard a corporate customer under existing client.
         * @summary Onboard Corporate Customer
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {CorporateCustomerRequestsDTO} corporateCustomerRequestsDTO corporateCustomerRequestsDTO
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        onboardCorporateCustomer: async (clientHashId: string, corporateCustomerRequestsDTO: CorporateCustomerRequestsDTO, xRequestId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'clientHashId' is not null or undefined
            assertParamExists('onboardCorporateCustomer', 'clientHashId', clientHashId)
            // verify required parameter 'corporateCustomerRequestsDTO' is not null or undefined
            assertParamExists('onboardCorporateCustomer', 'corporateCustomerRequestsDTO', corporateCustomerRequestsDTO)
            const localVarPath = `/api/v1/client/{clientHashId}/corporate`
                .replace(`{${"clientHashId"}}`, encodeURIComponent(String(clientHashId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication default required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (xRequestId != null) {
                localVarHeaderParameter['x-request-id'] = String(xRequestId);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(corporateCustomerRequestsDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This API will help you to fetch the publicly available corporate details using business Id.
         * @summary Public Corporate Details using Business ID
         * @param {string} businessRegistrationNumber This field contains the business registration number of the entity.
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} countryCode This field contains the 2-letter [ISO-2 country code](doc:currency-and-country-codes).
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        publicCorporateDetailsUsingBusinessID: async (businessRegistrationNumber: string, clientHashId: string, countryCode: string, xRequestId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'businessRegistrationNumber' is not null or undefined
            assertParamExists('publicCorporateDetailsUsingBusinessID', 'businessRegistrationNumber', businessRegistrationNumber)
            // verify required parameter 'clientHashId' is not null or undefined
            assertParamExists('publicCorporateDetailsUsingBusinessID', 'clientHashId', clientHashId)
            // verify required parameter 'countryCode' is not null or undefined
            assertParamExists('publicCorporateDetailsUsingBusinessID', 'countryCode', countryCode)
            const localVarPath = `/api/v1/client/{clientHashId}/corporate/lookup`
                .replace(`{${"clientHashId"}}`, encodeURIComponent(String(clientHashId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication default required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (businessRegistrationNumber !== undefined) {
                localVarQueryParameter['businessRegistrationNumber'] = businessRegistrationNumber;
            }

            if (countryCode !== undefined) {
                localVarQueryParameter['countryCode'] = countryCode;
            }

            if (xRequestId != null) {
                localVarHeaderParameter['x-request-id'] = String(xRequestId);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This api will be used to regenerate kyc url
         * @summary Regenerate KYC URL
         * @param {string} clientHashId The unique client hash id of customer
         * @param {string} customerHashId The unique customer hash id of customer
         * @param {string} [xRequestId] Enter a unique UUID value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        regenerateKYCURL: async (clientHashId: string, customerHashId: string, xRequestId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'clientHashId' is not null or undefined
            assertParamExists('regenerateKYCURL', 'clientHashId', clientHashId)
            // verify required parameter 'customerHashId' is not null or undefined
            assertParamExists('regenerateKYCURL', 'customerHashId', customerHashId)
            const localVarPath = `/api/v1/client/{clientHashId}/customer/{customerHashId}/regenerateKYCURL`
                .replace(`{${"clientHashId"}}`, encodeURIComponent(String(clientHashId)))
                .replace(`{${"customerHashId"}}`, encodeURIComponent(String(customerHashId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication default required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (xRequestId != null) {
                localVarHeaderParameter['x-request-id'] = String(xRequestId);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This API allows you to respond to an RFI raised for a corporate customer. You may use this API to respond to an RFI for data or documents when the corporate customer\'s compliance status is RFI_REQUESTED.
         * @summary Respond to RFI for Corporate Customer
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {RespondRfiRequestDTO} respondRfiRequestDTO respondRfiRequestDTO
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        respondtoRFIforCorporateCustomer: async (clientHashId: string, respondRfiRequestDTO: RespondRfiRequestDTO, xRequestId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'clientHashId' is not null or undefined
            assertParamExists('respondtoRFIforCorporateCustomer', 'clientHashId', clientHashId)
            // verify required parameter 'respondRfiRequestDTO' is not null or undefined
            assertParamExists('respondtoRFIforCorporateCustomer', 'respondRfiRequestDTO', respondRfiRequestDTO)
            const localVarPath = `/api/v1/client/{clientHashId}/corporate/rfi`
                .replace(`{${"clientHashId"}}`, encodeURIComponent(String(clientHashId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication default required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (xRequestId != null) {
                localVarHeaderParameter['x-request-id'] = String(xRequestId);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(respondRfiRequestDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This API allows you to update a corporate customer under existing client.
         * @summary Update Corporate Customer
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} customerHashId Unique customer identifier generated on customer creation.
         * @param {CorporateCustomerRequestsDTO} corporateCustomerRequestsDTO updateCorporateCustomerRequestsDTO
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCorporateCustomerUsingPOST: async (clientHashId: string, customerHashId: string, corporateCustomerRequestsDTO: CorporateCustomerRequestsDTO, xRequestId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'clientHashId' is not null or undefined
            assertParamExists('updateCorporateCustomerUsingPOST', 'clientHashId', clientHashId)
            // verify required parameter 'customerHashId' is not null or undefined
            assertParamExists('updateCorporateCustomerUsingPOST', 'customerHashId', customerHashId)
            // verify required parameter 'corporateCustomerRequestsDTO' is not null or undefined
            assertParamExists('updateCorporateCustomerUsingPOST', 'corporateCustomerRequestsDTO', corporateCustomerRequestsDTO)
            const localVarPath = `/api/v1/client/{clientHashId}/customer/{customerHashId}/corporate`
                .replace(`{${"clientHashId"}}`, encodeURIComponent(String(clientHashId)))
                .replace(`{${"customerHashId"}}`, encodeURIComponent(String(customerHashId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication default required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (xRequestId != null) {
                localVarHeaderParameter['x-request-id'] = String(xRequestId);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(corporateCustomerRequestsDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This API allows you to upload document for corporate customers.
         * @summary Upload Document for Corporate Customer
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} customerHashId Unique customer identifier generated on customer creation.
         * @param {CorporateComplianceDocumentRequestDTO} corporateComplianceDocumentRequestDTO corporateComplianceDocumentRequestDTO
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadDocumentforCorporateCustomer: async (clientHashId: string, customerHashId: string, corporateComplianceDocumentRequestDTO: CorporateComplianceDocumentRequestDTO, xRequestId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'clientHashId' is not null or undefined
            assertParamExists('uploadDocumentforCorporateCustomer', 'clientHashId', clientHashId)
            // verify required parameter 'customerHashId' is not null or undefined
            assertParamExists('uploadDocumentforCorporateCustomer', 'customerHashId', customerHashId)
            // verify required parameter 'corporateComplianceDocumentRequestDTO' is not null or undefined
            assertParamExists('uploadDocumentforCorporateCustomer', 'corporateComplianceDocumentRequestDTO', corporateComplianceDocumentRequestDTO)
            const localVarPath = `/api/v1/client/{clientHashId}/customer/{customerHashId}/corporate/documents`
                .replace(`{${"clientHashId"}}`, encodeURIComponent(String(clientHashId)))
                .replace(`{${"customerHashId"}}`, encodeURIComponent(String(customerHashId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication default required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (xRequestId != null) {
                localVarHeaderParameter['x-request-id'] = String(xRequestId);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(corporateComplianceDocumentRequestDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CustomerAccountCorporateApi - functional programming interface
 * @export
 */
export const CustomerAccountCorporateApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CustomerAccountCorporateApiAxiosParamCreator(configuration)
    return {
        /**
         * This API allows you to fetch both public and non-public exhaustive corporate details using business ID.  >ℹ️ INFO   >Every call for this API incurs a fee. Contact your Nium account manager to use it. This API only supports the corporate customer onboarding process. Avoid unnecessary API calls by using the throttling and debouncing techniques. This API should only be called after getting a successful response from [Public Corporate Details using Business ID API](/apis/reference/publiccorporatedetailsusingbusinessid).
         * @summary Exhaustive Corporate Details using Business ID
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} countryCode This field accepts the 2-letter [ISO-2 country code](https://nium-documents.s3-eu-west-1.amazonaws.com/spend-documents/Country+Code.pdf) of the corporate customer.
         * @param {string} [searchReferenceId] This field accepts the search reference id of the corporate customer as received in response of public corporate details api.
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async exhaustiveCorporateDetailsUsingBusinessID(clientHashId: string, countryCode: string, searchReferenceId?: string, xRequestId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CorporateEnrichedDetailResponseDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.exhaustiveCorporateDetailsUsingBusinessID(clientHashId, countryCode, searchReferenceId, xRequestId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CustomerAccountCorporateApi.exhaustiveCorporateDetailsUsingBusinessID']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * This API returns the acceptable values for the `category` query param to be used as input in the corporate onboarding flow. Refer to the [Fetch Corporate Constants](doc:fetch-corporate-constants-api) user guide for details on usage instructions on this API.
         * @summary Fetch corporate constants
         * @param {FetchCorporateConstantsUsingGETCategoryEnum} category This field is used to select one of the category used during corporate customer onboarding. The API response will return list of allowed values for the selected category.
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {FetchCorporateConstantsUsingGETRegionEnum} region The response will be filtered based on the value selected in this field for regulatory region of the customer.
         * @param {FetchCorporateConstantsUsingGETTypeEnum} type Type of Customer being onboarded.
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchCorporateConstantsUsingGET(category: FetchCorporateConstantsUsingGETCategoryEnum, clientHashId: string, region: FetchCorporateConstantsUsingGETRegionEnum, type: FetchCorporateConstantsUsingGETTypeEnum, xRequestId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AddCategoryResponseDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchCorporateConstantsUsingGET(category, clientHashId, region, type, xRequestId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CustomerAccountCorporateApi.fetchCorporateConstantsUsingGET']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * This API allows you to fetch details of RFI raised as part of corporate customer onboarding.
         * @summary Fetch Corporate Customer RFI Details
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} [caseId] This field contains unique case ID generated and returned in Onboard API response.
         * @param {string} [clientId] This field contains unique client ID generated and returned in Onboard API response.
         * @param {string} [customerHashId] This field contains the customerHashId, For example, 909ffc5f-c8ab-4df0-bcb2-111fcdd6f735.
         * @param {string} [region] This field contains the region code for which onboarding has been triggered, For example, AU, EU, UK, SG.
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchCorporateCustomerRFIDetails(clientHashId: string, caseId?: string, clientId?: string, customerHashId?: string, region?: string, xRequestId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ComplianceRFITemplateMetadataResponseDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchCorporateCustomerRFIDetails(clientHashId, caseId, clientId, customerHashId, region, xRequestId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CustomerAccountCorporateApi.fetchCorporateCustomerRFIDetails']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * This API allows you to onboard a corporate customer under existing client.
         * @summary Onboard Corporate Customer
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {CorporateCustomerRequestsDTO} corporateCustomerRequestsDTO corporateCustomerRequestsDTO
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async onboardCorporateCustomer(clientHashId: string, corporateCustomerRequestsDTO: CorporateCustomerRequestsDTO, xRequestId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductCorporateCustomerResponseDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.onboardCorporateCustomer(clientHashId, corporateCustomerRequestsDTO, xRequestId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CustomerAccountCorporateApi.onboardCorporateCustomer']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * This API will help you to fetch the publicly available corporate details using business Id.
         * @summary Public Corporate Details using Business ID
         * @param {string} businessRegistrationNumber This field contains the business registration number of the entity.
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} countryCode This field contains the 2-letter [ISO-2 country code](doc:currency-and-country-codes).
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async publicCorporateDetailsUsingBusinessID(businessRegistrationNumber: string, clientHashId: string, countryCode: string, xRequestId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CorporateDetailResponseDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.publicCorporateDetailsUsingBusinessID(businessRegistrationNumber, clientHashId, countryCode, xRequestId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CustomerAccountCorporateApi.publicCorporateDetailsUsingBusinessID']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * This api will be used to regenerate kyc url
         * @summary Regenerate KYC URL
         * @param {string} clientHashId The unique client hash id of customer
         * @param {string} customerHashId The unique customer hash id of customer
         * @param {string} [xRequestId] Enter a unique UUID value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async regenerateKYCURL(clientHashId: string, customerHashId: string, xRequestId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RegenerateUrlResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.regenerateKYCURL(clientHashId, customerHashId, xRequestId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CustomerAccountCorporateApi.regenerateKYCURL']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * This API allows you to respond to an RFI raised for a corporate customer. You may use this API to respond to an RFI for data or documents when the corporate customer\'s compliance status is RFI_REQUESTED.
         * @summary Respond to RFI for Corporate Customer
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {RespondRfiRequestDTO} respondRfiRequestDTO respondRfiRequestDTO
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async respondtoRFIforCorporateCustomer(clientHashId: string, respondRfiRequestDTO: RespondRfiRequestDTO, xRequestId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RespondRfiResponseDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.respondtoRFIforCorporateCustomer(clientHashId, respondRfiRequestDTO, xRequestId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CustomerAccountCorporateApi.respondtoRFIforCorporateCustomer']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * This API allows you to update a corporate customer under existing client.
         * @summary Update Corporate Customer
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} customerHashId Unique customer identifier generated on customer creation.
         * @param {CorporateCustomerRequestsDTO} corporateCustomerRequestsDTO updateCorporateCustomerRequestsDTO
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateCorporateCustomerUsingPOST(clientHashId: string, customerHashId: string, corporateCustomerRequestsDTO: CorporateCustomerRequestsDTO, xRequestId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateCorporateKybResponseDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateCorporateCustomerUsingPOST(clientHashId, customerHashId, corporateCustomerRequestsDTO, xRequestId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CustomerAccountCorporateApi.updateCorporateCustomerUsingPOST']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * This API allows you to upload document for corporate customers.
         * @summary Upload Document for Corporate Customer
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} customerHashId Unique customer identifier generated on customer creation.
         * @param {CorporateComplianceDocumentRequestDTO} corporateComplianceDocumentRequestDTO corporateComplianceDocumentRequestDTO
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uploadDocumentforCorporateCustomer(clientHashId: string, customerHashId: string, corporateComplianceDocumentRequestDTO: CorporateComplianceDocumentRequestDTO, xRequestId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CorporateComplianceDocumentResponseDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.uploadDocumentforCorporateCustomer(clientHashId, customerHashId, corporateComplianceDocumentRequestDTO, xRequestId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CustomerAccountCorporateApi.uploadDocumentforCorporateCustomer']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CustomerAccountCorporateApi - factory interface
 * @export
 */
export const CustomerAccountCorporateApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CustomerAccountCorporateApiFp(configuration)
    return {
        /**
         * This API allows you to fetch both public and non-public exhaustive corporate details using business ID.  >ℹ️ INFO   >Every call for this API incurs a fee. Contact your Nium account manager to use it. This API only supports the corporate customer onboarding process. Avoid unnecessary API calls by using the throttling and debouncing techniques. This API should only be called after getting a successful response from [Public Corporate Details using Business ID API](/apis/reference/publiccorporatedetailsusingbusinessid).
         * @summary Exhaustive Corporate Details using Business ID
         * @param {CustomerAccountCorporateApiExhaustiveCorporateDetailsUsingBusinessIDRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exhaustiveCorporateDetailsUsingBusinessID(requestParameters: CustomerAccountCorporateApiExhaustiveCorporateDetailsUsingBusinessIDRequest, options?: RawAxiosRequestConfig): AxiosPromise<CorporateEnrichedDetailResponseDTO> {
            return localVarFp.exhaustiveCorporateDetailsUsingBusinessID(requestParameters.clientHashId, requestParameters.countryCode, requestParameters.searchReferenceId, requestParameters.xRequestId, options).then((request) => request(axios, basePath));
        },
        /**
         * This API returns the acceptable values for the `category` query param to be used as input in the corporate onboarding flow. Refer to the [Fetch Corporate Constants](doc:fetch-corporate-constants-api) user guide for details on usage instructions on this API.
         * @summary Fetch corporate constants
         * @param {CustomerAccountCorporateApiFetchCorporateConstantsUsingGETRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchCorporateConstantsUsingGET(requestParameters: CustomerAccountCorporateApiFetchCorporateConstantsUsingGETRequest, options?: RawAxiosRequestConfig): AxiosPromise<AddCategoryResponseDTO> {
            return localVarFp.fetchCorporateConstantsUsingGET(requestParameters.category, requestParameters.clientHashId, requestParameters.region, requestParameters.type, requestParameters.xRequestId, options).then((request) => request(axios, basePath));
        },
        /**
         * This API allows you to fetch details of RFI raised as part of corporate customer onboarding.
         * @summary Fetch Corporate Customer RFI Details
         * @param {CustomerAccountCorporateApiFetchCorporateCustomerRFIDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchCorporateCustomerRFIDetails(requestParameters: CustomerAccountCorporateApiFetchCorporateCustomerRFIDetailsRequest, options?: RawAxiosRequestConfig): AxiosPromise<ComplianceRFITemplateMetadataResponseDTO> {
            return localVarFp.fetchCorporateCustomerRFIDetails(requestParameters.clientHashId, requestParameters.caseId, requestParameters.clientId, requestParameters.customerHashId, requestParameters.region, requestParameters.xRequestId, options).then((request) => request(axios, basePath));
        },
        /**
         * This API allows you to onboard a corporate customer under existing client.
         * @summary Onboard Corporate Customer
         * @param {CustomerAccountCorporateApiOnboardCorporateCustomerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        onboardCorporateCustomer(requestParameters: CustomerAccountCorporateApiOnboardCorporateCustomerRequest, options?: RawAxiosRequestConfig): AxiosPromise<ProductCorporateCustomerResponseDTO> {
            return localVarFp.onboardCorporateCustomer(requestParameters.clientHashId, requestParameters.corporateCustomerRequestsDTO, requestParameters.xRequestId, options).then((request) => request(axios, basePath));
        },
        /**
         * This API will help you to fetch the publicly available corporate details using business Id.
         * @summary Public Corporate Details using Business ID
         * @param {CustomerAccountCorporateApiPublicCorporateDetailsUsingBusinessIDRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        publicCorporateDetailsUsingBusinessID(requestParameters: CustomerAccountCorporateApiPublicCorporateDetailsUsingBusinessIDRequest, options?: RawAxiosRequestConfig): AxiosPromise<CorporateDetailResponseDTO> {
            return localVarFp.publicCorporateDetailsUsingBusinessID(requestParameters.businessRegistrationNumber, requestParameters.clientHashId, requestParameters.countryCode, requestParameters.xRequestId, options).then((request) => request(axios, basePath));
        },
        /**
         * This api will be used to regenerate kyc url
         * @summary Regenerate KYC URL
         * @param {CustomerAccountCorporateApiRegenerateKYCURLRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        regenerateKYCURL(requestParameters: CustomerAccountCorporateApiRegenerateKYCURLRequest, options?: RawAxiosRequestConfig): AxiosPromise<RegenerateUrlResponse> {
            return localVarFp.regenerateKYCURL(requestParameters.clientHashId, requestParameters.customerHashId, requestParameters.xRequestId, options).then((request) => request(axios, basePath));
        },
        /**
         * This API allows you to respond to an RFI raised for a corporate customer. You may use this API to respond to an RFI for data or documents when the corporate customer\'s compliance status is RFI_REQUESTED.
         * @summary Respond to RFI for Corporate Customer
         * @param {CustomerAccountCorporateApiRespondtoRFIforCorporateCustomerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        respondtoRFIforCorporateCustomer(requestParameters: CustomerAccountCorporateApiRespondtoRFIforCorporateCustomerRequest, options?: RawAxiosRequestConfig): AxiosPromise<RespondRfiResponseDTO> {
            return localVarFp.respondtoRFIforCorporateCustomer(requestParameters.clientHashId, requestParameters.respondRfiRequestDTO, requestParameters.xRequestId, options).then((request) => request(axios, basePath));
        },
        /**
         * This API allows you to update a corporate customer under existing client.
         * @summary Update Corporate Customer
         * @param {CustomerAccountCorporateApiUpdateCorporateCustomerUsingPOSTRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCorporateCustomerUsingPOST(requestParameters: CustomerAccountCorporateApiUpdateCorporateCustomerUsingPOSTRequest, options?: RawAxiosRequestConfig): AxiosPromise<UpdateCorporateKybResponseDTO> {
            return localVarFp.updateCorporateCustomerUsingPOST(requestParameters.clientHashId, requestParameters.customerHashId, requestParameters.corporateCustomerRequestsDTO, requestParameters.xRequestId, options).then((request) => request(axios, basePath));
        },
        /**
         * This API allows you to upload document for corporate customers.
         * @summary Upload Document for Corporate Customer
         * @param {CustomerAccountCorporateApiUploadDocumentforCorporateCustomerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadDocumentforCorporateCustomer(requestParameters: CustomerAccountCorporateApiUploadDocumentforCorporateCustomerRequest, options?: RawAxiosRequestConfig): AxiosPromise<CorporateComplianceDocumentResponseDTO> {
            return localVarFp.uploadDocumentforCorporateCustomer(requestParameters.clientHashId, requestParameters.customerHashId, requestParameters.corporateComplianceDocumentRequestDTO, requestParameters.xRequestId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for exhaustiveCorporateDetailsUsingBusinessID operation in CustomerAccountCorporateApi.
 * @export
 * @interface CustomerAccountCorporateApiExhaustiveCorporateDetailsUsingBusinessIDRequest
 */
export interface CustomerAccountCorporateApiExhaustiveCorporateDetailsUsingBusinessIDRequest {
    /**
     * Unique client identifier generated and shared before API handshake.
     * @type {string}
     * @memberof CustomerAccountCorporateApiExhaustiveCorporateDetailsUsingBusinessID
     */
    readonly clientHashId: string

    /**
     * This field accepts the 2-letter [ISO-2 country code](https://nium-documents.s3-eu-west-1.amazonaws.com/spend-documents/Country+Code.pdf) of the corporate customer.
     * @type {string}
     * @memberof CustomerAccountCorporateApiExhaustiveCorporateDetailsUsingBusinessID
     */
    readonly countryCode: string

    /**
     * This field accepts the search reference id of the corporate customer as received in response of public corporate details api.
     * @type {string}
     * @memberof CustomerAccountCorporateApiExhaustiveCorporateDetailsUsingBusinessID
     */
    readonly searchReferenceId?: string

    /**
     * Enter a unique UUID value
     * @type {string}
     * @memberof CustomerAccountCorporateApiExhaustiveCorporateDetailsUsingBusinessID
     */
    readonly xRequestId?: string
}

/**
 * Request parameters for fetchCorporateConstantsUsingGET operation in CustomerAccountCorporateApi.
 * @export
 * @interface CustomerAccountCorporateApiFetchCorporateConstantsUsingGETRequest
 */
export interface CustomerAccountCorporateApiFetchCorporateConstantsUsingGETRequest {
    /**
     * This field is used to select one of the category used during corporate customer onboarding. The API response will return list of allowed values for the selected category.
     * @type {'annualTurnover' | 'businessType' | 'countryName' | 'countryOfOperation' | 'documentType' | 'intendedUseOfAccount' | 'industrySector' | 'listedExchange' | 'position' | 'regulatedTrustType' | 'restrictedCountries' | 'state' | 'streetType' | 'totalEmployees' | 'unregulatedTrustType' | 'rfiTemplates' | 'estimatedMonthlyFunding' | 'occupation'}
     * @memberof CustomerAccountCorporateApiFetchCorporateConstantsUsingGET
     */
    readonly category: FetchCorporateConstantsUsingGETCategoryEnum

    /**
     * Unique client identifier generated and shared before API handshake.
     * @type {string}
     * @memberof CustomerAccountCorporateApiFetchCorporateConstantsUsingGET
     */
    readonly clientHashId: string

    /**
     * The response will be filtered based on the value selected in this field for regulatory region of the customer.
     * @type {'AU' | 'EU' | 'SG' | 'HK' | 'UK' | 'US' | 'CA'}
     * @memberof CustomerAccountCorporateApiFetchCorporateConstantsUsingGET
     */
    readonly region: FetchCorporateConstantsUsingGETRegionEnum

    /**
     * Type of Customer being onboarded.
     * @type {'INDIVIDUAL' | 'CORPORATE'}
     * @memberof CustomerAccountCorporateApiFetchCorporateConstantsUsingGET
     */
    readonly type: FetchCorporateConstantsUsingGETTypeEnum

    /**
     * Enter a unique UUID value
     * @type {string}
     * @memberof CustomerAccountCorporateApiFetchCorporateConstantsUsingGET
     */
    readonly xRequestId?: string
}

/**
 * Request parameters for fetchCorporateCustomerRFIDetails operation in CustomerAccountCorporateApi.
 * @export
 * @interface CustomerAccountCorporateApiFetchCorporateCustomerRFIDetailsRequest
 */
export interface CustomerAccountCorporateApiFetchCorporateCustomerRFIDetailsRequest {
    /**
     * Unique client identifier generated and shared before API handshake.
     * @type {string}
     * @memberof CustomerAccountCorporateApiFetchCorporateCustomerRFIDetails
     */
    readonly clientHashId: string

    /**
     * This field contains unique case ID generated and returned in Onboard API response.
     * @type {string}
     * @memberof CustomerAccountCorporateApiFetchCorporateCustomerRFIDetails
     */
    readonly caseId?: string

    /**
     * This field contains unique client ID generated and returned in Onboard API response.
     * @type {string}
     * @memberof CustomerAccountCorporateApiFetchCorporateCustomerRFIDetails
     */
    readonly clientId?: string

    /**
     * This field contains the customerHashId, For example, 909ffc5f-c8ab-4df0-bcb2-111fcdd6f735.
     * @type {string}
     * @memberof CustomerAccountCorporateApiFetchCorporateCustomerRFIDetails
     */
    readonly customerHashId?: string

    /**
     * This field contains the region code for which onboarding has been triggered, For example, AU, EU, UK, SG.
     * @type {string}
     * @memberof CustomerAccountCorporateApiFetchCorporateCustomerRFIDetails
     */
    readonly region?: string

    /**
     * Enter a unique UUID value
     * @type {string}
     * @memberof CustomerAccountCorporateApiFetchCorporateCustomerRFIDetails
     */
    readonly xRequestId?: string
}

/**
 * Request parameters for onboardCorporateCustomer operation in CustomerAccountCorporateApi.
 * @export
 * @interface CustomerAccountCorporateApiOnboardCorporateCustomerRequest
 */
export interface CustomerAccountCorporateApiOnboardCorporateCustomerRequest {
    /**
     * Unique client identifier generated and shared before API handshake.
     * @type {string}
     * @memberof CustomerAccountCorporateApiOnboardCorporateCustomer
     */
    readonly clientHashId: string

    /**
     * corporateCustomerRequestsDTO
     * @type {CorporateCustomerRequestsDTO}
     * @memberof CustomerAccountCorporateApiOnboardCorporateCustomer
     */
    readonly corporateCustomerRequestsDTO: CorporateCustomerRequestsDTO

    /**
     * Enter a unique UUID value
     * @type {string}
     * @memberof CustomerAccountCorporateApiOnboardCorporateCustomer
     */
    readonly xRequestId?: string
}

/**
 * Request parameters for publicCorporateDetailsUsingBusinessID operation in CustomerAccountCorporateApi.
 * @export
 * @interface CustomerAccountCorporateApiPublicCorporateDetailsUsingBusinessIDRequest
 */
export interface CustomerAccountCorporateApiPublicCorporateDetailsUsingBusinessIDRequest {
    /**
     * This field contains the business registration number of the entity.
     * @type {string}
     * @memberof CustomerAccountCorporateApiPublicCorporateDetailsUsingBusinessID
     */
    readonly businessRegistrationNumber: string

    /**
     * Unique client identifier generated and shared before API handshake.
     * @type {string}
     * @memberof CustomerAccountCorporateApiPublicCorporateDetailsUsingBusinessID
     */
    readonly clientHashId: string

    /**
     * This field contains the 2-letter [ISO-2 country code](doc:currency-and-country-codes).
     * @type {string}
     * @memberof CustomerAccountCorporateApiPublicCorporateDetailsUsingBusinessID
     */
    readonly countryCode: string

    /**
     * Enter a unique UUID value
     * @type {string}
     * @memberof CustomerAccountCorporateApiPublicCorporateDetailsUsingBusinessID
     */
    readonly xRequestId?: string
}

/**
 * Request parameters for regenerateKYCURL operation in CustomerAccountCorporateApi.
 * @export
 * @interface CustomerAccountCorporateApiRegenerateKYCURLRequest
 */
export interface CustomerAccountCorporateApiRegenerateKYCURLRequest {
    /**
     * The unique client hash id of customer
     * @type {string}
     * @memberof CustomerAccountCorporateApiRegenerateKYCURL
     */
    readonly clientHashId: string

    /**
     * The unique customer hash id of customer
     * @type {string}
     * @memberof CustomerAccountCorporateApiRegenerateKYCURL
     */
    readonly customerHashId: string

    /**
     * Enter a unique UUID value.
     * @type {string}
     * @memberof CustomerAccountCorporateApiRegenerateKYCURL
     */
    readonly xRequestId?: string
}

/**
 * Request parameters for respondtoRFIforCorporateCustomer operation in CustomerAccountCorporateApi.
 * @export
 * @interface CustomerAccountCorporateApiRespondtoRFIforCorporateCustomerRequest
 */
export interface CustomerAccountCorporateApiRespondtoRFIforCorporateCustomerRequest {
    /**
     * Unique client identifier generated and shared before API handshake.
     * @type {string}
     * @memberof CustomerAccountCorporateApiRespondtoRFIforCorporateCustomer
     */
    readonly clientHashId: string

    /**
     * respondRfiRequestDTO
     * @type {RespondRfiRequestDTO}
     * @memberof CustomerAccountCorporateApiRespondtoRFIforCorporateCustomer
     */
    readonly respondRfiRequestDTO: RespondRfiRequestDTO

    /**
     * Enter a unique UUID value
     * @type {string}
     * @memberof CustomerAccountCorporateApiRespondtoRFIforCorporateCustomer
     */
    readonly xRequestId?: string
}

/**
 * Request parameters for updateCorporateCustomerUsingPOST operation in CustomerAccountCorporateApi.
 * @export
 * @interface CustomerAccountCorporateApiUpdateCorporateCustomerUsingPOSTRequest
 */
export interface CustomerAccountCorporateApiUpdateCorporateCustomerUsingPOSTRequest {
    /**
     * Unique client identifier generated and shared before API handshake.
     * @type {string}
     * @memberof CustomerAccountCorporateApiUpdateCorporateCustomerUsingPOST
     */
    readonly clientHashId: string

    /**
     * Unique customer identifier generated on customer creation.
     * @type {string}
     * @memberof CustomerAccountCorporateApiUpdateCorporateCustomerUsingPOST
     */
    readonly customerHashId: string

    /**
     * updateCorporateCustomerRequestsDTO
     * @type {CorporateCustomerRequestsDTO}
     * @memberof CustomerAccountCorporateApiUpdateCorporateCustomerUsingPOST
     */
    readonly corporateCustomerRequestsDTO: CorporateCustomerRequestsDTO

    /**
     * Enter a unique UUID value
     * @type {string}
     * @memberof CustomerAccountCorporateApiUpdateCorporateCustomerUsingPOST
     */
    readonly xRequestId?: string
}

/**
 * Request parameters for uploadDocumentforCorporateCustomer operation in CustomerAccountCorporateApi.
 * @export
 * @interface CustomerAccountCorporateApiUploadDocumentforCorporateCustomerRequest
 */
export interface CustomerAccountCorporateApiUploadDocumentforCorporateCustomerRequest {
    /**
     * Unique client identifier generated and shared before API handshake.
     * @type {string}
     * @memberof CustomerAccountCorporateApiUploadDocumentforCorporateCustomer
     */
    readonly clientHashId: string

    /**
     * Unique customer identifier generated on customer creation.
     * @type {string}
     * @memberof CustomerAccountCorporateApiUploadDocumentforCorporateCustomer
     */
    readonly customerHashId: string

    /**
     * corporateComplianceDocumentRequestDTO
     * @type {CorporateComplianceDocumentRequestDTO}
     * @memberof CustomerAccountCorporateApiUploadDocumentforCorporateCustomer
     */
    readonly corporateComplianceDocumentRequestDTO: CorporateComplianceDocumentRequestDTO

    /**
     * Enter a unique UUID value
     * @type {string}
     * @memberof CustomerAccountCorporateApiUploadDocumentforCorporateCustomer
     */
    readonly xRequestId?: string
}

/**
 * CustomerAccountCorporateApi - object-oriented interface
 * @export
 * @class CustomerAccountCorporateApi
 * @extends {BaseAPI}
 */
export class CustomerAccountCorporateApi extends BaseAPI {
    /**
     * This API allows you to fetch both public and non-public exhaustive corporate details using business ID.  >ℹ️ INFO   >Every call for this API incurs a fee. Contact your Nium account manager to use it. This API only supports the corporate customer onboarding process. Avoid unnecessary API calls by using the throttling and debouncing techniques. This API should only be called after getting a successful response from [Public Corporate Details using Business ID API](/apis/reference/publiccorporatedetailsusingbusinessid).
     * @summary Exhaustive Corporate Details using Business ID
     * @param {CustomerAccountCorporateApiExhaustiveCorporateDetailsUsingBusinessIDRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerAccountCorporateApi
     */
    public exhaustiveCorporateDetailsUsingBusinessID(requestParameters: CustomerAccountCorporateApiExhaustiveCorporateDetailsUsingBusinessIDRequest, options?: RawAxiosRequestConfig) {
        return CustomerAccountCorporateApiFp(this.configuration).exhaustiveCorporateDetailsUsingBusinessID(requestParameters.clientHashId, requestParameters.countryCode, requestParameters.searchReferenceId, requestParameters.xRequestId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This API returns the acceptable values for the `category` query param to be used as input in the corporate onboarding flow. Refer to the [Fetch Corporate Constants](doc:fetch-corporate-constants-api) user guide for details on usage instructions on this API.
     * @summary Fetch corporate constants
     * @param {CustomerAccountCorporateApiFetchCorporateConstantsUsingGETRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerAccountCorporateApi
     */
    public fetchCorporateConstantsUsingGET(requestParameters: CustomerAccountCorporateApiFetchCorporateConstantsUsingGETRequest, options?: RawAxiosRequestConfig) {
        return CustomerAccountCorporateApiFp(this.configuration).fetchCorporateConstantsUsingGET(requestParameters.category, requestParameters.clientHashId, requestParameters.region, requestParameters.type, requestParameters.xRequestId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This API allows you to fetch details of RFI raised as part of corporate customer onboarding.
     * @summary Fetch Corporate Customer RFI Details
     * @param {CustomerAccountCorporateApiFetchCorporateCustomerRFIDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerAccountCorporateApi
     */
    public fetchCorporateCustomerRFIDetails(requestParameters: CustomerAccountCorporateApiFetchCorporateCustomerRFIDetailsRequest, options?: RawAxiosRequestConfig) {
        return CustomerAccountCorporateApiFp(this.configuration).fetchCorporateCustomerRFIDetails(requestParameters.clientHashId, requestParameters.caseId, requestParameters.clientId, requestParameters.customerHashId, requestParameters.region, requestParameters.xRequestId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This API allows you to onboard a corporate customer under existing client.
     * @summary Onboard Corporate Customer
     * @param {CustomerAccountCorporateApiOnboardCorporateCustomerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerAccountCorporateApi
     */
    public onboardCorporateCustomer(requestParameters: CustomerAccountCorporateApiOnboardCorporateCustomerRequest, options?: RawAxiosRequestConfig) {
        return CustomerAccountCorporateApiFp(this.configuration).onboardCorporateCustomer(requestParameters.clientHashId, requestParameters.corporateCustomerRequestsDTO, requestParameters.xRequestId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This API will help you to fetch the publicly available corporate details using business Id.
     * @summary Public Corporate Details using Business ID
     * @param {CustomerAccountCorporateApiPublicCorporateDetailsUsingBusinessIDRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerAccountCorporateApi
     */
    public publicCorporateDetailsUsingBusinessID(requestParameters: CustomerAccountCorporateApiPublicCorporateDetailsUsingBusinessIDRequest, options?: RawAxiosRequestConfig) {
        return CustomerAccountCorporateApiFp(this.configuration).publicCorporateDetailsUsingBusinessID(requestParameters.businessRegistrationNumber, requestParameters.clientHashId, requestParameters.countryCode, requestParameters.xRequestId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This api will be used to regenerate kyc url
     * @summary Regenerate KYC URL
     * @param {CustomerAccountCorporateApiRegenerateKYCURLRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerAccountCorporateApi
     */
    public regenerateKYCURL(requestParameters: CustomerAccountCorporateApiRegenerateKYCURLRequest, options?: RawAxiosRequestConfig) {
        return CustomerAccountCorporateApiFp(this.configuration).regenerateKYCURL(requestParameters.clientHashId, requestParameters.customerHashId, requestParameters.xRequestId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This API allows you to respond to an RFI raised for a corporate customer. You may use this API to respond to an RFI for data or documents when the corporate customer\'s compliance status is RFI_REQUESTED.
     * @summary Respond to RFI for Corporate Customer
     * @param {CustomerAccountCorporateApiRespondtoRFIforCorporateCustomerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerAccountCorporateApi
     */
    public respondtoRFIforCorporateCustomer(requestParameters: CustomerAccountCorporateApiRespondtoRFIforCorporateCustomerRequest, options?: RawAxiosRequestConfig) {
        return CustomerAccountCorporateApiFp(this.configuration).respondtoRFIforCorporateCustomer(requestParameters.clientHashId, requestParameters.respondRfiRequestDTO, requestParameters.xRequestId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This API allows you to update a corporate customer under existing client.
     * @summary Update Corporate Customer
     * @param {CustomerAccountCorporateApiUpdateCorporateCustomerUsingPOSTRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerAccountCorporateApi
     */
    public updateCorporateCustomerUsingPOST(requestParameters: CustomerAccountCorporateApiUpdateCorporateCustomerUsingPOSTRequest, options?: RawAxiosRequestConfig) {
        return CustomerAccountCorporateApiFp(this.configuration).updateCorporateCustomerUsingPOST(requestParameters.clientHashId, requestParameters.customerHashId, requestParameters.corporateCustomerRequestsDTO, requestParameters.xRequestId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This API allows you to upload document for corporate customers.
     * @summary Upload Document for Corporate Customer
     * @param {CustomerAccountCorporateApiUploadDocumentforCorporateCustomerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerAccountCorporateApi
     */
    public uploadDocumentforCorporateCustomer(requestParameters: CustomerAccountCorporateApiUploadDocumentforCorporateCustomerRequest, options?: RawAxiosRequestConfig) {
        return CustomerAccountCorporateApiFp(this.configuration).uploadDocumentforCorporateCustomer(requestParameters.clientHashId, requestParameters.customerHashId, requestParameters.corporateComplianceDocumentRequestDTO, requestParameters.xRequestId, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const FetchCorporateConstantsUsingGETCategoryEnum = {
    AnnualTurnover: 'annualTurnover',
    BusinessType: 'businessType',
    CountryName: 'countryName',
    CountryOfOperation: 'countryOfOperation',
    DocumentType: 'documentType',
    IntendedUseOfAccount: 'intendedUseOfAccount',
    IndustrySector: 'industrySector',
    ListedExchange: 'listedExchange',
    Position: 'position',
    RegulatedTrustType: 'regulatedTrustType',
    RestrictedCountries: 'restrictedCountries',
    State: 'state',
    StreetType: 'streetType',
    TotalEmployees: 'totalEmployees',
    UnregulatedTrustType: 'unregulatedTrustType',
    RfiTemplates: 'rfiTemplates',
    EstimatedMonthlyFunding: 'estimatedMonthlyFunding',
    Occupation: 'occupation'
} as const;
export type FetchCorporateConstantsUsingGETCategoryEnum = typeof FetchCorporateConstantsUsingGETCategoryEnum[keyof typeof FetchCorporateConstantsUsingGETCategoryEnum];
/**
 * @export
 */
export const FetchCorporateConstantsUsingGETRegionEnum = {
    Au: 'AU',
    Eu: 'EU',
    Sg: 'SG',
    Hk: 'HK',
    Uk: 'UK',
    Us: 'US',
    Ca: 'CA'
} as const;
export type FetchCorporateConstantsUsingGETRegionEnum = typeof FetchCorporateConstantsUsingGETRegionEnum[keyof typeof FetchCorporateConstantsUsingGETRegionEnum];
/**
 * @export
 */
export const FetchCorporateConstantsUsingGETTypeEnum = {
    Individual: 'INDIVIDUAL',
    Corporate: 'CORPORATE'
} as const;
export type FetchCorporateConstantsUsingGETTypeEnum = typeof FetchCorporateConstantsUsingGETTypeEnum[keyof typeof FetchCorporateConstantsUsingGETTypeEnum];
