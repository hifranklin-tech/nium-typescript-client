/* tslint:disable */
/* eslint-disable */
/**
 * NIUM Platform
 * NIUM Platform
 *
 * The version of the OpenAPI document: 2023.12.12
 * Contact: experience@nium.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import { FundingInstrumentStatusUpdateRequestDTO } from '../model';
// @ts-ignore
import { InwardPaymentManualRequestDTO } from '../model';
// @ts-ignore
import { PayinApiError } from '../model';
// @ts-ignore
import { PayinApiResponse2 } from '../model';
/**
 * PayinApi - axios parameter creator
 * @export
 */
export const PayinApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Simulate Funding Instrument Status Update (Sandbox Testing)
         * @param {string} clientHashId clientHashId
         * @param {string} customerHashId customerHashId
         * @param {string} fundingInstrumentId fundingInstrumentId
         * @param {FundingInstrumentStatusUpdateRequestDTO} fundingInstrumentStatusUpdateRequestDTO fundingInstrumentStatusUpdateRequestDTO
         * @param {string} [xRequestId] Enter a unique UUID value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        simulateFundingInstrumentStatusUpdate: async (clientHashId: string, customerHashId: string, fundingInstrumentId: string, fundingInstrumentStatusUpdateRequestDTO: FundingInstrumentStatusUpdateRequestDTO, xRequestId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'clientHashId' is not null or undefined
            assertParamExists('simulateFundingInstrumentStatusUpdate', 'clientHashId', clientHashId)
            // verify required parameter 'customerHashId' is not null or undefined
            assertParamExists('simulateFundingInstrumentStatusUpdate', 'customerHashId', customerHashId)
            // verify required parameter 'fundingInstrumentId' is not null or undefined
            assertParamExists('simulateFundingInstrumentStatusUpdate', 'fundingInstrumentId', fundingInstrumentId)
            // verify required parameter 'fundingInstrumentStatusUpdateRequestDTO' is not null or undefined
            assertParamExists('simulateFundingInstrumentStatusUpdate', 'fundingInstrumentStatusUpdateRequestDTO', fundingInstrumentStatusUpdateRequestDTO)
            const localVarPath = `/api/v1/simulations/client/{clientHashId}/customer/{customerHashId}/fundingInstruments/{fundingInstrumentId}/updateStatus`
                .replace(`{${"clientHashId"}}`, encodeURIComponent(String(clientHashId)))
                .replace(`{${"customerHashId"}}`, encodeURIComponent(String(customerHashId)))
                .replace(`{${"fundingInstrumentId"}}`, encodeURIComponent(String(fundingInstrumentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication default required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (xRequestId != null) {
                localVarHeaderParameter['x-request-id'] = String(xRequestId);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(fundingInstrumentStatusUpdateRequestDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This API can be used in \'Sandbox testing\' to simulate inward receive transaction and credit funds into the wallet for testing purposes.  >ℹ️ INFO  >This API is for testing purpose only and not to be used in production. >Use a unique bankReferenceNumber for every new simulated receive payment transaction request.
         * @summary Simulate Receive Transaction
         * @param {InwardPaymentManualRequestDTO} inwardPaymentManualRequestDTO inwardPaymentManualRequestDTO
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        simulatereceivepayment: async (inwardPaymentManualRequestDTO: InwardPaymentManualRequestDTO, xRequestId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'inwardPaymentManualRequestDTO' is not null or undefined
            assertParamExists('simulatereceivepayment', 'inwardPaymentManualRequestDTO', inwardPaymentManualRequestDTO)
            const localVarPath = `/api/v1/inward/payment/manual`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication default required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (xRequestId != null) {
                localVarHeaderParameter['x-request-id'] = String(xRequestId);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(inwardPaymentManualRequestDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PayinApi - functional programming interface
 * @export
 */
export const PayinApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PayinApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Simulate Funding Instrument Status Update (Sandbox Testing)
         * @param {string} clientHashId clientHashId
         * @param {string} customerHashId customerHashId
         * @param {string} fundingInstrumentId fundingInstrumentId
         * @param {FundingInstrumentStatusUpdateRequestDTO} fundingInstrumentStatusUpdateRequestDTO fundingInstrumentStatusUpdateRequestDTO
         * @param {string} [xRequestId] Enter a unique UUID value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async simulateFundingInstrumentStatusUpdate(clientHashId: string, customerHashId: string, fundingInstrumentId: string, fundingInstrumentStatusUpdateRequestDTO: FundingInstrumentStatusUpdateRequestDTO, xRequestId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.simulateFundingInstrumentStatusUpdate(clientHashId, customerHashId, fundingInstrumentId, fundingInstrumentStatusUpdateRequestDTO, xRequestId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PayinApi.simulateFundingInstrumentStatusUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * This API can be used in \'Sandbox testing\' to simulate inward receive transaction and credit funds into the wallet for testing purposes.  >ℹ️ INFO  >This API is for testing purpose only and not to be used in production. >Use a unique bankReferenceNumber for every new simulated receive payment transaction request.
         * @summary Simulate Receive Transaction
         * @param {InwardPaymentManualRequestDTO} inwardPaymentManualRequestDTO inwardPaymentManualRequestDTO
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async simulatereceivepayment(inwardPaymentManualRequestDTO: InwardPaymentManualRequestDTO, xRequestId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PayinApiResponse2>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.simulatereceivepayment(inwardPaymentManualRequestDTO, xRequestId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PayinApi.simulatereceivepayment']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * PayinApi - factory interface
 * @export
 */
export const PayinApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PayinApiFp(configuration)
    return {
        /**
         * 
         * @summary Simulate Funding Instrument Status Update (Sandbox Testing)
         * @param {string} clientHashId clientHashId
         * @param {string} customerHashId customerHashId
         * @param {string} fundingInstrumentId fundingInstrumentId
         * @param {FundingInstrumentStatusUpdateRequestDTO} fundingInstrumentStatusUpdateRequestDTO fundingInstrumentStatusUpdateRequestDTO
         * @param {string} [xRequestId] Enter a unique UUID value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        simulateFundingInstrumentStatusUpdate(clientHashId: string, customerHashId: string, fundingInstrumentId: string, fundingInstrumentStatusUpdateRequestDTO: FundingInstrumentStatusUpdateRequestDTO, xRequestId?: string, options?: any): AxiosPromise<void> {
            return localVarFp.simulateFundingInstrumentStatusUpdate(clientHashId, customerHashId, fundingInstrumentId, fundingInstrumentStatusUpdateRequestDTO, xRequestId, options).then((request) => request(axios, basePath));
        },
        /**
         * This API can be used in \'Sandbox testing\' to simulate inward receive transaction and credit funds into the wallet for testing purposes.  >ℹ️ INFO  >This API is for testing purpose only and not to be used in production. >Use a unique bankReferenceNumber for every new simulated receive payment transaction request.
         * @summary Simulate Receive Transaction
         * @param {InwardPaymentManualRequestDTO} inwardPaymentManualRequestDTO inwardPaymentManualRequestDTO
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        simulatereceivepayment(inwardPaymentManualRequestDTO: InwardPaymentManualRequestDTO, xRequestId?: string, options?: any): AxiosPromise<PayinApiResponse2> {
            return localVarFp.simulatereceivepayment(inwardPaymentManualRequestDTO, xRequestId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PayinApi - object-oriented interface
 * @export
 * @class PayinApi
 * @extends {BaseAPI}
 */
export class PayinApi extends BaseAPI {
    /**
     * 
     * @summary Simulate Funding Instrument Status Update (Sandbox Testing)
     * @param {string} clientHashId clientHashId
     * @param {string} customerHashId customerHashId
     * @param {string} fundingInstrumentId fundingInstrumentId
     * @param {FundingInstrumentStatusUpdateRequestDTO} fundingInstrumentStatusUpdateRequestDTO fundingInstrumentStatusUpdateRequestDTO
     * @param {string} [xRequestId] Enter a unique UUID value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PayinApi
     */
    public simulateFundingInstrumentStatusUpdate(clientHashId: string, customerHashId: string, fundingInstrumentId: string, fundingInstrumentStatusUpdateRequestDTO: FundingInstrumentStatusUpdateRequestDTO, xRequestId?: string, options?: RawAxiosRequestConfig) {
        return PayinApiFp(this.configuration).simulateFundingInstrumentStatusUpdate(clientHashId, customerHashId, fundingInstrumentId, fundingInstrumentStatusUpdateRequestDTO, xRequestId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This API can be used in \'Sandbox testing\' to simulate inward receive transaction and credit funds into the wallet for testing purposes.  >ℹ️ INFO  >This API is for testing purpose only and not to be used in production. >Use a unique bankReferenceNumber for every new simulated receive payment transaction request.
     * @summary Simulate Receive Transaction
     * @param {InwardPaymentManualRequestDTO} inwardPaymentManualRequestDTO inwardPaymentManualRequestDTO
     * @param {string} [xRequestId] Enter a unique UUID value
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PayinApi
     */
    public simulatereceivepayment(inwardPaymentManualRequestDTO: InwardPaymentManualRequestDTO, xRequestId?: string, options?: RawAxiosRequestConfig) {
        return PayinApiFp(this.configuration).simulatereceivepayment(inwardPaymentManualRequestDTO, xRequestId, options).then((request) => request(this.axios, this.basePath));
    }
}

