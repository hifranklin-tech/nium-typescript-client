/* tslint:disable */
/* eslint-disable */
/**
 * NIUM Platform
 * NIUM Platform
 *
 * The version of the OpenAPI document: 2024.8.20
 * Contact: experience@nium.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { CancelConversionErrorResponse } from '../model';
// @ts-ignore
import type { ConversionCancelRequest } from '../model';
// @ts-ignore
import type { ConversionCancelResponse } from '../model';
// @ts-ignore
import type { ConversionCreationRequest } from '../model';
// @ts-ignore
import type { ConversionCreationResponse } from '../model';
// @ts-ignore
import type { ConversionExecutionResponse } from '../model';
// @ts-ignore
import type { CreateConversionErrorResponse } from '../model';
// @ts-ignore
import type { Descriptive404Error } from '../model';
// @ts-ignore
import type { ExecuteConversionErrorResponse } from '../model';
// @ts-ignore
import type { FXStandard401Error } from '../model';
// @ts-ignore
import type { FXStandard403Error } from '../model';
// @ts-ignore
import type { FXStandard500Error } from '../model';
// @ts-ignore
import type { FetchConversionErrorResponse } from '../model';
/**
 * ConversionsApi - axios parameter creator
 * @export
 */
export const ConversionsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This API allows you to cancel a conversion prior to the execution time.
         * @summary Cancel Conversion
         * @param {string} clientHashId Unique identifier of the client.
         * @param {string} customerHashId Unique identifier of the customer.
         * @param {string} walletHashId Unique identifier of the wallet.
         * @param {string} conversionId 
         * @param {ConversionCancelRequest} conversionCancelRequest ConversionCancelRequest
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelConversion: async (clientHashId: string, customerHashId: string, walletHashId: string, conversionId: string, conversionCancelRequest: ConversionCancelRequest, xRequestId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'clientHashId' is not null or undefined
            assertParamExists('cancelConversion', 'clientHashId', clientHashId)
            // verify required parameter 'customerHashId' is not null or undefined
            assertParamExists('cancelConversion', 'customerHashId', customerHashId)
            // verify required parameter 'walletHashId' is not null or undefined
            assertParamExists('cancelConversion', 'walletHashId', walletHashId)
            // verify required parameter 'conversionId' is not null or undefined
            assertParamExists('cancelConversion', 'conversionId', conversionId)
            // verify required parameter 'conversionCancelRequest' is not null or undefined
            assertParamExists('cancelConversion', 'conversionCancelRequest', conversionCancelRequest)
            const localVarPath = `/api/v1/client/{clientHashId}/customer/{customerHashId}/wallet/{walletHashId}/conversions/{conversionId}/cancel`
                .replace(`{${"clientHashId"}}`, encodeURIComponent(String(clientHashId)))
                .replace(`{${"customerHashId"}}`, encodeURIComponent(String(customerHashId)))
                .replace(`{${"walletHashId"}}`, encodeURIComponent(String(walletHashId)))
                .replace(`{${"conversionId"}}`, encodeURIComponent(String(conversionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication default required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (xRequestId != null) {
                localVarHeaderParameter['x-request-id'] = String(xRequestId);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(conversionCancelRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This API allows you to convert the balance from one currency to another within the same customer wallet either at the current market rate or using a previous exchange rate quote. This API allows you to select a settlement schedule for the conversion.
         * @summary Create Conversion
         * @param {string} clientHashId Unique identifier of the client.
         * @param {string} customerHashId Unique identifier of the customer.
         * @param {string} walletHashId Unique identifier of the wallet.
         * @param {ConversionCreationRequest} conversionCreationRequest ConversionCreationRequest
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createConversion: async (clientHashId: string, customerHashId: string, walletHashId: string, conversionCreationRequest: ConversionCreationRequest, xRequestId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'clientHashId' is not null or undefined
            assertParamExists('createConversion', 'clientHashId', clientHashId)
            // verify required parameter 'customerHashId' is not null or undefined
            assertParamExists('createConversion', 'customerHashId', customerHashId)
            // verify required parameter 'walletHashId' is not null or undefined
            assertParamExists('createConversion', 'walletHashId', walletHashId)
            // verify required parameter 'conversionCreationRequest' is not null or undefined
            assertParamExists('createConversion', 'conversionCreationRequest', conversionCreationRequest)
            const localVarPath = `/api/v1/client/{clientHashId}/customer/{customerHashId}/wallet/{walletHashId}/conversions`
                .replace(`{${"clientHashId"}}`, encodeURIComponent(String(clientHashId)))
                .replace(`{${"customerHashId"}}`, encodeURIComponent(String(customerHashId)))
                .replace(`{${"walletHashId"}}`, encodeURIComponent(String(walletHashId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication default required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (xRequestId != null) {
                localVarHeaderParameter['x-request-id'] = String(xRequestId);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(conversionCreationRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint triggers the manual execution of a scheduled conversion within the customer wallet. The response includes only the conversion\'s ID and its current status.
         * @summary Execute Conversion
         * @param {string} clientHashId Unique identifier of the client.
         * @param {string} customerHashId Unique identifier of the customer.
         * @param {string} walletHashId Unique identifier of the wallet.
         * @param {string} conversionId 
         * @param {string} [xRequestId] Enter a unique UUID value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        executeConversion: async (clientHashId: string, customerHashId: string, walletHashId: string, conversionId: string, xRequestId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'clientHashId' is not null or undefined
            assertParamExists('executeConversion', 'clientHashId', clientHashId)
            // verify required parameter 'customerHashId' is not null or undefined
            assertParamExists('executeConversion', 'customerHashId', customerHashId)
            // verify required parameter 'walletHashId' is not null or undefined
            assertParamExists('executeConversion', 'walletHashId', walletHashId)
            // verify required parameter 'conversionId' is not null or undefined
            assertParamExists('executeConversion', 'conversionId', conversionId)
            const localVarPath = `/api/v1/client/{clientHashId}/customer/{customerHashId}/wallet/{walletHashId}/conversions/{conversionId}/execute`
                .replace(`{${"clientHashId"}}`, encodeURIComponent(String(clientHashId)))
                .replace(`{${"customerHashId"}}`, encodeURIComponent(String(customerHashId)))
                .replace(`{${"walletHashId"}}`, encodeURIComponent(String(walletHashId)))
                .replace(`{${"conversionId"}}`, encodeURIComponent(String(conversionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication default required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (xRequestId != null) {
                localVarHeaderParameter['x-request-id'] = String(xRequestId);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This API will retrieve an existing conversion with the conversionId.
         * @summary Fetch Conversion by id
         * @param {string} clientHashId Unique identifier of the client.
         * @param {string} customerHashId Unique identifier of the customer.
         * @param {string} walletHashId Unique identifier of the wallet.
         * @param {string} conversionId 
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchConversion: async (clientHashId: string, customerHashId: string, walletHashId: string, conversionId: string, xRequestId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'clientHashId' is not null or undefined
            assertParamExists('fetchConversion', 'clientHashId', clientHashId)
            // verify required parameter 'customerHashId' is not null or undefined
            assertParamExists('fetchConversion', 'customerHashId', customerHashId)
            // verify required parameter 'walletHashId' is not null or undefined
            assertParamExists('fetchConversion', 'walletHashId', walletHashId)
            // verify required parameter 'conversionId' is not null or undefined
            assertParamExists('fetchConversion', 'conversionId', conversionId)
            const localVarPath = `/api/v1/client/{clientHashId}/customer/{customerHashId}/wallet/{walletHashId}/conversions/{conversionId}`
                .replace(`{${"clientHashId"}}`, encodeURIComponent(String(clientHashId)))
                .replace(`{${"customerHashId"}}`, encodeURIComponent(String(customerHashId)))
                .replace(`{${"walletHashId"}}`, encodeURIComponent(String(walletHashId)))
                .replace(`{${"conversionId"}}`, encodeURIComponent(String(conversionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication default required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (xRequestId != null) {
                localVarHeaderParameter['x-request-id'] = String(xRequestId);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ConversionsApi - functional programming interface
 * @export
 */
export const ConversionsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ConversionsApiAxiosParamCreator(configuration)
    return {
        /**
         * This API allows you to cancel a conversion prior to the execution time.
         * @summary Cancel Conversion
         * @param {string} clientHashId Unique identifier of the client.
         * @param {string} customerHashId Unique identifier of the customer.
         * @param {string} walletHashId Unique identifier of the wallet.
         * @param {string} conversionId 
         * @param {ConversionCancelRequest} conversionCancelRequest ConversionCancelRequest
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cancelConversion(clientHashId: string, customerHashId: string, walletHashId: string, conversionId: string, conversionCancelRequest: ConversionCancelRequest, xRequestId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConversionCancelResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cancelConversion(clientHashId, customerHashId, walletHashId, conversionId, conversionCancelRequest, xRequestId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ConversionsApi.cancelConversion']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * This API allows you to convert the balance from one currency to another within the same customer wallet either at the current market rate or using a previous exchange rate quote. This API allows you to select a settlement schedule for the conversion.
         * @summary Create Conversion
         * @param {string} clientHashId Unique identifier of the client.
         * @param {string} customerHashId Unique identifier of the customer.
         * @param {string} walletHashId Unique identifier of the wallet.
         * @param {ConversionCreationRequest} conversionCreationRequest ConversionCreationRequest
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createConversion(clientHashId: string, customerHashId: string, walletHashId: string, conversionCreationRequest: ConversionCreationRequest, xRequestId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConversionCreationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createConversion(clientHashId, customerHashId, walletHashId, conversionCreationRequest, xRequestId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ConversionsApi.createConversion']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * This endpoint triggers the manual execution of a scheduled conversion within the customer wallet. The response includes only the conversion\'s ID and its current status.
         * @summary Execute Conversion
         * @param {string} clientHashId Unique identifier of the client.
         * @param {string} customerHashId Unique identifier of the customer.
         * @param {string} walletHashId Unique identifier of the wallet.
         * @param {string} conversionId 
         * @param {string} [xRequestId] Enter a unique UUID value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async executeConversion(clientHashId: string, customerHashId: string, walletHashId: string, conversionId: string, xRequestId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConversionExecutionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.executeConversion(clientHashId, customerHashId, walletHashId, conversionId, xRequestId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ConversionsApi.executeConversion']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * This API will retrieve an existing conversion with the conversionId.
         * @summary Fetch Conversion by id
         * @param {string} clientHashId Unique identifier of the client.
         * @param {string} customerHashId Unique identifier of the customer.
         * @param {string} walletHashId Unique identifier of the wallet.
         * @param {string} conversionId 
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchConversion(clientHashId: string, customerHashId: string, walletHashId: string, conversionId: string, xRequestId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConversionCreationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchConversion(clientHashId, customerHashId, walletHashId, conversionId, xRequestId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ConversionsApi.fetchConversion']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ConversionsApi - factory interface
 * @export
 */
export const ConversionsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ConversionsApiFp(configuration)
    return {
        /**
         * This API allows you to cancel a conversion prior to the execution time.
         * @summary Cancel Conversion
         * @param {ConversionsApiCancelConversionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelConversion(requestParameters: ConversionsApiCancelConversionRequest, options?: RawAxiosRequestConfig): AxiosPromise<ConversionCancelResponse> {
            return localVarFp.cancelConversion(requestParameters.clientHashId, requestParameters.customerHashId, requestParameters.walletHashId, requestParameters.conversionId, requestParameters.conversionCancelRequest, requestParameters.xRequestId, options).then((request) => request(axios, basePath));
        },
        /**
         * This API allows you to convert the balance from one currency to another within the same customer wallet either at the current market rate or using a previous exchange rate quote. This API allows you to select a settlement schedule for the conversion.
         * @summary Create Conversion
         * @param {ConversionsApiCreateConversionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createConversion(requestParameters: ConversionsApiCreateConversionRequest, options?: RawAxiosRequestConfig): AxiosPromise<ConversionCreationResponse> {
            return localVarFp.createConversion(requestParameters.clientHashId, requestParameters.customerHashId, requestParameters.walletHashId, requestParameters.conversionCreationRequest, requestParameters.xRequestId, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint triggers the manual execution of a scheduled conversion within the customer wallet. The response includes only the conversion\'s ID and its current status.
         * @summary Execute Conversion
         * @param {ConversionsApiExecuteConversionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        executeConversion(requestParameters: ConversionsApiExecuteConversionRequest, options?: RawAxiosRequestConfig): AxiosPromise<ConversionExecutionResponse> {
            return localVarFp.executeConversion(requestParameters.clientHashId, requestParameters.customerHashId, requestParameters.walletHashId, requestParameters.conversionId, requestParameters.xRequestId, options).then((request) => request(axios, basePath));
        },
        /**
         * This API will retrieve an existing conversion with the conversionId.
         * @summary Fetch Conversion by id
         * @param {ConversionsApiFetchConversionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchConversion(requestParameters: ConversionsApiFetchConversionRequest, options?: RawAxiosRequestConfig): AxiosPromise<ConversionCreationResponse> {
            return localVarFp.fetchConversion(requestParameters.clientHashId, requestParameters.customerHashId, requestParameters.walletHashId, requestParameters.conversionId, requestParameters.xRequestId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for cancelConversion operation in ConversionsApi.
 * @export
 * @interface ConversionsApiCancelConversionRequest
 */
export interface ConversionsApiCancelConversionRequest {
    /**
     * Unique identifier of the client.
     * @type {string}
     * @memberof ConversionsApiCancelConversion
     */
    readonly clientHashId: string

    /**
     * Unique identifier of the customer.
     * @type {string}
     * @memberof ConversionsApiCancelConversion
     */
    readonly customerHashId: string

    /**
     * Unique identifier of the wallet.
     * @type {string}
     * @memberof ConversionsApiCancelConversion
     */
    readonly walletHashId: string

    /**
     * 
     * @type {string}
     * @memberof ConversionsApiCancelConversion
     */
    readonly conversionId: string

    /**
     * ConversionCancelRequest
     * @type {ConversionCancelRequest}
     * @memberof ConversionsApiCancelConversion
     */
    readonly conversionCancelRequest: ConversionCancelRequest

    /**
     * Enter a unique UUID value
     * @type {string}
     * @memberof ConversionsApiCancelConversion
     */
    readonly xRequestId?: string
}

/**
 * Request parameters for createConversion operation in ConversionsApi.
 * @export
 * @interface ConversionsApiCreateConversionRequest
 */
export interface ConversionsApiCreateConversionRequest {
    /**
     * Unique identifier of the client.
     * @type {string}
     * @memberof ConversionsApiCreateConversion
     */
    readonly clientHashId: string

    /**
     * Unique identifier of the customer.
     * @type {string}
     * @memberof ConversionsApiCreateConversion
     */
    readonly customerHashId: string

    /**
     * Unique identifier of the wallet.
     * @type {string}
     * @memberof ConversionsApiCreateConversion
     */
    readonly walletHashId: string

    /**
     * ConversionCreationRequest
     * @type {ConversionCreationRequest}
     * @memberof ConversionsApiCreateConversion
     */
    readonly conversionCreationRequest: ConversionCreationRequest

    /**
     * Enter a unique UUID value
     * @type {string}
     * @memberof ConversionsApiCreateConversion
     */
    readonly xRequestId?: string
}

/**
 * Request parameters for executeConversion operation in ConversionsApi.
 * @export
 * @interface ConversionsApiExecuteConversionRequest
 */
export interface ConversionsApiExecuteConversionRequest {
    /**
     * Unique identifier of the client.
     * @type {string}
     * @memberof ConversionsApiExecuteConversion
     */
    readonly clientHashId: string

    /**
     * Unique identifier of the customer.
     * @type {string}
     * @memberof ConversionsApiExecuteConversion
     */
    readonly customerHashId: string

    /**
     * Unique identifier of the wallet.
     * @type {string}
     * @memberof ConversionsApiExecuteConversion
     */
    readonly walletHashId: string

    /**
     * 
     * @type {string}
     * @memberof ConversionsApiExecuteConversion
     */
    readonly conversionId: string

    /**
     * Enter a unique UUID value.
     * @type {string}
     * @memberof ConversionsApiExecuteConversion
     */
    readonly xRequestId?: string
}

/**
 * Request parameters for fetchConversion operation in ConversionsApi.
 * @export
 * @interface ConversionsApiFetchConversionRequest
 */
export interface ConversionsApiFetchConversionRequest {
    /**
     * Unique identifier of the client.
     * @type {string}
     * @memberof ConversionsApiFetchConversion
     */
    readonly clientHashId: string

    /**
     * Unique identifier of the customer.
     * @type {string}
     * @memberof ConversionsApiFetchConversion
     */
    readonly customerHashId: string

    /**
     * Unique identifier of the wallet.
     * @type {string}
     * @memberof ConversionsApiFetchConversion
     */
    readonly walletHashId: string

    /**
     * 
     * @type {string}
     * @memberof ConversionsApiFetchConversion
     */
    readonly conversionId: string

    /**
     * Enter a unique UUID value
     * @type {string}
     * @memberof ConversionsApiFetchConversion
     */
    readonly xRequestId?: string
}

/**
 * ConversionsApi - object-oriented interface
 * @export
 * @class ConversionsApi
 * @extends {BaseAPI}
 */
export class ConversionsApi extends BaseAPI {
    /**
     * This API allows you to cancel a conversion prior to the execution time.
     * @summary Cancel Conversion
     * @param {ConversionsApiCancelConversionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversionsApi
     */
    public cancelConversion(requestParameters: ConversionsApiCancelConversionRequest, options?: RawAxiosRequestConfig) {
        return ConversionsApiFp(this.configuration).cancelConversion(requestParameters.clientHashId, requestParameters.customerHashId, requestParameters.walletHashId, requestParameters.conversionId, requestParameters.conversionCancelRequest, requestParameters.xRequestId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This API allows you to convert the balance from one currency to another within the same customer wallet either at the current market rate or using a previous exchange rate quote. This API allows you to select a settlement schedule for the conversion.
     * @summary Create Conversion
     * @param {ConversionsApiCreateConversionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversionsApi
     */
    public createConversion(requestParameters: ConversionsApiCreateConversionRequest, options?: RawAxiosRequestConfig) {
        return ConversionsApiFp(this.configuration).createConversion(requestParameters.clientHashId, requestParameters.customerHashId, requestParameters.walletHashId, requestParameters.conversionCreationRequest, requestParameters.xRequestId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint triggers the manual execution of a scheduled conversion within the customer wallet. The response includes only the conversion\'s ID and its current status.
     * @summary Execute Conversion
     * @param {ConversionsApiExecuteConversionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversionsApi
     */
    public executeConversion(requestParameters: ConversionsApiExecuteConversionRequest, options?: RawAxiosRequestConfig) {
        return ConversionsApiFp(this.configuration).executeConversion(requestParameters.clientHashId, requestParameters.customerHashId, requestParameters.walletHashId, requestParameters.conversionId, requestParameters.xRequestId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This API will retrieve an existing conversion with the conversionId.
     * @summary Fetch Conversion by id
     * @param {ConversionsApiFetchConversionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversionsApi
     */
    public fetchConversion(requestParameters: ConversionsApiFetchConversionRequest, options?: RawAxiosRequestConfig) {
        return ConversionsApiFp(this.configuration).fetchConversion(requestParameters.clientHashId, requestParameters.customerHashId, requestParameters.walletHashId, requestParameters.conversionId, requestParameters.xRequestId, options).then((request) => request(this.axios, this.basePath));
    }
}

