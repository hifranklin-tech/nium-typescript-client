/* tslint:disable */
/* eslint-disable */
/**
 * NIUM Platform
 * NIUM Platform
 *
 * The version of the OpenAPI document: 2023.12.12
 * Contact: experience@nium.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import { CustomFeeRequestDTO } from '../model';
// @ts-ignore
import { CustomFeeResponseDTO } from '../model';
// @ts-ignore
import { WalletApiError } from '../model';
/**
 * CustomerFeesApi - axios parameter creator
 * @export
 */
export const CustomerFeesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This API allows you to levy custom fee.   >⚠️ WARNING   >Consult with the Nium legal & compliance team and receive approval prior to charging any customer fees. Do not use this API to charge fees without explicit approval from Nium. Reach out to your Customer Success, Sales and Solution Engineering teams at Nium for further guidance. Any fees charged must be disclosed in the required customer terms and conditions as determined by Nium legal & compliance.
         * @summary Charge Fee
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} customerHashId Unique customer identifier generated on customer creation.
         * @param {string} walletHashId Unique wallet identifier generated simultaneously with customer creation.
         * @param {CustomFeeRequestDTO} customFeeRequestDTO customFeeRequestDTO
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        chargeFee: async (clientHashId: string, customerHashId: string, walletHashId: string, customFeeRequestDTO: CustomFeeRequestDTO, xRequestId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'clientHashId' is not null or undefined
            assertParamExists('chargeFee', 'clientHashId', clientHashId)
            // verify required parameter 'customerHashId' is not null or undefined
            assertParamExists('chargeFee', 'customerHashId', customerHashId)
            // verify required parameter 'walletHashId' is not null or undefined
            assertParamExists('chargeFee', 'walletHashId', walletHashId)
            // verify required parameter 'customFeeRequestDTO' is not null or undefined
            assertParamExists('chargeFee', 'customFeeRequestDTO', customFeeRequestDTO)
            const localVarPath = `/api/v1/client/{clientHashId}/customer/{customerHashId}/wallet/{walletHashId}/fees`
                .replace(`{${"clientHashId"}}`, encodeURIComponent(String(clientHashId)))
                .replace(`{${"customerHashId"}}`, encodeURIComponent(String(customerHashId)))
                .replace(`{${"walletHashId"}}`, encodeURIComponent(String(walletHashId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication default required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (xRequestId != null) {
                localVarHeaderParameter['x-request-id'] = String(xRequestId);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(customFeeRequestDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CustomerFeesApi - functional programming interface
 * @export
 */
export const CustomerFeesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CustomerFeesApiAxiosParamCreator(configuration)
    return {
        /**
         * This API allows you to levy custom fee.   >⚠️ WARNING   >Consult with the Nium legal & compliance team and receive approval prior to charging any customer fees. Do not use this API to charge fees without explicit approval from Nium. Reach out to your Customer Success, Sales and Solution Engineering teams at Nium for further guidance. Any fees charged must be disclosed in the required customer terms and conditions as determined by Nium legal & compliance.
         * @summary Charge Fee
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} customerHashId Unique customer identifier generated on customer creation.
         * @param {string} walletHashId Unique wallet identifier generated simultaneously with customer creation.
         * @param {CustomFeeRequestDTO} customFeeRequestDTO customFeeRequestDTO
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async chargeFee(clientHashId: string, customerHashId: string, walletHashId: string, customFeeRequestDTO: CustomFeeRequestDTO, xRequestId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomFeeResponseDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.chargeFee(clientHashId, customerHashId, walletHashId, customFeeRequestDTO, xRequestId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CustomerFeesApi.chargeFee']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CustomerFeesApi - factory interface
 * @export
 */
export const CustomerFeesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CustomerFeesApiFp(configuration)
    return {
        /**
         * This API allows you to levy custom fee.   >⚠️ WARNING   >Consult with the Nium legal & compliance team and receive approval prior to charging any customer fees. Do not use this API to charge fees without explicit approval from Nium. Reach out to your Customer Success, Sales and Solution Engineering teams at Nium for further guidance. Any fees charged must be disclosed in the required customer terms and conditions as determined by Nium legal & compliance.
         * @summary Charge Fee
         * @param {CustomerFeesApiChargeFeeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        chargeFee(requestParameters: CustomerFeesApiChargeFeeRequest, options?: RawAxiosRequestConfig): AxiosPromise<CustomFeeResponseDTO> {
            return localVarFp.chargeFee(requestParameters.clientHashId, requestParameters.customerHashId, requestParameters.walletHashId, requestParameters.customFeeRequestDTO, requestParameters.xRequestId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for chargeFee operation in CustomerFeesApi.
 * @export
 * @interface CustomerFeesApiChargeFeeRequest
 */
export interface CustomerFeesApiChargeFeeRequest {
    /**
     * Unique client identifier generated and shared before API handshake.
     * @type {string}
     * @memberof CustomerFeesApiChargeFee
     */
    readonly clientHashId: string

    /**
     * Unique customer identifier generated on customer creation.
     * @type {string}
     * @memberof CustomerFeesApiChargeFee
     */
    readonly customerHashId: string

    /**
     * Unique wallet identifier generated simultaneously with customer creation.
     * @type {string}
     * @memberof CustomerFeesApiChargeFee
     */
    readonly walletHashId: string

    /**
     * customFeeRequestDTO
     * @type {CustomFeeRequestDTO}
     * @memberof CustomerFeesApiChargeFee
     */
    readonly customFeeRequestDTO: CustomFeeRequestDTO

    /**
     * Enter a unique UUID value
     * @type {string}
     * @memberof CustomerFeesApiChargeFee
     */
    readonly xRequestId?: string
}

/**
 * CustomerFeesApi - object-oriented interface
 * @export
 * @class CustomerFeesApi
 * @extends {BaseAPI}
 */
export class CustomerFeesApi extends BaseAPI {
    /**
     * This API allows you to levy custom fee.   >⚠️ WARNING   >Consult with the Nium legal & compliance team and receive approval prior to charging any customer fees. Do not use this API to charge fees without explicit approval from Nium. Reach out to your Customer Success, Sales and Solution Engineering teams at Nium for further guidance. Any fees charged must be disclosed in the required customer terms and conditions as determined by Nium legal & compliance.
     * @summary Charge Fee
     * @param {CustomerFeesApiChargeFeeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerFeesApi
     */
    public chargeFee(requestParameters: CustomerFeesApiChargeFeeRequest, options?: RawAxiosRequestConfig) {
        return CustomerFeesApiFp(this.configuration).chargeFee(requestParameters.clientHashId, requestParameters.customerHashId, requestParameters.walletHashId, requestParameters.customFeeRequestDTO, requestParameters.xRequestId, options).then((request) => request(this.axios, this.basePath));
    }
}

