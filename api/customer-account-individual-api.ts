/* tslint:disable */
/* eslint-disable */
/**
 * NIUM Platform
 * NIUM Platform
 *
 * The version of the OpenAPI document: 2024.8.20
 * Contact: experience@nium.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { AddCustomerResponseDTO } from '../model';
// @ts-ignore
import type { ComplianceDocumentDTO } from '../model';
// @ts-ignore
import type { ComplianceDocumentResponseDTO } from '../model';
// @ts-ignore
import type { CustomerApiError } from '../model';
// @ts-ignore
import type { CustomerDataExternalRequestDTO } from '../model';
// @ts-ignore
import type { CustomerDataExternalResponseDTO } from '../model';
// @ts-ignore
import type { CustomerDataRequestDTO } from '../model';
// @ts-ignore
import type { CustomerDetailResponseDTO } from '../model';
// @ts-ignore
import type { CustomerRfiDetailsResponse } from '../model';
// @ts-ignore
import type { EVerifyCustomerRegistrationRequestDTO } from '../model';
// @ts-ignore
import type { UnifiedAddCustomerRequest } from '../model';
// @ts-ignore
import type { UpdateCustomerDTO } from '../model';
// @ts-ignore
import type { UpdateCustomerResponseDTO } from '../model';
// @ts-ignore
import type { UploadRfiDetailsResponseDto } from '../model';
// @ts-ignore
import type { UploadRfiDocumentRequestDto } from '../model';
/**
 * CustomerAccountIndividualApi - axios parameter creator
 * @export
 */
export const CustomerAccountIndividualApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This API allows you to register a customer with a wallet in NIUM\'s cards platform.  >⚠️ WARNING   >This API version is deprecated. Eventually, a deprecated API version becomes unsupported. [Unified Add Customer](ref:unifiedaddcustomer) is the latest version of this API.
         * @summary Add Customer
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {CustomerDataRequestDTO} customerDataRequestDTO customerDataRequestDTO
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addCustomer: async (clientHashId: string, customerDataRequestDTO: CustomerDataRequestDTO, xRequestId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'clientHashId' is not null or undefined
            assertParamExists('addCustomer', 'clientHashId', clientHashId)
            // verify required parameter 'customerDataRequestDTO' is not null or undefined
            assertParamExists('addCustomer', 'customerDataRequestDTO', customerDataRequestDTO)
            const localVarPath = `/api/v1/client/{clientHashId}/customer`
                .replace(`{${"clientHashId"}}`, encodeURIComponent(String(clientHashId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication default required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (xRequestId != null) {
                localVarHeaderParameter['x-request-id'] = String(xRequestId);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(customerDataRequestDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This API will create customers using minimal data, the rest of the partial data will be pulled via MyInfo etc. which is locked and cannot be edited and further rest fields can be updated using Customer Update API.  >⚠️ WARNING   >This API version is deprecated. Eventually, a deprecated API version becomes unsupported. [Unified Add Customer](ref:unifiedaddcustomer) is the latest version of this API.
         * @summary Add Customer Using MyInfo [SG]
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {CustomerDataExternalRequestDTO} customerDataExternalRequestDTO customerDataExternalRequestDTO
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addCustomerUsingMyInfoSG: async (clientHashId: string, customerDataExternalRequestDTO: CustomerDataExternalRequestDTO, xRequestId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'clientHashId' is not null or undefined
            assertParamExists('addCustomerUsingMyInfoSG', 'clientHashId', clientHashId)
            // verify required parameter 'customerDataExternalRequestDTO' is not null or undefined
            assertParamExists('addCustomerUsingMyInfoSG', 'customerDataExternalRequestDTO', customerDataExternalRequestDTO)
            const localVarPath = `/api/v1/client/{clientHashId}/customer-min-data`
                .replace(`{${"clientHashId"}}`, encodeURIComponent(String(clientHashId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication default required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (xRequestId != null) {
                localVarHeaderParameter['x-request-id'] = String(xRequestId);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(customerDataExternalRequestDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *   >⚠️ WARNING   >This API version is deprecated. Eventually, a deprecated API version becomes unsupported. [Unified Add Customer](ref:unifiedaddcustomer) is the latest version of this API.
         * @summary Add Customer Using e-Document Verification
         * @param {string} clientHashId clientHashId
         * @param {EVerifyCustomerRegistrationRequestDTO} eVerifyCustomerRegistrationRequestDTO requestDTO
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addCustomerUsingeDocumentVerification: async (clientHashId: string, eVerifyCustomerRegistrationRequestDTO: EVerifyCustomerRegistrationRequestDTO, xRequestId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'clientHashId' is not null or undefined
            assertParamExists('addCustomerUsingeDocumentVerification', 'clientHashId', clientHashId)
            // verify required parameter 'eVerifyCustomerRegistrationRequestDTO' is not null or undefined
            assertParamExists('addCustomerUsingeDocumentVerification', 'eVerifyCustomerRegistrationRequestDTO', eVerifyCustomerRegistrationRequestDTO)
            const localVarPath = `/api/v3/client/{clientHashId}/customer`
                .replace(`{${"clientHashId"}}`, encodeURIComponent(String(clientHashId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication default required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (xRequestId != null) {
                localVarHeaderParameter['x-request-id'] = String(xRequestId);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(eVerifyCustomerRegistrationRequestDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This API allows you to update the customer details subject to the following constraints: 1. If compliance status equals to COMPLETED. You can only update email, mobile, delivery address details, and correspondence address details. You may NOT update the billing address. 2. In other cases, you may update any of the fields. At least one key-value pair is needed in the request body of this API.
         * @summary Customer Update
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} customerHashId Unique customer identifier generated on customer creation.
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {UpdateCustomerDTO} [updateCustomerDTO] Customer update request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerUpdate: async (clientHashId: string, customerHashId: string, xRequestId?: string, updateCustomerDTO?: UpdateCustomerDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'clientHashId' is not null or undefined
            assertParamExists('customerUpdate', 'clientHashId', clientHashId)
            // verify required parameter 'customerHashId' is not null or undefined
            assertParamExists('customerUpdate', 'customerHashId', customerHashId)
            const localVarPath = `/api/v1/client/{clientHashId}/customer/{customerHashId}/updateCustomer`
                .replace(`{${"clientHashId"}}`, encodeURIComponent(String(clientHashId)))
                .replace(`{${"customerHashId"}}`, encodeURIComponent(String(customerHashId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication default required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (xRequestId != null) {
                localVarHeaderParameter['x-request-id'] = String(xRequestId);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateCustomerDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This API allows you to fetch details of RFI raised as part of Individual customer onboarding.
         * @summary Fetch Individual Customer RFI Details
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} customerHashId Unique customer identifier generated on customer creation.
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchIndividualCustomerRFIDetails: async (clientHashId: string, customerHashId: string, xRequestId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'clientHashId' is not null or undefined
            assertParamExists('fetchIndividualCustomerRFIDetails', 'clientHashId', clientHashId)
            // verify required parameter 'customerHashId' is not null or undefined
            assertParamExists('fetchIndividualCustomerRFIDetails', 'customerHashId', customerHashId)
            const localVarPath = `/api/v1/client/{clientHashId}/customer/{customerHashId}/rfi`
                .replace(`{${"clientHashId"}}`, encodeURIComponent(String(clientHashId)))
                .replace(`{${"customerHashId"}}`, encodeURIComponent(String(customerHashId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication default required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (xRequestId != null) {
                localVarHeaderParameter['x-request-id'] = String(xRequestId);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This API allows you to respond to an RFI raised by NIUM compliance team. You may use this API to respond to an RFI for data or documents when the customer\'s compliance status is RFI_REQUESTED.
         * @summary Respond to RFI
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} customerHashId Unique customer identifier generated on customer creation.
         * @param {UploadRfiDocumentRequestDto} uploadRfiDocumentRequestDto RFI response object
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        respondtoRFI: async (clientHashId: string, customerHashId: string, uploadRfiDocumentRequestDto: UploadRfiDocumentRequestDto, xRequestId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'clientHashId' is not null or undefined
            assertParamExists('respondtoRFI', 'clientHashId', clientHashId)
            // verify required parameter 'customerHashId' is not null or undefined
            assertParamExists('respondtoRFI', 'customerHashId', customerHashId)
            // verify required parameter 'uploadRfiDocumentRequestDto' is not null or undefined
            assertParamExists('respondtoRFI', 'uploadRfiDocumentRequestDto', uploadRfiDocumentRequestDto)
            const localVarPath = `/api/v1/client/{clientHashId}/customer/{customerHashId}/rfi`
                .replace(`{${"clientHashId"}}`, encodeURIComponent(String(clientHashId)))
                .replace(`{${"customerHashId"}}`, encodeURIComponent(String(customerHashId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication default required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (xRequestId != null) {
                localVarHeaderParameter['x-request-id'] = String(xRequestId);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(uploadRfiDocumentRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This API onboards customers based on their client configuration and preference.   >ℹ️ INFO   The \'childMustHaveParent\' setting can be optionally set to \'true\' for Payroll and Spend and Management clients, and it should be set to \'false\' for all other clients.   For details, see [Parent-child hierarchy](doc:parent-child-hierarchy).
         * @summary Unified Add Customer
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {UnifiedAddCustomerRequest} requestDto Add individual customer
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unifiedAddCustomer: async (clientHashId: string, requestDto: UnifiedAddCustomerRequest, xRequestId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'clientHashId' is not null or undefined
            assertParamExists('unifiedAddCustomer', 'clientHashId', clientHashId)
            // verify required parameter 'requestDto' is not null or undefined
            assertParamExists('unifiedAddCustomer', 'requestDto', requestDto)
            const localVarPath = `/api/v4/client/{clientHashId}/customer`
                .replace(`{${"clientHashId"}}`, encodeURIComponent(String(clientHashId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication default required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (xRequestId != null) {
                localVarHeaderParameter['x-request-id'] = String(xRequestId);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This API allows to upload documents necessary for customer onboarding. Refer to the RFI details on required documents.
         * @summary Upload Document
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} customerHashId Unique customer identifier generated on customer creation.
         * @param {ComplianceDocumentDTO} complianceDocumentDTO Compliance documents
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadDocument: async (clientHashId: string, customerHashId: string, complianceDocumentDTO: ComplianceDocumentDTO, xRequestId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'clientHashId' is not null or undefined
            assertParamExists('uploadDocument', 'clientHashId', clientHashId)
            // verify required parameter 'customerHashId' is not null or undefined
            assertParamExists('uploadDocument', 'customerHashId', customerHashId)
            // verify required parameter 'complianceDocumentDTO' is not null or undefined
            assertParamExists('uploadDocument', 'complianceDocumentDTO', complianceDocumentDTO)
            const localVarPath = `/api/v1/client/{clientHashId}/customer/{customerHashId}/uploadDocuments`
                .replace(`{${"clientHashId"}}`, encodeURIComponent(String(clientHashId)))
                .replace(`{${"customerHashId"}}`, encodeURIComponent(String(customerHashId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication default required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (xRequestId != null) {
                localVarHeaderParameter['x-request-id'] = String(xRequestId);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(complianceDocumentDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CustomerAccountIndividualApi - functional programming interface
 * @export
 */
export const CustomerAccountIndividualApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CustomerAccountIndividualApiAxiosParamCreator(configuration)
    return {
        /**
         * This API allows you to register a customer with a wallet in NIUM\'s cards platform.  >⚠️ WARNING   >This API version is deprecated. Eventually, a deprecated API version becomes unsupported. [Unified Add Customer](ref:unifiedaddcustomer) is the latest version of this API.
         * @summary Add Customer
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {CustomerDataRequestDTO} customerDataRequestDTO customerDataRequestDTO
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addCustomer(clientHashId: string, customerDataRequestDTO: CustomerDataRequestDTO, xRequestId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerDetailResponseDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addCustomer(clientHashId, customerDataRequestDTO, xRequestId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CustomerAccountIndividualApi.addCustomer']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * This API will create customers using minimal data, the rest of the partial data will be pulled via MyInfo etc. which is locked and cannot be edited and further rest fields can be updated using Customer Update API.  >⚠️ WARNING   >This API version is deprecated. Eventually, a deprecated API version becomes unsupported. [Unified Add Customer](ref:unifiedaddcustomer) is the latest version of this API.
         * @summary Add Customer Using MyInfo [SG]
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {CustomerDataExternalRequestDTO} customerDataExternalRequestDTO customerDataExternalRequestDTO
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addCustomerUsingMyInfoSG(clientHashId: string, customerDataExternalRequestDTO: CustomerDataExternalRequestDTO, xRequestId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerDataExternalResponseDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addCustomerUsingMyInfoSG(clientHashId, customerDataExternalRequestDTO, xRequestId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CustomerAccountIndividualApi.addCustomerUsingMyInfoSG']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *   >⚠️ WARNING   >This API version is deprecated. Eventually, a deprecated API version becomes unsupported. [Unified Add Customer](ref:unifiedaddcustomer) is the latest version of this API.
         * @summary Add Customer Using e-Document Verification
         * @param {string} clientHashId clientHashId
         * @param {EVerifyCustomerRegistrationRequestDTO} eVerifyCustomerRegistrationRequestDTO requestDTO
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addCustomerUsingeDocumentVerification(clientHashId: string, eVerifyCustomerRegistrationRequestDTO: EVerifyCustomerRegistrationRequestDTO, xRequestId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AddCustomerResponseDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addCustomerUsingeDocumentVerification(clientHashId, eVerifyCustomerRegistrationRequestDTO, xRequestId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CustomerAccountIndividualApi.addCustomerUsingeDocumentVerification']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * This API allows you to update the customer details subject to the following constraints: 1. If compliance status equals to COMPLETED. You can only update email, mobile, delivery address details, and correspondence address details. You may NOT update the billing address. 2. In other cases, you may update any of the fields. At least one key-value pair is needed in the request body of this API.
         * @summary Customer Update
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} customerHashId Unique customer identifier generated on customer creation.
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {UpdateCustomerDTO} [updateCustomerDTO] Customer update request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerUpdate(clientHashId: string, customerHashId: string, xRequestId?: string, updateCustomerDTO?: UpdateCustomerDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateCustomerResponseDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerUpdate(clientHashId, customerHashId, xRequestId, updateCustomerDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CustomerAccountIndividualApi.customerUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * This API allows you to fetch details of RFI raised as part of Individual customer onboarding.
         * @summary Fetch Individual Customer RFI Details
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} customerHashId Unique customer identifier generated on customer creation.
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchIndividualCustomerRFIDetails(clientHashId: string, customerHashId: string, xRequestId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CustomerRfiDetailsResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchIndividualCustomerRFIDetails(clientHashId, customerHashId, xRequestId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CustomerAccountIndividualApi.fetchIndividualCustomerRFIDetails']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * This API allows you to respond to an RFI raised by NIUM compliance team. You may use this API to respond to an RFI for data or documents when the customer\'s compliance status is RFI_REQUESTED.
         * @summary Respond to RFI
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} customerHashId Unique customer identifier generated on customer creation.
         * @param {UploadRfiDocumentRequestDto} uploadRfiDocumentRequestDto RFI response object
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async respondtoRFI(clientHashId: string, customerHashId: string, uploadRfiDocumentRequestDto: UploadRfiDocumentRequestDto, xRequestId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UploadRfiDetailsResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.respondtoRFI(clientHashId, customerHashId, uploadRfiDocumentRequestDto, xRequestId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CustomerAccountIndividualApi.respondtoRFI']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * This API onboards customers based on their client configuration and preference.   >ℹ️ INFO   The \'childMustHaveParent\' setting can be optionally set to \'true\' for Payroll and Spend and Management clients, and it should be set to \'false\' for all other clients.   For details, see [Parent-child hierarchy](doc:parent-child-hierarchy).
         * @summary Unified Add Customer
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {UnifiedAddCustomerRequest} requestDto Add individual customer
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async unifiedAddCustomer(clientHashId: string, requestDto: UnifiedAddCustomerRequest, xRequestId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AddCustomerResponseDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.unifiedAddCustomer(clientHashId, requestDto, xRequestId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CustomerAccountIndividualApi.unifiedAddCustomer']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * This API allows to upload documents necessary for customer onboarding. Refer to the RFI details on required documents.
         * @summary Upload Document
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} customerHashId Unique customer identifier generated on customer creation.
         * @param {ComplianceDocumentDTO} complianceDocumentDTO Compliance documents
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uploadDocument(clientHashId: string, customerHashId: string, complianceDocumentDTO: ComplianceDocumentDTO, xRequestId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ComplianceDocumentResponseDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.uploadDocument(clientHashId, customerHashId, complianceDocumentDTO, xRequestId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CustomerAccountIndividualApi.uploadDocument']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CustomerAccountIndividualApi - factory interface
 * @export
 */
export const CustomerAccountIndividualApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CustomerAccountIndividualApiFp(configuration)
    return {
        /**
         * This API allows you to register a customer with a wallet in NIUM\'s cards platform.  >⚠️ WARNING   >This API version is deprecated. Eventually, a deprecated API version becomes unsupported. [Unified Add Customer](ref:unifiedaddcustomer) is the latest version of this API.
         * @summary Add Customer
         * @param {CustomerAccountIndividualApiAddCustomerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addCustomer(requestParameters: CustomerAccountIndividualApiAddCustomerRequest, options?: RawAxiosRequestConfig): AxiosPromise<CustomerDetailResponseDTO> {
            return localVarFp.addCustomer(requestParameters.clientHashId, requestParameters.customerDataRequestDTO, requestParameters.xRequestId, options).then((request) => request(axios, basePath));
        },
        /**
         * This API will create customers using minimal data, the rest of the partial data will be pulled via MyInfo etc. which is locked and cannot be edited and further rest fields can be updated using Customer Update API.  >⚠️ WARNING   >This API version is deprecated. Eventually, a deprecated API version becomes unsupported. [Unified Add Customer](ref:unifiedaddcustomer) is the latest version of this API.
         * @summary Add Customer Using MyInfo [SG]
         * @param {CustomerAccountIndividualApiAddCustomerUsingMyInfoSGRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addCustomerUsingMyInfoSG(requestParameters: CustomerAccountIndividualApiAddCustomerUsingMyInfoSGRequest, options?: RawAxiosRequestConfig): AxiosPromise<CustomerDataExternalResponseDTO> {
            return localVarFp.addCustomerUsingMyInfoSG(requestParameters.clientHashId, requestParameters.customerDataExternalRequestDTO, requestParameters.xRequestId, options).then((request) => request(axios, basePath));
        },
        /**
         *   >⚠️ WARNING   >This API version is deprecated. Eventually, a deprecated API version becomes unsupported. [Unified Add Customer](ref:unifiedaddcustomer) is the latest version of this API.
         * @summary Add Customer Using e-Document Verification
         * @param {CustomerAccountIndividualApiAddCustomerUsingeDocumentVerificationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addCustomerUsingeDocumentVerification(requestParameters: CustomerAccountIndividualApiAddCustomerUsingeDocumentVerificationRequest, options?: RawAxiosRequestConfig): AxiosPromise<AddCustomerResponseDTO> {
            return localVarFp.addCustomerUsingeDocumentVerification(requestParameters.clientHashId, requestParameters.eVerifyCustomerRegistrationRequestDTO, requestParameters.xRequestId, options).then((request) => request(axios, basePath));
        },
        /**
         * This API allows you to update the customer details subject to the following constraints: 1. If compliance status equals to COMPLETED. You can only update email, mobile, delivery address details, and correspondence address details. You may NOT update the billing address. 2. In other cases, you may update any of the fields. At least one key-value pair is needed in the request body of this API.
         * @summary Customer Update
         * @param {CustomerAccountIndividualApiCustomerUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerUpdate(requestParameters: CustomerAccountIndividualApiCustomerUpdateRequest, options?: RawAxiosRequestConfig): AxiosPromise<UpdateCustomerResponseDTO> {
            return localVarFp.customerUpdate(requestParameters.clientHashId, requestParameters.customerHashId, requestParameters.xRequestId, requestParameters.updateCustomerDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * This API allows you to fetch details of RFI raised as part of Individual customer onboarding.
         * @summary Fetch Individual Customer RFI Details
         * @param {CustomerAccountIndividualApiFetchIndividualCustomerRFIDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchIndividualCustomerRFIDetails(requestParameters: CustomerAccountIndividualApiFetchIndividualCustomerRFIDetailsRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<CustomerRfiDetailsResponse>> {
            return localVarFp.fetchIndividualCustomerRFIDetails(requestParameters.clientHashId, requestParameters.customerHashId, requestParameters.xRequestId, options).then((request) => request(axios, basePath));
        },
        /**
         * This API allows you to respond to an RFI raised by NIUM compliance team. You may use this API to respond to an RFI for data or documents when the customer\'s compliance status is RFI_REQUESTED.
         * @summary Respond to RFI
         * @param {CustomerAccountIndividualApiRespondtoRFIRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        respondtoRFI(requestParameters: CustomerAccountIndividualApiRespondtoRFIRequest, options?: RawAxiosRequestConfig): AxiosPromise<UploadRfiDetailsResponseDto> {
            return localVarFp.respondtoRFI(requestParameters.clientHashId, requestParameters.customerHashId, requestParameters.uploadRfiDocumentRequestDto, requestParameters.xRequestId, options).then((request) => request(axios, basePath));
        },
        /**
         * This API onboards customers based on their client configuration and preference.   >ℹ️ INFO   The \'childMustHaveParent\' setting can be optionally set to \'true\' for Payroll and Spend and Management clients, and it should be set to \'false\' for all other clients.   For details, see [Parent-child hierarchy](doc:parent-child-hierarchy).
         * @summary Unified Add Customer
         * @param {CustomerAccountIndividualApiUnifiedAddCustomerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unifiedAddCustomer(requestParameters: CustomerAccountIndividualApiUnifiedAddCustomerRequest, options?: RawAxiosRequestConfig): AxiosPromise<AddCustomerResponseDTO> {
            return localVarFp.unifiedAddCustomer(requestParameters.clientHashId, requestParameters.requestDto, requestParameters.xRequestId, options).then((request) => request(axios, basePath));
        },
        /**
         * This API allows to upload documents necessary for customer onboarding. Refer to the RFI details on required documents.
         * @summary Upload Document
         * @param {CustomerAccountIndividualApiUploadDocumentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadDocument(requestParameters: CustomerAccountIndividualApiUploadDocumentRequest, options?: RawAxiosRequestConfig): AxiosPromise<ComplianceDocumentResponseDTO> {
            return localVarFp.uploadDocument(requestParameters.clientHashId, requestParameters.customerHashId, requestParameters.complianceDocumentDTO, requestParameters.xRequestId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addCustomer operation in CustomerAccountIndividualApi.
 * @export
 * @interface CustomerAccountIndividualApiAddCustomerRequest
 */
export interface CustomerAccountIndividualApiAddCustomerRequest {
    /**
     * Unique client identifier generated and shared before API handshake.
     * @type {string}
     * @memberof CustomerAccountIndividualApiAddCustomer
     */
    readonly clientHashId: string

    /**
     * customerDataRequestDTO
     * @type {CustomerDataRequestDTO}
     * @memberof CustomerAccountIndividualApiAddCustomer
     */
    readonly customerDataRequestDTO: CustomerDataRequestDTO

    /**
     * Enter a unique UUID value
     * @type {string}
     * @memberof CustomerAccountIndividualApiAddCustomer
     */
    readonly xRequestId?: string
}

/**
 * Request parameters for addCustomerUsingMyInfoSG operation in CustomerAccountIndividualApi.
 * @export
 * @interface CustomerAccountIndividualApiAddCustomerUsingMyInfoSGRequest
 */
export interface CustomerAccountIndividualApiAddCustomerUsingMyInfoSGRequest {
    /**
     * Unique client identifier generated and shared before API handshake.
     * @type {string}
     * @memberof CustomerAccountIndividualApiAddCustomerUsingMyInfoSG
     */
    readonly clientHashId: string

    /**
     * customerDataExternalRequestDTO
     * @type {CustomerDataExternalRequestDTO}
     * @memberof CustomerAccountIndividualApiAddCustomerUsingMyInfoSG
     */
    readonly customerDataExternalRequestDTO: CustomerDataExternalRequestDTO

    /**
     * Enter a unique UUID value
     * @type {string}
     * @memberof CustomerAccountIndividualApiAddCustomerUsingMyInfoSG
     */
    readonly xRequestId?: string
}

/**
 * Request parameters for addCustomerUsingeDocumentVerification operation in CustomerAccountIndividualApi.
 * @export
 * @interface CustomerAccountIndividualApiAddCustomerUsingeDocumentVerificationRequest
 */
export interface CustomerAccountIndividualApiAddCustomerUsingeDocumentVerificationRequest {
    /**
     * clientHashId
     * @type {string}
     * @memberof CustomerAccountIndividualApiAddCustomerUsingeDocumentVerification
     */
    readonly clientHashId: string

    /**
     * requestDTO
     * @type {EVerifyCustomerRegistrationRequestDTO}
     * @memberof CustomerAccountIndividualApiAddCustomerUsingeDocumentVerification
     */
    readonly eVerifyCustomerRegistrationRequestDTO: EVerifyCustomerRegistrationRequestDTO

    /**
     * Enter a unique UUID value
     * @type {string}
     * @memberof CustomerAccountIndividualApiAddCustomerUsingeDocumentVerification
     */
    readonly xRequestId?: string
}

/**
 * Request parameters for customerUpdate operation in CustomerAccountIndividualApi.
 * @export
 * @interface CustomerAccountIndividualApiCustomerUpdateRequest
 */
export interface CustomerAccountIndividualApiCustomerUpdateRequest {
    /**
     * Unique client identifier generated and shared before API handshake.
     * @type {string}
     * @memberof CustomerAccountIndividualApiCustomerUpdate
     */
    readonly clientHashId: string

    /**
     * Unique customer identifier generated on customer creation.
     * @type {string}
     * @memberof CustomerAccountIndividualApiCustomerUpdate
     */
    readonly customerHashId: string

    /**
     * Enter a unique UUID value
     * @type {string}
     * @memberof CustomerAccountIndividualApiCustomerUpdate
     */
    readonly xRequestId?: string

    /**
     * Customer update request
     * @type {UpdateCustomerDTO}
     * @memberof CustomerAccountIndividualApiCustomerUpdate
     */
    readonly updateCustomerDTO?: UpdateCustomerDTO
}

/**
 * Request parameters for fetchIndividualCustomerRFIDetails operation in CustomerAccountIndividualApi.
 * @export
 * @interface CustomerAccountIndividualApiFetchIndividualCustomerRFIDetailsRequest
 */
export interface CustomerAccountIndividualApiFetchIndividualCustomerRFIDetailsRequest {
    /**
     * Unique client identifier generated and shared before API handshake.
     * @type {string}
     * @memberof CustomerAccountIndividualApiFetchIndividualCustomerRFIDetails
     */
    readonly clientHashId: string

    /**
     * Unique customer identifier generated on customer creation.
     * @type {string}
     * @memberof CustomerAccountIndividualApiFetchIndividualCustomerRFIDetails
     */
    readonly customerHashId: string

    /**
     * Enter a unique UUID value
     * @type {string}
     * @memberof CustomerAccountIndividualApiFetchIndividualCustomerRFIDetails
     */
    readonly xRequestId?: string
}

/**
 * Request parameters for respondtoRFI operation in CustomerAccountIndividualApi.
 * @export
 * @interface CustomerAccountIndividualApiRespondtoRFIRequest
 */
export interface CustomerAccountIndividualApiRespondtoRFIRequest {
    /**
     * Unique client identifier generated and shared before API handshake.
     * @type {string}
     * @memberof CustomerAccountIndividualApiRespondtoRFI
     */
    readonly clientHashId: string

    /**
     * Unique customer identifier generated on customer creation.
     * @type {string}
     * @memberof CustomerAccountIndividualApiRespondtoRFI
     */
    readonly customerHashId: string

    /**
     * RFI response object
     * @type {UploadRfiDocumentRequestDto}
     * @memberof CustomerAccountIndividualApiRespondtoRFI
     */
    readonly uploadRfiDocumentRequestDto: UploadRfiDocumentRequestDto

    /**
     * Enter a unique UUID value
     * @type {string}
     * @memberof CustomerAccountIndividualApiRespondtoRFI
     */
    readonly xRequestId?: string
}

/**
 * Request parameters for unifiedAddCustomer operation in CustomerAccountIndividualApi.
 * @export
 * @interface CustomerAccountIndividualApiUnifiedAddCustomerRequest
 */
export interface CustomerAccountIndividualApiUnifiedAddCustomerRequest {
    /**
     * Unique client identifier generated and shared before API handshake.
     * @type {string}
     * @memberof CustomerAccountIndividualApiUnifiedAddCustomer
     */
    readonly clientHashId: string

    /**
     * Add individual customer
     * @type {UnifiedAddCustomerRequest}
     * @memberof CustomerAccountIndividualApiUnifiedAddCustomer
     */
    readonly requestDto: UnifiedAddCustomerRequest

    /**
     * Enter a unique UUID value
     * @type {string}
     * @memberof CustomerAccountIndividualApiUnifiedAddCustomer
     */
    readonly xRequestId?: string
}

/**
 * Request parameters for uploadDocument operation in CustomerAccountIndividualApi.
 * @export
 * @interface CustomerAccountIndividualApiUploadDocumentRequest
 */
export interface CustomerAccountIndividualApiUploadDocumentRequest {
    /**
     * Unique client identifier generated and shared before API handshake.
     * @type {string}
     * @memberof CustomerAccountIndividualApiUploadDocument
     */
    readonly clientHashId: string

    /**
     * Unique customer identifier generated on customer creation.
     * @type {string}
     * @memberof CustomerAccountIndividualApiUploadDocument
     */
    readonly customerHashId: string

    /**
     * Compliance documents
     * @type {ComplianceDocumentDTO}
     * @memberof CustomerAccountIndividualApiUploadDocument
     */
    readonly complianceDocumentDTO: ComplianceDocumentDTO

    /**
     * Enter a unique UUID value
     * @type {string}
     * @memberof CustomerAccountIndividualApiUploadDocument
     */
    readonly xRequestId?: string
}

/**
 * CustomerAccountIndividualApi - object-oriented interface
 * @export
 * @class CustomerAccountIndividualApi
 * @extends {BaseAPI}
 */
export class CustomerAccountIndividualApi extends BaseAPI {
    /**
     * This API allows you to register a customer with a wallet in NIUM\'s cards platform.  >⚠️ WARNING   >This API version is deprecated. Eventually, a deprecated API version becomes unsupported. [Unified Add Customer](ref:unifiedaddcustomer) is the latest version of this API.
     * @summary Add Customer
     * @param {CustomerAccountIndividualApiAddCustomerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerAccountIndividualApi
     */
    public addCustomer(requestParameters: CustomerAccountIndividualApiAddCustomerRequest, options?: RawAxiosRequestConfig) {
        return CustomerAccountIndividualApiFp(this.configuration).addCustomer(requestParameters.clientHashId, requestParameters.customerDataRequestDTO, requestParameters.xRequestId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This API will create customers using minimal data, the rest of the partial data will be pulled via MyInfo etc. which is locked and cannot be edited and further rest fields can be updated using Customer Update API.  >⚠️ WARNING   >This API version is deprecated. Eventually, a deprecated API version becomes unsupported. [Unified Add Customer](ref:unifiedaddcustomer) is the latest version of this API.
     * @summary Add Customer Using MyInfo [SG]
     * @param {CustomerAccountIndividualApiAddCustomerUsingMyInfoSGRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerAccountIndividualApi
     */
    public addCustomerUsingMyInfoSG(requestParameters: CustomerAccountIndividualApiAddCustomerUsingMyInfoSGRequest, options?: RawAxiosRequestConfig) {
        return CustomerAccountIndividualApiFp(this.configuration).addCustomerUsingMyInfoSG(requestParameters.clientHashId, requestParameters.customerDataExternalRequestDTO, requestParameters.xRequestId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *   >⚠️ WARNING   >This API version is deprecated. Eventually, a deprecated API version becomes unsupported. [Unified Add Customer](ref:unifiedaddcustomer) is the latest version of this API.
     * @summary Add Customer Using e-Document Verification
     * @param {CustomerAccountIndividualApiAddCustomerUsingeDocumentVerificationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerAccountIndividualApi
     */
    public addCustomerUsingeDocumentVerification(requestParameters: CustomerAccountIndividualApiAddCustomerUsingeDocumentVerificationRequest, options?: RawAxiosRequestConfig) {
        return CustomerAccountIndividualApiFp(this.configuration).addCustomerUsingeDocumentVerification(requestParameters.clientHashId, requestParameters.eVerifyCustomerRegistrationRequestDTO, requestParameters.xRequestId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This API allows you to update the customer details subject to the following constraints: 1. If compliance status equals to COMPLETED. You can only update email, mobile, delivery address details, and correspondence address details. You may NOT update the billing address. 2. In other cases, you may update any of the fields. At least one key-value pair is needed in the request body of this API.
     * @summary Customer Update
     * @param {CustomerAccountIndividualApiCustomerUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerAccountIndividualApi
     */
    public customerUpdate(requestParameters: CustomerAccountIndividualApiCustomerUpdateRequest, options?: RawAxiosRequestConfig) {
        return CustomerAccountIndividualApiFp(this.configuration).customerUpdate(requestParameters.clientHashId, requestParameters.customerHashId, requestParameters.xRequestId, requestParameters.updateCustomerDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This API allows you to fetch details of RFI raised as part of Individual customer onboarding.
     * @summary Fetch Individual Customer RFI Details
     * @param {CustomerAccountIndividualApiFetchIndividualCustomerRFIDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerAccountIndividualApi
     */
    public fetchIndividualCustomerRFIDetails(requestParameters: CustomerAccountIndividualApiFetchIndividualCustomerRFIDetailsRequest, options?: RawAxiosRequestConfig) {
        return CustomerAccountIndividualApiFp(this.configuration).fetchIndividualCustomerRFIDetails(requestParameters.clientHashId, requestParameters.customerHashId, requestParameters.xRequestId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This API allows you to respond to an RFI raised by NIUM compliance team. You may use this API to respond to an RFI for data or documents when the customer\'s compliance status is RFI_REQUESTED.
     * @summary Respond to RFI
     * @param {CustomerAccountIndividualApiRespondtoRFIRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerAccountIndividualApi
     */
    public respondtoRFI(requestParameters: CustomerAccountIndividualApiRespondtoRFIRequest, options?: RawAxiosRequestConfig) {
        return CustomerAccountIndividualApiFp(this.configuration).respondtoRFI(requestParameters.clientHashId, requestParameters.customerHashId, requestParameters.uploadRfiDocumentRequestDto, requestParameters.xRequestId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This API onboards customers based on their client configuration and preference.   >ℹ️ INFO   The \'childMustHaveParent\' setting can be optionally set to \'true\' for Payroll and Spend and Management clients, and it should be set to \'false\' for all other clients.   For details, see [Parent-child hierarchy](doc:parent-child-hierarchy).
     * @summary Unified Add Customer
     * @param {CustomerAccountIndividualApiUnifiedAddCustomerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerAccountIndividualApi
     */
    public unifiedAddCustomer(requestParameters: CustomerAccountIndividualApiUnifiedAddCustomerRequest, options?: RawAxiosRequestConfig) {
        return CustomerAccountIndividualApiFp(this.configuration).unifiedAddCustomer(requestParameters.clientHashId, requestParameters.requestDto, requestParameters.xRequestId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This API allows to upload documents necessary for customer onboarding. Refer to the RFI details on required documents.
     * @summary Upload Document
     * @param {CustomerAccountIndividualApiUploadDocumentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerAccountIndividualApi
     */
    public uploadDocument(requestParameters: CustomerAccountIndividualApiUploadDocumentRequest, options?: RawAxiosRequestConfig) {
        return CustomerAccountIndividualApiFp(this.configuration).uploadDocument(requestParameters.clientHashId, requestParameters.customerHashId, requestParameters.complianceDocumentDTO, requestParameters.xRequestId, options).then((request) => request(this.axios, this.basePath));
    }
}

