/* tslint:disable */
/* eslint-disable */
/**
 * NIUM Platform
 * NIUM Platform
 *
 * The version of the OpenAPI document: 2023.12.12
 * Contact: experience@nium.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import { BlockCustomerRequestDTO } from '../model';
// @ts-ignore
import { CustomerApiError } from '../model';
// @ts-ignore
import { CustomerClientTagsRequestDTO } from '../model';
// @ts-ignore
import { CustomerClientTagsResponseDTO } from '../model';
// @ts-ignore
import { CustomerDetailResponse } from '../model';
// @ts-ignore
import { CustomerDetailsResponseV2DTO } from '../model';
// @ts-ignore
import { PaginatedCustomerDetailsResponseV2DTO } from '../model';
// @ts-ignore
import { PaginatedResponseDTOCustomerDetailsResponseV2DTO } from '../model';
// @ts-ignore
import { WalletApiError } from '../model';
/**
 * CustomerManagementApi - axios parameter creator
 * @export
 */
export const CustomerManagementApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This API allows you to download an account statement.
         * @summary Account Statement
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} customerHashId Unique customer identifier generated on customer creation.
         * @param {string} endDate End date for fetching the transaction details. The format for endDate is YYYY-MM-DD.
         * @param {string} startDate From date for fetching the transaction details. The format for startDate is YYYY-MM-DD.
         * @param {string} [currencies] This field accepts the list of currencies in 3-letter [ISO-4217 transaction currency code](https://docs.nium.com/apis/docs/currency-and-country-codes) for which the account statement to be generated. If no currencies are being sent in query param then statement will be generated for all the currencies enabled to the customer.
         * @param {string} [fileType] This field accepts the file type of the account statement to be generated.
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountStatement: async (clientHashId: string, customerHashId: string, endDate: string, startDate: string, currencies?: string, fileType?: string, xRequestId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'clientHashId' is not null or undefined
            assertParamExists('accountStatement', 'clientHashId', clientHashId)
            // verify required parameter 'customerHashId' is not null or undefined
            assertParamExists('accountStatement', 'customerHashId', customerHashId)
            // verify required parameter 'endDate' is not null or undefined
            assertParamExists('accountStatement', 'endDate', endDate)
            // verify required parameter 'startDate' is not null or undefined
            assertParamExists('accountStatement', 'startDate', startDate)
            const localVarPath = `/api/v1/client/{clientHashId}/customer/{customerHashId}/accounts/statement`
                .replace(`{${"clientHashId"}}`, encodeURIComponent(String(clientHashId)))
                .replace(`{${"customerHashId"}}`, encodeURIComponent(String(customerHashId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication default required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (currencies !== undefined) {
                localVarQueryParameter['currencies'] = currencies;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = endDate;
            }

            if (fileType !== undefined) {
                localVarQueryParameter['fileType'] = fileType;
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = startDate;
            }

            if (xRequestId != null) {
                localVarHeaderParameter['x-request-id'] = String(xRequestId);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This API allows you to permanently block or temporarily block/unblock a customer.
         * @summary Block/Unblock Customer
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} customerHashId Unique customer identifier generated on customer creation.
         * @param {BlockCustomerRequestDTO} blockCustomerRequestDTO blockCustomerRequestDTO
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        blockUnblockCustomer: async (clientHashId: string, customerHashId: string, blockCustomerRequestDTO: BlockCustomerRequestDTO, xRequestId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'clientHashId' is not null or undefined
            assertParamExists('blockUnblockCustomer', 'clientHashId', clientHashId)
            // verify required parameter 'customerHashId' is not null or undefined
            assertParamExists('blockUnblockCustomer', 'customerHashId', customerHashId)
            // verify required parameter 'blockCustomerRequestDTO' is not null or undefined
            assertParamExists('blockUnblockCustomer', 'blockCustomerRequestDTO', blockCustomerRequestDTO)
            const localVarPath = `/api/v1/client/{clientHashId}/customer/{customerHashId}/block`
                .replace(`{${"clientHashId"}}`, encodeURIComponent(String(clientHashId)))
                .replace(`{${"customerHashId"}}`, encodeURIComponent(String(customerHashId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication default required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (xRequestId != null) {
                localVarHeaderParameter['x-request-id'] = String(xRequestId);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(blockCustomerRequestDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This API allows you to fetch details for a specific customer.   >⚠️ WARNING   To access updated functionality and features we recommed using the latest version of this API [Customer Details V2](/apis/reference/customerdetailsv2). In December 2023, this API version will be deprecated and becomes unsupported.
         * @summary Customer Details
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} customerHashId Unique customer identifier generated on customer creation.
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerDetails: async (clientHashId: string, customerHashId: string, xRequestId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'clientHashId' is not null or undefined
            assertParamExists('customerDetails', 'clientHashId', clientHashId)
            // verify required parameter 'customerHashId' is not null or undefined
            assertParamExists('customerDetails', 'customerHashId', customerHashId)
            const localVarPath = `/api/v1/client/{clientHashId}/customer/{customerHashId}`
                .replace(`{${"clientHashId"}}`, encodeURIComponent(String(clientHashId)))
                .replace(`{${"customerHashId"}}`, encodeURIComponent(String(customerHashId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication default required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (xRequestId != null) {
                localVarHeaderParameter['x-request-id'] = String(xRequestId);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This API allows you to fetch details for a specific customer.
         * @summary Customer Details V2
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} customerHashId Unique customer identifier generated on customer creation.
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerDetailsV2: async (clientHashId: string, customerHashId: string, xRequestId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'clientHashId' is not null or undefined
            assertParamExists('customerDetailsV2', 'clientHashId', clientHashId)
            // verify required parameter 'customerHashId' is not null or undefined
            assertParamExists('customerDetailsV2', 'customerHashId', customerHashId)
            const localVarPath = `/api/v2/client/{clientHashId}/customer/{customerHashId}`
                .replace(`{${"clientHashId"}}`, encodeURIComponent(String(clientHashId)))
                .replace(`{${"customerHashId"}}`, encodeURIComponent(String(customerHashId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication default required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (xRequestId != null) {
                localVarHeaderParameter['x-request-id'] = String(xRequestId);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This API allows you to fetch the customers for the client. It also supports query parameters based filtering to fetch details of a customer with email or mobile.   >⚠️ WARNING   To access updated functionality and features we recommed using the latest version of this API [Customer List V2](/apis/reference/customerlistv2). In December 2023, this API version will be deprecated and becomes unsupported.
         * @summary Customer List
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} [email] This field accepts the email ID of the customer.
         * @param {string} [mobile] This field accepts the mobile number of a customer--digits only--without the country code.
         * @param {CustomerListOrderEnum} [order] This field accepts the order which can be ASC or DESC.
         * @param {string} [page] This field accepts the page number to be returned. The acceptable values are 0-N.  This field works with size field such that total number of records/size of each page &#x3D; number of pages(N).  This field can then give a particular page.
         * @param {string} [size] This field accepts the number of elements per page.
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerList: async (clientHashId: string, email?: string, mobile?: string, order?: CustomerListOrderEnum, page?: string, size?: string, xRequestId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'clientHashId' is not null or undefined
            assertParamExists('customerList', 'clientHashId', clientHashId)
            const localVarPath = `/api/v1/client/{clientHashId}/customers`
                .replace(`{${"clientHashId"}}`, encodeURIComponent(String(clientHashId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication default required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }

            if (mobile !== undefined) {
                localVarQueryParameter['mobile'] = mobile;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (xRequestId != null) {
                localVarHeaderParameter['x-request-id'] = String(xRequestId);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This API allows you to fetch customer lists under a client with optional search parameters.
         * @summary Customer List V2
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} [businessRegistrationNumber] This field accepts the business registration number of corporate customer.
         * @param {string} [email] This field accepts the email ID of the customer.
         * @param {string} [mobile] This field accepts the mobile number of a customer without the country code.
         * @param {CustomerListV2OrderEnum} [order] This field accepts the order which can be ASC or DESC.
         * @param {string} [page] This field accepts the page number to be returned. The acceptable values are 0-N.  This field works with size field such that total number of records/size of each page &#x3D; number of pages(N).  This field can then give a particular page.
         * @param {string} [size] This field accepts the number of elements per page.
         * @param {string} [tagKey] This parameter can filter the customers, based on the exact value of tagKey defined against customers. This can be used as an independent search parameter.
         * @param {string} [tagValue] This parameter can filter the customers, based on the approximating value of tagValue(that may be mapped for a tagKey defined against customers). This can be used as an independent search parameter.
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerListV2: async (clientHashId: string, businessRegistrationNumber?: string, email?: string, mobile?: string, order?: CustomerListV2OrderEnum, page?: string, size?: string, tagKey?: string, tagValue?: string, xRequestId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'clientHashId' is not null or undefined
            assertParamExists('customerListV2', 'clientHashId', clientHashId)
            const localVarPath = `/api/v2/client/{clientHashId}/customers`
                .replace(`{${"clientHashId"}}`, encodeURIComponent(String(clientHashId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication default required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (businessRegistrationNumber !== undefined) {
                localVarQueryParameter['businessRegistrationNumber'] = businessRegistrationNumber;
            }

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }

            if (mobile !== undefined) {
                localVarQueryParameter['mobile'] = mobile;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (tagKey !== undefined) {
                localVarQueryParameter['tagKey'] = tagKey;
            }

            if (tagValue !== undefined) {
                localVarQueryParameter['tagValue'] = tagValue;
            }

            if (xRequestId != null) {
                localVarHeaderParameter['x-request-id'] = String(xRequestId);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This API allows you to fetch customer lists under a client with optional search parameters.
         * @summary Customer List V3
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} [businessRegistrationNumber] This field accepts the business registration number of corporate customer.
         * @param {CustomerListV3CustomerTypeEnum} [customerType] This field accepts the type of customer.
         * @param {string} [email] This field accepts the email ID of the customer.
         * @param {string} [mobile] This field accepts the mobile number of a customer without the country code.
         * @param {CustomerListV3OrderEnum} [order] This field accepts the order which can be ASC or DESC.
         * @param {string} [page] This field accepts the page number to be returned. The acceptable values are 0-N.  This field works with size field such that total number of records/size of each page &#x3D; number of pages(N).  This field can then give a particular page.
         * @param {string} [parentCustomerHashId] This field contains the unique parent customer identifier generated at the time of customer creation.
         * @param {string} [size] This field accepts the number of elements per page.
         * @param {string} [tagKey] This parameter can filter the customers, based on the exact value of tagKey defined against customers. This can be used as an independent search parameter.
         * @param {string} [tagValue] This parameter can filter the customers, based on the approximating value of tagValue(that may be mapped for a tagKey defined against customers). This can be used as an independent search parameter.
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerListV3: async (clientHashId: string, businessRegistrationNumber?: string, customerType?: CustomerListV3CustomerTypeEnum, email?: string, mobile?: string, order?: CustomerListV3OrderEnum, page?: string, parentCustomerHashId?: string, size?: string, tagKey?: string, tagValue?: string, xRequestId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'clientHashId' is not null or undefined
            assertParamExists('customerListV3', 'clientHashId', clientHashId)
            const localVarPath = `/api/v3/client/{clientHashId}/customers`
                .replace(`{${"clientHashId"}}`, encodeURIComponent(String(clientHashId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication default required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (businessRegistrationNumber !== undefined) {
                localVarQueryParameter['businessRegistrationNumber'] = businessRegistrationNumber;
            }

            if (customerType !== undefined) {
                localVarQueryParameter['customerType'] = customerType;
            }

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }

            if (mobile !== undefined) {
                localVarQueryParameter['mobile'] = mobile;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (parentCustomerHashId !== undefined) {
                localVarQueryParameter['parentCustomerHashId'] = parentCustomerHashId;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (tagKey !== undefined) {
                localVarQueryParameter['tagKey'] = tagKey;
            }

            if (tagValue !== undefined) {
                localVarQueryParameter['tagValue'] = tagValue;
            }

            if (xRequestId != null) {
                localVarHeaderParameter['x-request-id'] = String(xRequestId);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This API allows you to add, update, and delete customer tags.
         * @summary Manage Customer Tags
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} customerHashId Unique customer identifier generated during customer creation.
         * @param {CustomerClientTagsRequestDTO} customerClientTagsRequestDTO tags
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        manageCustomerTags: async (clientHashId: string, customerHashId: string, customerClientTagsRequestDTO: CustomerClientTagsRequestDTO, xRequestId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'clientHashId' is not null or undefined
            assertParamExists('manageCustomerTags', 'clientHashId', clientHashId)
            // verify required parameter 'customerHashId' is not null or undefined
            assertParamExists('manageCustomerTags', 'customerHashId', customerHashId)
            // verify required parameter 'customerClientTagsRequestDTO' is not null or undefined
            assertParamExists('manageCustomerTags', 'customerClientTagsRequestDTO', customerClientTagsRequestDTO)
            const localVarPath = `/api/v1/client/{clientHashId}/customer/{customerHashId}/tags`
                .replace(`{${"clientHashId"}}`, encodeURIComponent(String(clientHashId)))
                .replace(`{${"customerHashId"}}`, encodeURIComponent(String(customerHashId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication default required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (xRequestId != null) {
                localVarHeaderParameter['x-request-id'] = String(xRequestId);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(customerClientTagsRequestDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CustomerManagementApi - functional programming interface
 * @export
 */
export const CustomerManagementApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CustomerManagementApiAxiosParamCreator(configuration)
    return {
        /**
         * This API allows you to download an account statement.
         * @summary Account Statement
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} customerHashId Unique customer identifier generated on customer creation.
         * @param {string} endDate End date for fetching the transaction details. The format for endDate is YYYY-MM-DD.
         * @param {string} startDate From date for fetching the transaction details. The format for startDate is YYYY-MM-DD.
         * @param {string} [currencies] This field accepts the list of currencies in 3-letter [ISO-4217 transaction currency code](https://docs.nium.com/apis/docs/currency-and-country-codes) for which the account statement to be generated. If no currencies are being sent in query param then statement will be generated for all the currencies enabled to the customer.
         * @param {string} [fileType] This field accepts the file type of the account statement to be generated.
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountStatement(clientHashId: string, customerHashId: string, endDate: string, startDate: string, currencies?: string, fileType?: string, xRequestId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountStatement(clientHashId, customerHashId, endDate, startDate, currencies, fileType, xRequestId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CustomerManagementApi.accountStatement']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * This API allows you to permanently block or temporarily block/unblock a customer.
         * @summary Block/Unblock Customer
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} customerHashId Unique customer identifier generated on customer creation.
         * @param {BlockCustomerRequestDTO} blockCustomerRequestDTO blockCustomerRequestDTO
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async blockUnblockCustomer(clientHashId: string, customerHashId: string, blockCustomerRequestDTO: BlockCustomerRequestDTO, xRequestId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerApiError>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.blockUnblockCustomer(clientHashId, customerHashId, blockCustomerRequestDTO, xRequestId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CustomerManagementApi.blockUnblockCustomer']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * This API allows you to fetch details for a specific customer.   >⚠️ WARNING   To access updated functionality and features we recommed using the latest version of this API [Customer Details V2](/apis/reference/customerdetailsv2). In December 2023, this API version will be deprecated and becomes unsupported.
         * @summary Customer Details
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} customerHashId Unique customer identifier generated on customer creation.
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerDetails(clientHashId: string, customerHashId: string, xRequestId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerDetailResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerDetails(clientHashId, customerHashId, xRequestId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CustomerManagementApi.customerDetails']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * This API allows you to fetch details for a specific customer.
         * @summary Customer Details V2
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} customerHashId Unique customer identifier generated on customer creation.
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerDetailsV2(clientHashId: string, customerHashId: string, xRequestId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerDetailsResponseV2DTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerDetailsV2(clientHashId, customerHashId, xRequestId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CustomerManagementApi.customerDetailsV2']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * This API allows you to fetch the customers for the client. It also supports query parameters based filtering to fetch details of a customer with email or mobile.   >⚠️ WARNING   To access updated functionality and features we recommed using the latest version of this API [Customer List V2](/apis/reference/customerlistv2). In December 2023, this API version will be deprecated and becomes unsupported.
         * @summary Customer List
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} [email] This field accepts the email ID of the customer.
         * @param {string} [mobile] This field accepts the mobile number of a customer--digits only--without the country code.
         * @param {CustomerListOrderEnum} [order] This field accepts the order which can be ASC or DESC.
         * @param {string} [page] This field accepts the page number to be returned. The acceptable values are 0-N.  This field works with size field such that total number of records/size of each page &#x3D; number of pages(N).  This field can then give a particular page.
         * @param {string} [size] This field accepts the number of elements per page.
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerList(clientHashId: string, email?: string, mobile?: string, order?: CustomerListOrderEnum, page?: string, size?: string, xRequestId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CustomerDetailResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerList(clientHashId, email, mobile, order, page, size, xRequestId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CustomerManagementApi.customerList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * This API allows you to fetch customer lists under a client with optional search parameters.
         * @summary Customer List V2
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} [businessRegistrationNumber] This field accepts the business registration number of corporate customer.
         * @param {string} [email] This field accepts the email ID of the customer.
         * @param {string} [mobile] This field accepts the mobile number of a customer without the country code.
         * @param {CustomerListV2OrderEnum} [order] This field accepts the order which can be ASC or DESC.
         * @param {string} [page] This field accepts the page number to be returned. The acceptable values are 0-N.  This field works with size field such that total number of records/size of each page &#x3D; number of pages(N).  This field can then give a particular page.
         * @param {string} [size] This field accepts the number of elements per page.
         * @param {string} [tagKey] This parameter can filter the customers, based on the exact value of tagKey defined against customers. This can be used as an independent search parameter.
         * @param {string} [tagValue] This parameter can filter the customers, based on the approximating value of tagValue(that may be mapped for a tagKey defined against customers). This can be used as an independent search parameter.
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerListV2(clientHashId: string, businessRegistrationNumber?: string, email?: string, mobile?: string, order?: CustomerListV2OrderEnum, page?: string, size?: string, tagKey?: string, tagValue?: string, xRequestId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedCustomerDetailsResponseV2DTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerListV2(clientHashId, businessRegistrationNumber, email, mobile, order, page, size, tagKey, tagValue, xRequestId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CustomerManagementApi.customerListV2']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * This API allows you to fetch customer lists under a client with optional search parameters.
         * @summary Customer List V3
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} [businessRegistrationNumber] This field accepts the business registration number of corporate customer.
         * @param {CustomerListV3CustomerTypeEnum} [customerType] This field accepts the type of customer.
         * @param {string} [email] This field accepts the email ID of the customer.
         * @param {string} [mobile] This field accepts the mobile number of a customer without the country code.
         * @param {CustomerListV3OrderEnum} [order] This field accepts the order which can be ASC or DESC.
         * @param {string} [page] This field accepts the page number to be returned. The acceptable values are 0-N.  This field works with size field such that total number of records/size of each page &#x3D; number of pages(N).  This field can then give a particular page.
         * @param {string} [parentCustomerHashId] This field contains the unique parent customer identifier generated at the time of customer creation.
         * @param {string} [size] This field accepts the number of elements per page.
         * @param {string} [tagKey] This parameter can filter the customers, based on the exact value of tagKey defined against customers. This can be used as an independent search parameter.
         * @param {string} [tagValue] This parameter can filter the customers, based on the approximating value of tagValue(that may be mapped for a tagKey defined against customers). This can be used as an independent search parameter.
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerListV3(clientHashId: string, businessRegistrationNumber?: string, customerType?: CustomerListV3CustomerTypeEnum, email?: string, mobile?: string, order?: CustomerListV3OrderEnum, page?: string, parentCustomerHashId?: string, size?: string, tagKey?: string, tagValue?: string, xRequestId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedResponseDTOCustomerDetailsResponseV2DTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerListV3(clientHashId, businessRegistrationNumber, customerType, email, mobile, order, page, parentCustomerHashId, size, tagKey, tagValue, xRequestId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CustomerManagementApi.customerListV3']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * This API allows you to add, update, and delete customer tags.
         * @summary Manage Customer Tags
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} customerHashId Unique customer identifier generated during customer creation.
         * @param {CustomerClientTagsRequestDTO} customerClientTagsRequestDTO tags
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async manageCustomerTags(clientHashId: string, customerHashId: string, customerClientTagsRequestDTO: CustomerClientTagsRequestDTO, xRequestId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerClientTagsResponseDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.manageCustomerTags(clientHashId, customerHashId, customerClientTagsRequestDTO, xRequestId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CustomerManagementApi.manageCustomerTags']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CustomerManagementApi - factory interface
 * @export
 */
export const CustomerManagementApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CustomerManagementApiFp(configuration)
    return {
        /**
         * This API allows you to download an account statement.
         * @summary Account Statement
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} customerHashId Unique customer identifier generated on customer creation.
         * @param {string} endDate End date for fetching the transaction details. The format for endDate is YYYY-MM-DD.
         * @param {string} startDate From date for fetching the transaction details. The format for startDate is YYYY-MM-DD.
         * @param {string} [currencies] This field accepts the list of currencies in 3-letter [ISO-4217 transaction currency code](https://docs.nium.com/apis/docs/currency-and-country-codes) for which the account statement to be generated. If no currencies are being sent in query param then statement will be generated for all the currencies enabled to the customer.
         * @param {string} [fileType] This field accepts the file type of the account statement to be generated.
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountStatement(clientHashId: string, customerHashId: string, endDate: string, startDate: string, currencies?: string, fileType?: string, xRequestId?: string, options?: any): AxiosPromise<void> {
            return localVarFp.accountStatement(clientHashId, customerHashId, endDate, startDate, currencies, fileType, xRequestId, options).then((request) => request(axios, basePath));
        },
        /**
         * This API allows you to permanently block or temporarily block/unblock a customer.
         * @summary Block/Unblock Customer
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} customerHashId Unique customer identifier generated on customer creation.
         * @param {BlockCustomerRequestDTO} blockCustomerRequestDTO blockCustomerRequestDTO
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        blockUnblockCustomer(clientHashId: string, customerHashId: string, blockCustomerRequestDTO: BlockCustomerRequestDTO, xRequestId?: string, options?: any): AxiosPromise<CustomerApiError> {
            return localVarFp.blockUnblockCustomer(clientHashId, customerHashId, blockCustomerRequestDTO, xRequestId, options).then((request) => request(axios, basePath));
        },
        /**
         * This API allows you to fetch details for a specific customer.   >⚠️ WARNING   To access updated functionality and features we recommed using the latest version of this API [Customer Details V2](/apis/reference/customerdetailsv2). In December 2023, this API version will be deprecated and becomes unsupported.
         * @summary Customer Details
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} customerHashId Unique customer identifier generated on customer creation.
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerDetails(clientHashId: string, customerHashId: string, xRequestId?: string, options?: any): AxiosPromise<CustomerDetailResponse> {
            return localVarFp.customerDetails(clientHashId, customerHashId, xRequestId, options).then((request) => request(axios, basePath));
        },
        /**
         * This API allows you to fetch details for a specific customer.
         * @summary Customer Details V2
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} customerHashId Unique customer identifier generated on customer creation.
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerDetailsV2(clientHashId: string, customerHashId: string, xRequestId?: string, options?: any): AxiosPromise<CustomerDetailsResponseV2DTO> {
            return localVarFp.customerDetailsV2(clientHashId, customerHashId, xRequestId, options).then((request) => request(axios, basePath));
        },
        /**
         * This API allows you to fetch the customers for the client. It also supports query parameters based filtering to fetch details of a customer with email or mobile.   >⚠️ WARNING   To access updated functionality and features we recommed using the latest version of this API [Customer List V2](/apis/reference/customerlistv2). In December 2023, this API version will be deprecated and becomes unsupported.
         * @summary Customer List
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} [email] This field accepts the email ID of the customer.
         * @param {string} [mobile] This field accepts the mobile number of a customer--digits only--without the country code.
         * @param {CustomerListOrderEnum} [order] This field accepts the order which can be ASC or DESC.
         * @param {string} [page] This field accepts the page number to be returned. The acceptable values are 0-N.  This field works with size field such that total number of records/size of each page &#x3D; number of pages(N).  This field can then give a particular page.
         * @param {string} [size] This field accepts the number of elements per page.
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerList(clientHashId: string, email?: string, mobile?: string, order?: CustomerListOrderEnum, page?: string, size?: string, xRequestId?: string, options?: any): AxiosPromise<Array<CustomerDetailResponse>> {
            return localVarFp.customerList(clientHashId, email, mobile, order, page, size, xRequestId, options).then((request) => request(axios, basePath));
        },
        /**
         * This API allows you to fetch customer lists under a client with optional search parameters.
         * @summary Customer List V2
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} [businessRegistrationNumber] This field accepts the business registration number of corporate customer.
         * @param {string} [email] This field accepts the email ID of the customer.
         * @param {string} [mobile] This field accepts the mobile number of a customer without the country code.
         * @param {CustomerListV2OrderEnum} [order] This field accepts the order which can be ASC or DESC.
         * @param {string} [page] This field accepts the page number to be returned. The acceptable values are 0-N.  This field works with size field such that total number of records/size of each page &#x3D; number of pages(N).  This field can then give a particular page.
         * @param {string} [size] This field accepts the number of elements per page.
         * @param {string} [tagKey] This parameter can filter the customers, based on the exact value of tagKey defined against customers. This can be used as an independent search parameter.
         * @param {string} [tagValue] This parameter can filter the customers, based on the approximating value of tagValue(that may be mapped for a tagKey defined against customers). This can be used as an independent search parameter.
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerListV2(clientHashId: string, businessRegistrationNumber?: string, email?: string, mobile?: string, order?: CustomerListV2OrderEnum, page?: string, size?: string, tagKey?: string, tagValue?: string, xRequestId?: string, options?: any): AxiosPromise<PaginatedCustomerDetailsResponseV2DTO> {
            return localVarFp.customerListV2(clientHashId, businessRegistrationNumber, email, mobile, order, page, size, tagKey, tagValue, xRequestId, options).then((request) => request(axios, basePath));
        },
        /**
         * This API allows you to fetch customer lists under a client with optional search parameters.
         * @summary Customer List V3
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} [businessRegistrationNumber] This field accepts the business registration number of corporate customer.
         * @param {CustomerListV3CustomerTypeEnum} [customerType] This field accepts the type of customer.
         * @param {string} [email] This field accepts the email ID of the customer.
         * @param {string} [mobile] This field accepts the mobile number of a customer without the country code.
         * @param {CustomerListV3OrderEnum} [order] This field accepts the order which can be ASC or DESC.
         * @param {string} [page] This field accepts the page number to be returned. The acceptable values are 0-N.  This field works with size field such that total number of records/size of each page &#x3D; number of pages(N).  This field can then give a particular page.
         * @param {string} [parentCustomerHashId] This field contains the unique parent customer identifier generated at the time of customer creation.
         * @param {string} [size] This field accepts the number of elements per page.
         * @param {string} [tagKey] This parameter can filter the customers, based on the exact value of tagKey defined against customers. This can be used as an independent search parameter.
         * @param {string} [tagValue] This parameter can filter the customers, based on the approximating value of tagValue(that may be mapped for a tagKey defined against customers). This can be used as an independent search parameter.
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerListV3(clientHashId: string, businessRegistrationNumber?: string, customerType?: CustomerListV3CustomerTypeEnum, email?: string, mobile?: string, order?: CustomerListV3OrderEnum, page?: string, parentCustomerHashId?: string, size?: string, tagKey?: string, tagValue?: string, xRequestId?: string, options?: any): AxiosPromise<PaginatedResponseDTOCustomerDetailsResponseV2DTO> {
            return localVarFp.customerListV3(clientHashId, businessRegistrationNumber, customerType, email, mobile, order, page, parentCustomerHashId, size, tagKey, tagValue, xRequestId, options).then((request) => request(axios, basePath));
        },
        /**
         * This API allows you to add, update, and delete customer tags.
         * @summary Manage Customer Tags
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} customerHashId Unique customer identifier generated during customer creation.
         * @param {CustomerClientTagsRequestDTO} customerClientTagsRequestDTO tags
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        manageCustomerTags(clientHashId: string, customerHashId: string, customerClientTagsRequestDTO: CustomerClientTagsRequestDTO, xRequestId?: string, options?: any): AxiosPromise<CustomerClientTagsResponseDTO> {
            return localVarFp.manageCustomerTags(clientHashId, customerHashId, customerClientTagsRequestDTO, xRequestId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CustomerManagementApi - object-oriented interface
 * @export
 * @class CustomerManagementApi
 * @extends {BaseAPI}
 */
export class CustomerManagementApi extends BaseAPI {
    /**
     * This API allows you to download an account statement.
     * @summary Account Statement
     * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
     * @param {string} customerHashId Unique customer identifier generated on customer creation.
     * @param {string} endDate End date for fetching the transaction details. The format for endDate is YYYY-MM-DD.
     * @param {string} startDate From date for fetching the transaction details. The format for startDate is YYYY-MM-DD.
     * @param {string} [currencies] This field accepts the list of currencies in 3-letter [ISO-4217 transaction currency code](https://docs.nium.com/apis/docs/currency-and-country-codes) for which the account statement to be generated. If no currencies are being sent in query param then statement will be generated for all the currencies enabled to the customer.
     * @param {string} [fileType] This field accepts the file type of the account statement to be generated.
     * @param {string} [xRequestId] Enter a unique UUID value
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerManagementApi
     */
    public accountStatement(clientHashId: string, customerHashId: string, endDate: string, startDate: string, currencies?: string, fileType?: string, xRequestId?: string, options?: RawAxiosRequestConfig) {
        return CustomerManagementApiFp(this.configuration).accountStatement(clientHashId, customerHashId, endDate, startDate, currencies, fileType, xRequestId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This API allows you to permanently block or temporarily block/unblock a customer.
     * @summary Block/Unblock Customer
     * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
     * @param {string} customerHashId Unique customer identifier generated on customer creation.
     * @param {BlockCustomerRequestDTO} blockCustomerRequestDTO blockCustomerRequestDTO
     * @param {string} [xRequestId] Enter a unique UUID value
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerManagementApi
     */
    public blockUnblockCustomer(clientHashId: string, customerHashId: string, blockCustomerRequestDTO: BlockCustomerRequestDTO, xRequestId?: string, options?: RawAxiosRequestConfig) {
        return CustomerManagementApiFp(this.configuration).blockUnblockCustomer(clientHashId, customerHashId, blockCustomerRequestDTO, xRequestId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This API allows you to fetch details for a specific customer.   >⚠️ WARNING   To access updated functionality and features we recommed using the latest version of this API [Customer Details V2](/apis/reference/customerdetailsv2). In December 2023, this API version will be deprecated and becomes unsupported.
     * @summary Customer Details
     * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
     * @param {string} customerHashId Unique customer identifier generated on customer creation.
     * @param {string} [xRequestId] Enter a unique UUID value
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerManagementApi
     */
    public customerDetails(clientHashId: string, customerHashId: string, xRequestId?: string, options?: RawAxiosRequestConfig) {
        return CustomerManagementApiFp(this.configuration).customerDetails(clientHashId, customerHashId, xRequestId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This API allows you to fetch details for a specific customer.
     * @summary Customer Details V2
     * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
     * @param {string} customerHashId Unique customer identifier generated on customer creation.
     * @param {string} [xRequestId] Enter a unique UUID value
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerManagementApi
     */
    public customerDetailsV2(clientHashId: string, customerHashId: string, xRequestId?: string, options?: RawAxiosRequestConfig) {
        return CustomerManagementApiFp(this.configuration).customerDetailsV2(clientHashId, customerHashId, xRequestId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This API allows you to fetch the customers for the client. It also supports query parameters based filtering to fetch details of a customer with email or mobile.   >⚠️ WARNING   To access updated functionality and features we recommed using the latest version of this API [Customer List V2](/apis/reference/customerlistv2). In December 2023, this API version will be deprecated and becomes unsupported.
     * @summary Customer List
     * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
     * @param {string} [email] This field accepts the email ID of the customer.
     * @param {string} [mobile] This field accepts the mobile number of a customer--digits only--without the country code.
     * @param {CustomerListOrderEnum} [order] This field accepts the order which can be ASC or DESC.
     * @param {string} [page] This field accepts the page number to be returned. The acceptable values are 0-N.  This field works with size field such that total number of records/size of each page &#x3D; number of pages(N).  This field can then give a particular page.
     * @param {string} [size] This field accepts the number of elements per page.
     * @param {string} [xRequestId] Enter a unique UUID value
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerManagementApi
     */
    public customerList(clientHashId: string, email?: string, mobile?: string, order?: CustomerListOrderEnum, page?: string, size?: string, xRequestId?: string, options?: RawAxiosRequestConfig) {
        return CustomerManagementApiFp(this.configuration).customerList(clientHashId, email, mobile, order, page, size, xRequestId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This API allows you to fetch customer lists under a client with optional search parameters.
     * @summary Customer List V2
     * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
     * @param {string} [businessRegistrationNumber] This field accepts the business registration number of corporate customer.
     * @param {string} [email] This field accepts the email ID of the customer.
     * @param {string} [mobile] This field accepts the mobile number of a customer without the country code.
     * @param {CustomerListV2OrderEnum} [order] This field accepts the order which can be ASC or DESC.
     * @param {string} [page] This field accepts the page number to be returned. The acceptable values are 0-N.  This field works with size field such that total number of records/size of each page &#x3D; number of pages(N).  This field can then give a particular page.
     * @param {string} [size] This field accepts the number of elements per page.
     * @param {string} [tagKey] This parameter can filter the customers, based on the exact value of tagKey defined against customers. This can be used as an independent search parameter.
     * @param {string} [tagValue] This parameter can filter the customers, based on the approximating value of tagValue(that may be mapped for a tagKey defined against customers). This can be used as an independent search parameter.
     * @param {string} [xRequestId] Enter a unique UUID value
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerManagementApi
     */
    public customerListV2(clientHashId: string, businessRegistrationNumber?: string, email?: string, mobile?: string, order?: CustomerListV2OrderEnum, page?: string, size?: string, tagKey?: string, tagValue?: string, xRequestId?: string, options?: RawAxiosRequestConfig) {
        return CustomerManagementApiFp(this.configuration).customerListV2(clientHashId, businessRegistrationNumber, email, mobile, order, page, size, tagKey, tagValue, xRequestId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This API allows you to fetch customer lists under a client with optional search parameters.
     * @summary Customer List V3
     * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
     * @param {string} [businessRegistrationNumber] This field accepts the business registration number of corporate customer.
     * @param {CustomerListV3CustomerTypeEnum} [customerType] This field accepts the type of customer.
     * @param {string} [email] This field accepts the email ID of the customer.
     * @param {string} [mobile] This field accepts the mobile number of a customer without the country code.
     * @param {CustomerListV3OrderEnum} [order] This field accepts the order which can be ASC or DESC.
     * @param {string} [page] This field accepts the page number to be returned. The acceptable values are 0-N.  This field works with size field such that total number of records/size of each page &#x3D; number of pages(N).  This field can then give a particular page.
     * @param {string} [parentCustomerHashId] This field contains the unique parent customer identifier generated at the time of customer creation.
     * @param {string} [size] This field accepts the number of elements per page.
     * @param {string} [tagKey] This parameter can filter the customers, based on the exact value of tagKey defined against customers. This can be used as an independent search parameter.
     * @param {string} [tagValue] This parameter can filter the customers, based on the approximating value of tagValue(that may be mapped for a tagKey defined against customers). This can be used as an independent search parameter.
     * @param {string} [xRequestId] Enter a unique UUID value
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerManagementApi
     */
    public customerListV3(clientHashId: string, businessRegistrationNumber?: string, customerType?: CustomerListV3CustomerTypeEnum, email?: string, mobile?: string, order?: CustomerListV3OrderEnum, page?: string, parentCustomerHashId?: string, size?: string, tagKey?: string, tagValue?: string, xRequestId?: string, options?: RawAxiosRequestConfig) {
        return CustomerManagementApiFp(this.configuration).customerListV3(clientHashId, businessRegistrationNumber, customerType, email, mobile, order, page, parentCustomerHashId, size, tagKey, tagValue, xRequestId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This API allows you to add, update, and delete customer tags.
     * @summary Manage Customer Tags
     * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
     * @param {string} customerHashId Unique customer identifier generated during customer creation.
     * @param {CustomerClientTagsRequestDTO} customerClientTagsRequestDTO tags
     * @param {string} [xRequestId] Enter a unique UUID value
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerManagementApi
     */
    public manageCustomerTags(clientHashId: string, customerHashId: string, customerClientTagsRequestDTO: CustomerClientTagsRequestDTO, xRequestId?: string, options?: RawAxiosRequestConfig) {
        return CustomerManagementApiFp(this.configuration).manageCustomerTags(clientHashId, customerHashId, customerClientTagsRequestDTO, xRequestId, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const CustomerListOrderEnum = {
    Asc: 'ASC',
    Desc: 'DESC'
} as const;
export type CustomerListOrderEnum = typeof CustomerListOrderEnum[keyof typeof CustomerListOrderEnum];
/**
 * @export
 */
export const CustomerListV2OrderEnum = {
    Asc: 'ASC',
    Desc: 'DESC'
} as const;
export type CustomerListV2OrderEnum = typeof CustomerListV2OrderEnum[keyof typeof CustomerListV2OrderEnum];
/**
 * @export
 */
export const CustomerListV3CustomerTypeEnum = {
    Individual: 'INDIVIDUAL',
    Corporate: 'CORPORATE'
} as const;
export type CustomerListV3CustomerTypeEnum = typeof CustomerListV3CustomerTypeEnum[keyof typeof CustomerListV3CustomerTypeEnum];
/**
 * @export
 */
export const CustomerListV3OrderEnum = {
    Asc: 'ASC',
    Desc: 'DESC'
} as const;
export type CustomerListV3OrderEnum = typeof CustomerListV3OrderEnum[keyof typeof CustomerListV3OrderEnum];
