/* tslint:disable */
/* eslint-disable */
/**
 * NIUM Platform
 * NIUM Platform
 *
 * The version of the OpenAPI document: 2023.12.12
 * Contact: experience@nium.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import { AccountStatusResponse } from '../model';
// @ts-ignore
import { ApiResponseOfstring } from '../model';
// @ts-ignore
import { ConfirmFundingInstrumentRequestDTO } from '../model';
// @ts-ignore
import { CustomerLinkAccountRequest } from '../model';
// @ts-ignore
import { LinkAccountResponse } from '../model';
// @ts-ignore
import { PayinApiError } from '../model';
// @ts-ignore
import { WalletFundDTO } from '../model';
// @ts-ignore
import { WalletFundResponseDTO } from '../model';
// @ts-ignore
import { WalletFundingInstrumentsResponseDTO } from '../model';
/**
 * CustomerFundingApi - axios parameter creator
 * @export
 */
export const CustomerFundingApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This API allows you to link account
         * @summary Add funding instrument
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} customerHashId Unique customer identifier generated on customer creation.
         * @param {string} walletHashId Unique wallet identifier generated simultaneously with customer creation.
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {CustomerLinkAccountRequest} [customerLinkAccountRequest] Add a new funding instrument
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addFundingInstrument: async (clientHashId: string, customerHashId: string, walletHashId: string, xRequestId?: string, customerLinkAccountRequest?: CustomerLinkAccountRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'clientHashId' is not null or undefined
            assertParamExists('addFundingInstrument', 'clientHashId', clientHashId)
            // verify required parameter 'customerHashId' is not null or undefined
            assertParamExists('addFundingInstrument', 'customerHashId', customerHashId)
            // verify required parameter 'walletHashId' is not null or undefined
            assertParamExists('addFundingInstrument', 'walletHashId', walletHashId)
            const localVarPath = `/api/v1/client/{clientHashId}/customer/{customerHashId}/wallet/{walletHashId}/fundingInstruments`
                .replace(`{${"clientHashId"}}`, encodeURIComponent(String(clientHashId)))
                .replace(`{${"customerHashId"}}`, encodeURIComponent(String(customerHashId)))
                .replace(`{${"walletHashId"}}`, encodeURIComponent(String(walletHashId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication default required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (xRequestId != null) {
                localVarHeaderParameter['x-request-id'] = String(xRequestId);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(customerLinkAccountRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This API allows you to confirm funding instrument id
         * @summary Confirm funding instrument
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} customerHashId Unique customer identifier generated on customer creation.
         * @param {string} fundingInstrumentId This field is the unique 36-character funding instrument identifier. The id is a bank account identifier when the funding channel is direct debit.
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {ConfirmFundingInstrumentRequestDTO} [confirmFundingInstrumentRequestDTO] Confirm funding instrument
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        confirmFundingInstrumentId: async (clientHashId: string, customerHashId: string, fundingInstrumentId: string, xRequestId?: string, confirmFundingInstrumentRequestDTO?: ConfirmFundingInstrumentRequestDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'clientHashId' is not null or undefined
            assertParamExists('confirmFundingInstrumentId', 'clientHashId', clientHashId)
            // verify required parameter 'customerHashId' is not null or undefined
            assertParamExists('confirmFundingInstrumentId', 'customerHashId', customerHashId)
            // verify required parameter 'fundingInstrumentId' is not null or undefined
            assertParamExists('confirmFundingInstrumentId', 'fundingInstrumentId', fundingInstrumentId)
            const localVarPath = `/api/v1/client/{clientHashId}/customer/{customerHashId}/fundingInstruments/{fundingInstrumentId}/confirmFundingInstrument`
                .replace(`{${"clientHashId"}}`, encodeURIComponent(String(clientHashId)))
                .replace(`{${"customerHashId"}}`, encodeURIComponent(String(customerHashId)))
                .replace(`{${"fundingInstrumentId"}}`, encodeURIComponent(String(fundingInstrumentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication default required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (xRequestId != null) {
                localVarHeaderParameter['x-request-id'] = String(xRequestId);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(confirmFundingInstrumentRequestDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This API allows you to delete a specific funding instrument based on the fundingInstrumentId.
         * @summary Delete Funding Instrument
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} customerHashId Unique customer identifier generated on customer creation.
         * @param {string} fundingInstrumentId The unique 36-character alphanumeric identifier of a funding instrument.
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFundinginstrument: async (clientHashId: string, customerHashId: string, fundingInstrumentId: string, xRequestId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'clientHashId' is not null or undefined
            assertParamExists('deleteFundinginstrument', 'clientHashId', clientHashId)
            // verify required parameter 'customerHashId' is not null or undefined
            assertParamExists('deleteFundinginstrument', 'customerHashId', customerHashId)
            // verify required parameter 'fundingInstrumentId' is not null or undefined
            assertParamExists('deleteFundinginstrument', 'fundingInstrumentId', fundingInstrumentId)
            const localVarPath = `/api/v1/client/{clientHashId}/customer/{customerHashId}/fundingInstruments/{fundingInstrumentId}`
                .replace(`{${"clientHashId"}}`, encodeURIComponent(String(clientHashId)))
                .replace(`{${"customerHashId"}}`, encodeURIComponent(String(customerHashId)))
                .replace(`{${"fundingInstrumentId"}}`, encodeURIComponent(String(fundingInstrumentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication default required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (xRequestId != null) {
                localVarHeaderParameter['x-request-id'] = String(xRequestId);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This API allows you to top-up into the customer\'s wallet. Refer to the [Fund wallet user guide](/docs/fund-wallet) for details on usage instructions on this API.  >ℹ️ INFO   >**Guidelines for Fund Wallet.** >1. Cards and direct_debit funding channels are restricted by default. Reach out to your Nium support specialist to enable this functionality. >2. Source and destination should be in the same currency when funding channel is bank_transfer, cards, or direct_debit. >3. No restriction on source or destination currency if funding channel is prefund. 
         * @summary Fund Wallet
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} customerHashId Unique customer identifier generated on customer creation.
         * @param {string} walletHashId Unique wallet identifier generated simultaneously with customer creation.
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {WalletFundDTO} [walletFundDTO] Guidelines for Fund Wallet  1.cards as a funding channel is restricted by default. It may be enabled for a client on request. 2.Source and destination currencies should be same if funding channel is bankTransfer or cards 3.No restriction on source or destination currency if funding channel is prefund.  Fund Wallet with a Card  Customer onboarded and KYCed successfully [through Manual or eKYC flow] with e-KYC calls Fund Wallet API with funding channel as cards.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fundWallet: async (clientHashId: string, customerHashId: string, walletHashId: string, xRequestId?: string, walletFundDTO?: WalletFundDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'clientHashId' is not null or undefined
            assertParamExists('fundWallet', 'clientHashId', clientHashId)
            // verify required parameter 'customerHashId' is not null or undefined
            assertParamExists('fundWallet', 'customerHashId', customerHashId)
            // verify required parameter 'walletHashId' is not null or undefined
            assertParamExists('fundWallet', 'walletHashId', walletHashId)
            const localVarPath = `/api/v1/client/{clientHashId}/customer/{customerHashId}/wallet/{walletHashId}/fund`
                .replace(`{${"clientHashId"}}`, encodeURIComponent(String(clientHashId)))
                .replace(`{${"customerHashId"}}`, encodeURIComponent(String(customerHashId)))
                .replace(`{${"walletHashId"}}`, encodeURIComponent(String(walletHashId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication default required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (xRequestId != null) {
                localVarHeaderParameter['x-request-id'] = String(xRequestId);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(walletFundDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Funding instrument details
         * @summary Get Funding instrument details
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} customerHashId Unique customer identifier generated on customer creation.
         * @param {string} fundingInstrumentId Unique 36-character funding instrument identifier.
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFundingInstrumentDetails: async (clientHashId: string, customerHashId: string, fundingInstrumentId: string, xRequestId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'clientHashId' is not null or undefined
            assertParamExists('getFundingInstrumentDetails', 'clientHashId', clientHashId)
            // verify required parameter 'customerHashId' is not null or undefined
            assertParamExists('getFundingInstrumentDetails', 'customerHashId', customerHashId)
            // verify required parameter 'fundingInstrumentId' is not null or undefined
            assertParamExists('getFundingInstrumentDetails', 'fundingInstrumentId', fundingInstrumentId)
            const localVarPath = `/api/v1/client/{clientHashId}/customer/{customerHashId}/fundingInstruments/{fundingInstrumentId}/fundingInstrumentDetails`
                .replace(`{${"clientHashId"}}`, encodeURIComponent(String(clientHashId)))
                .replace(`{${"customerHashId"}}`, encodeURIComponent(String(customerHashId)))
                .replace(`{${"fundingInstrumentId"}}`, encodeURIComponent(String(fundingInstrumentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication default required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (xRequestId != null) {
                localVarHeaderParameter['x-request-id'] = String(xRequestId);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This API allows you to fetch the funding instruments that have been registered for a customer.
         * @summary Get Funding Instrument List
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} customerHashId Unique customer identifier generated on customer creation.
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFundingInstrumentList: async (clientHashId: string, customerHashId: string, xRequestId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'clientHashId' is not null or undefined
            assertParamExists('getFundingInstrumentList', 'clientHashId', clientHashId)
            // verify required parameter 'customerHashId' is not null or undefined
            assertParamExists('getFundingInstrumentList', 'customerHashId', customerHashId)
            const localVarPath = `/api/v1/client/{clientHashId}/customer/{customerHashId}/fundingInstruments`
                .replace(`{${"clientHashId"}}`, encodeURIComponent(String(clientHashId)))
                .replace(`{${"customerHashId"}}`, encodeURIComponent(String(customerHashId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication default required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (xRequestId != null) {
                localVarHeaderParameter['x-request-id'] = String(xRequestId);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CustomerFundingApi - functional programming interface
 * @export
 */
export const CustomerFundingApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CustomerFundingApiAxiosParamCreator(configuration)
    return {
        /**
         * This API allows you to link account
         * @summary Add funding instrument
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} customerHashId Unique customer identifier generated on customer creation.
         * @param {string} walletHashId Unique wallet identifier generated simultaneously with customer creation.
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {CustomerLinkAccountRequest} [customerLinkAccountRequest] Add a new funding instrument
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addFundingInstrument(clientHashId: string, customerHashId: string, walletHashId: string, xRequestId?: string, customerLinkAccountRequest?: CustomerLinkAccountRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LinkAccountResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addFundingInstrument(clientHashId, customerHashId, walletHashId, xRequestId, customerLinkAccountRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CustomerFundingApi.addFundingInstrument']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * This API allows you to confirm funding instrument id
         * @summary Confirm funding instrument
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} customerHashId Unique customer identifier generated on customer creation.
         * @param {string} fundingInstrumentId This field is the unique 36-character funding instrument identifier. The id is a bank account identifier when the funding channel is direct debit.
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {ConfirmFundingInstrumentRequestDTO} [confirmFundingInstrumentRequestDTO] Confirm funding instrument
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async confirmFundingInstrumentId(clientHashId: string, customerHashId: string, fundingInstrumentId: string, xRequestId?: string, confirmFundingInstrumentRequestDTO?: ConfirmFundingInstrumentRequestDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountStatusResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.confirmFundingInstrumentId(clientHashId, customerHashId, fundingInstrumentId, xRequestId, confirmFundingInstrumentRequestDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CustomerFundingApi.confirmFundingInstrumentId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * This API allows you to delete a specific funding instrument based on the fundingInstrumentId.
         * @summary Delete Funding Instrument
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} customerHashId Unique customer identifier generated on customer creation.
         * @param {string} fundingInstrumentId The unique 36-character alphanumeric identifier of a funding instrument.
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteFundinginstrument(clientHashId: string, customerHashId: string, fundingInstrumentId: string, xRequestId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseOfstring>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteFundinginstrument(clientHashId, customerHashId, fundingInstrumentId, xRequestId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CustomerFundingApi.deleteFundinginstrument']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * This API allows you to top-up into the customer\'s wallet. Refer to the [Fund wallet user guide](/docs/fund-wallet) for details on usage instructions on this API.  >ℹ️ INFO   >**Guidelines for Fund Wallet.** >1. Cards and direct_debit funding channels are restricted by default. Reach out to your Nium support specialist to enable this functionality. >2. Source and destination should be in the same currency when funding channel is bank_transfer, cards, or direct_debit. >3. No restriction on source or destination currency if funding channel is prefund. 
         * @summary Fund Wallet
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} customerHashId Unique customer identifier generated on customer creation.
         * @param {string} walletHashId Unique wallet identifier generated simultaneously with customer creation.
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {WalletFundDTO} [walletFundDTO] Guidelines for Fund Wallet  1.cards as a funding channel is restricted by default. It may be enabled for a client on request. 2.Source and destination currencies should be same if funding channel is bankTransfer or cards 3.No restriction on source or destination currency if funding channel is prefund.  Fund Wallet with a Card  Customer onboarded and KYCed successfully [through Manual or eKYC flow] with e-KYC calls Fund Wallet API with funding channel as cards.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fundWallet(clientHashId: string, customerHashId: string, walletHashId: string, xRequestId?: string, walletFundDTO?: WalletFundDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WalletFundResponseDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fundWallet(clientHashId, customerHashId, walletHashId, xRequestId, walletFundDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CustomerFundingApi.fundWallet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get Funding instrument details
         * @summary Get Funding instrument details
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} customerHashId Unique customer identifier generated on customer creation.
         * @param {string} fundingInstrumentId Unique 36-character funding instrument identifier.
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFundingInstrumentDetails(clientHashId: string, customerHashId: string, fundingInstrumentId: string, xRequestId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountStatusResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFundingInstrumentDetails(clientHashId, customerHashId, fundingInstrumentId, xRequestId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CustomerFundingApi.getFundingInstrumentDetails']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * This API allows you to fetch the funding instruments that have been registered for a customer.
         * @summary Get Funding Instrument List
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} customerHashId Unique customer identifier generated on customer creation.
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFundingInstrumentList(clientHashId: string, customerHashId: string, xRequestId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<WalletFundingInstrumentsResponseDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFundingInstrumentList(clientHashId, customerHashId, xRequestId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CustomerFundingApi.getFundingInstrumentList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CustomerFundingApi - factory interface
 * @export
 */
export const CustomerFundingApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CustomerFundingApiFp(configuration)
    return {
        /**
         * This API allows you to link account
         * @summary Add funding instrument
         * @param {CustomerFundingApiAddFundingInstrumentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addFundingInstrument(requestParameters: CustomerFundingApiAddFundingInstrumentRequest, options?: RawAxiosRequestConfig): AxiosPromise<LinkAccountResponse> {
            return localVarFp.addFundingInstrument(requestParameters.clientHashId, requestParameters.customerHashId, requestParameters.walletHashId, requestParameters.xRequestId, requestParameters.customerLinkAccountRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * This API allows you to confirm funding instrument id
         * @summary Confirm funding instrument
         * @param {CustomerFundingApiConfirmFundingInstrumentIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        confirmFundingInstrumentId(requestParameters: CustomerFundingApiConfirmFundingInstrumentIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<AccountStatusResponse> {
            return localVarFp.confirmFundingInstrumentId(requestParameters.clientHashId, requestParameters.customerHashId, requestParameters.fundingInstrumentId, requestParameters.xRequestId, requestParameters.confirmFundingInstrumentRequestDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * This API allows you to delete a specific funding instrument based on the fundingInstrumentId.
         * @summary Delete Funding Instrument
         * @param {CustomerFundingApiDeleteFundinginstrumentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFundinginstrument(requestParameters: CustomerFundingApiDeleteFundinginstrumentRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseOfstring> {
            return localVarFp.deleteFundinginstrument(requestParameters.clientHashId, requestParameters.customerHashId, requestParameters.fundingInstrumentId, requestParameters.xRequestId, options).then((request) => request(axios, basePath));
        },
        /**
         * This API allows you to top-up into the customer\'s wallet. Refer to the [Fund wallet user guide](/docs/fund-wallet) for details on usage instructions on this API.  >ℹ️ INFO   >**Guidelines for Fund Wallet.** >1. Cards and direct_debit funding channels are restricted by default. Reach out to your Nium support specialist to enable this functionality. >2. Source and destination should be in the same currency when funding channel is bank_transfer, cards, or direct_debit. >3. No restriction on source or destination currency if funding channel is prefund. 
         * @summary Fund Wallet
         * @param {CustomerFundingApiFundWalletRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fundWallet(requestParameters: CustomerFundingApiFundWalletRequest, options?: RawAxiosRequestConfig): AxiosPromise<WalletFundResponseDTO> {
            return localVarFp.fundWallet(requestParameters.clientHashId, requestParameters.customerHashId, requestParameters.walletHashId, requestParameters.xRequestId, requestParameters.walletFundDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Funding instrument details
         * @summary Get Funding instrument details
         * @param {CustomerFundingApiGetFundingInstrumentDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFundingInstrumentDetails(requestParameters: CustomerFundingApiGetFundingInstrumentDetailsRequest, options?: RawAxiosRequestConfig): AxiosPromise<AccountStatusResponse> {
            return localVarFp.getFundingInstrumentDetails(requestParameters.clientHashId, requestParameters.customerHashId, requestParameters.fundingInstrumentId, requestParameters.xRequestId, options).then((request) => request(axios, basePath));
        },
        /**
         * This API allows you to fetch the funding instruments that have been registered for a customer.
         * @summary Get Funding Instrument List
         * @param {CustomerFundingApiGetFundingInstrumentListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFundingInstrumentList(requestParameters: CustomerFundingApiGetFundingInstrumentListRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<WalletFundingInstrumentsResponseDTO>> {
            return localVarFp.getFundingInstrumentList(requestParameters.clientHashId, requestParameters.customerHashId, requestParameters.xRequestId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addFundingInstrument operation in CustomerFundingApi.
 * @export
 * @interface CustomerFundingApiAddFundingInstrumentRequest
 */
export interface CustomerFundingApiAddFundingInstrumentRequest {
    /**
     * Unique client identifier generated and shared before API handshake.
     * @type {string}
     * @memberof CustomerFundingApiAddFundingInstrument
     */
    readonly clientHashId: string

    /**
     * Unique customer identifier generated on customer creation.
     * @type {string}
     * @memberof CustomerFundingApiAddFundingInstrument
     */
    readonly customerHashId: string

    /**
     * Unique wallet identifier generated simultaneously with customer creation.
     * @type {string}
     * @memberof CustomerFundingApiAddFundingInstrument
     */
    readonly walletHashId: string

    /**
     * Enter a unique UUID value
     * @type {string}
     * @memberof CustomerFundingApiAddFundingInstrument
     */
    readonly xRequestId?: string

    /**
     * Add a new funding instrument
     * @type {CustomerLinkAccountRequest}
     * @memberof CustomerFundingApiAddFundingInstrument
     */
    readonly customerLinkAccountRequest?: CustomerLinkAccountRequest
}

/**
 * Request parameters for confirmFundingInstrumentId operation in CustomerFundingApi.
 * @export
 * @interface CustomerFundingApiConfirmFundingInstrumentIdRequest
 */
export interface CustomerFundingApiConfirmFundingInstrumentIdRequest {
    /**
     * Unique client identifier generated and shared before API handshake.
     * @type {string}
     * @memberof CustomerFundingApiConfirmFundingInstrumentId
     */
    readonly clientHashId: string

    /**
     * Unique customer identifier generated on customer creation.
     * @type {string}
     * @memberof CustomerFundingApiConfirmFundingInstrumentId
     */
    readonly customerHashId: string

    /**
     * This field is the unique 36-character funding instrument identifier. The id is a bank account identifier when the funding channel is direct debit.
     * @type {string}
     * @memberof CustomerFundingApiConfirmFundingInstrumentId
     */
    readonly fundingInstrumentId: string

    /**
     * Enter a unique UUID value
     * @type {string}
     * @memberof CustomerFundingApiConfirmFundingInstrumentId
     */
    readonly xRequestId?: string

    /**
     * Confirm funding instrument
     * @type {ConfirmFundingInstrumentRequestDTO}
     * @memberof CustomerFundingApiConfirmFundingInstrumentId
     */
    readonly confirmFundingInstrumentRequestDTO?: ConfirmFundingInstrumentRequestDTO
}

/**
 * Request parameters for deleteFundinginstrument operation in CustomerFundingApi.
 * @export
 * @interface CustomerFundingApiDeleteFundinginstrumentRequest
 */
export interface CustomerFundingApiDeleteFundinginstrumentRequest {
    /**
     * Unique client identifier generated and shared before API handshake.
     * @type {string}
     * @memberof CustomerFundingApiDeleteFundinginstrument
     */
    readonly clientHashId: string

    /**
     * Unique customer identifier generated on customer creation.
     * @type {string}
     * @memberof CustomerFundingApiDeleteFundinginstrument
     */
    readonly customerHashId: string

    /**
     * The unique 36-character alphanumeric identifier of a funding instrument.
     * @type {string}
     * @memberof CustomerFundingApiDeleteFundinginstrument
     */
    readonly fundingInstrumentId: string

    /**
     * Enter a unique UUID value
     * @type {string}
     * @memberof CustomerFundingApiDeleteFundinginstrument
     */
    readonly xRequestId?: string
}

/**
 * Request parameters for fundWallet operation in CustomerFundingApi.
 * @export
 * @interface CustomerFundingApiFundWalletRequest
 */
export interface CustomerFundingApiFundWalletRequest {
    /**
     * Unique client identifier generated and shared before API handshake.
     * @type {string}
     * @memberof CustomerFundingApiFundWallet
     */
    readonly clientHashId: string

    /**
     * Unique customer identifier generated on customer creation.
     * @type {string}
     * @memberof CustomerFundingApiFundWallet
     */
    readonly customerHashId: string

    /**
     * Unique wallet identifier generated simultaneously with customer creation.
     * @type {string}
     * @memberof CustomerFundingApiFundWallet
     */
    readonly walletHashId: string

    /**
     * Enter a unique UUID value
     * @type {string}
     * @memberof CustomerFundingApiFundWallet
     */
    readonly xRequestId?: string

    /**
     * Guidelines for Fund Wallet  1.cards as a funding channel is restricted by default. It may be enabled for a client on request. 2.Source and destination currencies should be same if funding channel is bankTransfer or cards 3.No restriction on source or destination currency if funding channel is prefund.  Fund Wallet with a Card  Customer onboarded and KYCed successfully [through Manual or eKYC flow] with e-KYC calls Fund Wallet API with funding channel as cards.
     * @type {WalletFundDTO}
     * @memberof CustomerFundingApiFundWallet
     */
    readonly walletFundDTO?: WalletFundDTO
}

/**
 * Request parameters for getFundingInstrumentDetails operation in CustomerFundingApi.
 * @export
 * @interface CustomerFundingApiGetFundingInstrumentDetailsRequest
 */
export interface CustomerFundingApiGetFundingInstrumentDetailsRequest {
    /**
     * Unique client identifier generated and shared before API handshake.
     * @type {string}
     * @memberof CustomerFundingApiGetFundingInstrumentDetails
     */
    readonly clientHashId: string

    /**
     * Unique customer identifier generated on customer creation.
     * @type {string}
     * @memberof CustomerFundingApiGetFundingInstrumentDetails
     */
    readonly customerHashId: string

    /**
     * Unique 36-character funding instrument identifier.
     * @type {string}
     * @memberof CustomerFundingApiGetFundingInstrumentDetails
     */
    readonly fundingInstrumentId: string

    /**
     * Enter a unique UUID value
     * @type {string}
     * @memberof CustomerFundingApiGetFundingInstrumentDetails
     */
    readonly xRequestId?: string
}

/**
 * Request parameters for getFundingInstrumentList operation in CustomerFundingApi.
 * @export
 * @interface CustomerFundingApiGetFundingInstrumentListRequest
 */
export interface CustomerFundingApiGetFundingInstrumentListRequest {
    /**
     * Unique client identifier generated and shared before API handshake.
     * @type {string}
     * @memberof CustomerFundingApiGetFundingInstrumentList
     */
    readonly clientHashId: string

    /**
     * Unique customer identifier generated on customer creation.
     * @type {string}
     * @memberof CustomerFundingApiGetFundingInstrumentList
     */
    readonly customerHashId: string

    /**
     * Enter a unique UUID value
     * @type {string}
     * @memberof CustomerFundingApiGetFundingInstrumentList
     */
    readonly xRequestId?: string
}

/**
 * CustomerFundingApi - object-oriented interface
 * @export
 * @class CustomerFundingApi
 * @extends {BaseAPI}
 */
export class CustomerFundingApi extends BaseAPI {
    /**
     * This API allows you to link account
     * @summary Add funding instrument
     * @param {CustomerFundingApiAddFundingInstrumentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerFundingApi
     */
    public addFundingInstrument(requestParameters: CustomerFundingApiAddFundingInstrumentRequest, options?: RawAxiosRequestConfig) {
        return CustomerFundingApiFp(this.configuration).addFundingInstrument(requestParameters.clientHashId, requestParameters.customerHashId, requestParameters.walletHashId, requestParameters.xRequestId, requestParameters.customerLinkAccountRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This API allows you to confirm funding instrument id
     * @summary Confirm funding instrument
     * @param {CustomerFundingApiConfirmFundingInstrumentIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerFundingApi
     */
    public confirmFundingInstrumentId(requestParameters: CustomerFundingApiConfirmFundingInstrumentIdRequest, options?: RawAxiosRequestConfig) {
        return CustomerFundingApiFp(this.configuration).confirmFundingInstrumentId(requestParameters.clientHashId, requestParameters.customerHashId, requestParameters.fundingInstrumentId, requestParameters.xRequestId, requestParameters.confirmFundingInstrumentRequestDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This API allows you to delete a specific funding instrument based on the fundingInstrumentId.
     * @summary Delete Funding Instrument
     * @param {CustomerFundingApiDeleteFundinginstrumentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerFundingApi
     */
    public deleteFundinginstrument(requestParameters: CustomerFundingApiDeleteFundinginstrumentRequest, options?: RawAxiosRequestConfig) {
        return CustomerFundingApiFp(this.configuration).deleteFundinginstrument(requestParameters.clientHashId, requestParameters.customerHashId, requestParameters.fundingInstrumentId, requestParameters.xRequestId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This API allows you to top-up into the customer\'s wallet. Refer to the [Fund wallet user guide](/docs/fund-wallet) for details on usage instructions on this API.  >ℹ️ INFO   >**Guidelines for Fund Wallet.** >1. Cards and direct_debit funding channels are restricted by default. Reach out to your Nium support specialist to enable this functionality. >2. Source and destination should be in the same currency when funding channel is bank_transfer, cards, or direct_debit. >3. No restriction on source or destination currency if funding channel is prefund. 
     * @summary Fund Wallet
     * @param {CustomerFundingApiFundWalletRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerFundingApi
     */
    public fundWallet(requestParameters: CustomerFundingApiFundWalletRequest, options?: RawAxiosRequestConfig) {
        return CustomerFundingApiFp(this.configuration).fundWallet(requestParameters.clientHashId, requestParameters.customerHashId, requestParameters.walletHashId, requestParameters.xRequestId, requestParameters.walletFundDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Funding instrument details
     * @summary Get Funding instrument details
     * @param {CustomerFundingApiGetFundingInstrumentDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerFundingApi
     */
    public getFundingInstrumentDetails(requestParameters: CustomerFundingApiGetFundingInstrumentDetailsRequest, options?: RawAxiosRequestConfig) {
        return CustomerFundingApiFp(this.configuration).getFundingInstrumentDetails(requestParameters.clientHashId, requestParameters.customerHashId, requestParameters.fundingInstrumentId, requestParameters.xRequestId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This API allows you to fetch the funding instruments that have been registered for a customer.
     * @summary Get Funding Instrument List
     * @param {CustomerFundingApiGetFundingInstrumentListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerFundingApi
     */
    public getFundingInstrumentList(requestParameters: CustomerFundingApiGetFundingInstrumentListRequest, options?: RawAxiosRequestConfig) {
        return CustomerFundingApiFp(this.configuration).getFundingInstrumentList(requestParameters.clientHashId, requestParameters.customerHashId, requestParameters.xRequestId, options).then((request) => request(this.axios, this.basePath));
    }
}

