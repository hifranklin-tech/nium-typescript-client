/* tslint:disable */
/* eslint-disable */
/**
 * NIUM Platform
 * NIUM Platform
 *
 * The version of the OpenAPI document: 2023.12.12
 * Contact: experience@nium.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import { ApiError2 } from '../model';
// @ts-ignore
import { ApiResponseOfWalletRefundResponseDTO } from '../model';
// @ts-ignore
import { CustomerCardWidgetTokenRequestDTO } from '../model';
// @ts-ignore
import { CustomerCardWidgetTokenResponse } from '../model';
// @ts-ignore
import { PayoutCustomerApiError } from '../model';
// @ts-ignore
import { PurposeCodeResponseDTO } from '../model';
// @ts-ignore
import { RemittanceEventsResponseDTO2 } from '../model';
// @ts-ignore
import { RemittanceResponseDTO } from '../model';
// @ts-ignore
import { RemittanceTransactionsRequestDTO } from '../model';
// @ts-ignore
import { UploadRfiDetailsResponseDTO } from '../model';
// @ts-ignore
import { UploadRfiDocumentRequestDTO } from '../model';
// @ts-ignore
import { WalletApiError } from '../model';
// @ts-ignore
import { WalletRefundRequestDTO } from '../model';
/**
 * PayoutApi - axios parameter creator
 * @export
 */
export const PayoutApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This API allows you to use NIUM’s card widget to tokenize beneficiary card details. Non-PCI DSS compliant Clients are expected to integrate with this new API to get beneficiary’s encrypted card token number. This token number needs to be passed in field encryptedBeneficiaryCardToken while adding a beneficiary to make a payout to card.
         * @summary Get Card Widget
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} customerHashId Unique customer identifier generated during customer creation.
         * @param {CustomerCardWidgetTokenRequestDTO} customerCardWidgetTokenRequestDTO cardWidgetTokenRequestDTO
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerGetCardWidget: async (clientHashId: string, customerHashId: string, customerCardWidgetTokenRequestDTO: CustomerCardWidgetTokenRequestDTO, xRequestId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'clientHashId' is not null or undefined
            assertParamExists('customerGetCardWidget', 'clientHashId', clientHashId)
            // verify required parameter 'customerHashId' is not null or undefined
            assertParamExists('customerGetCardWidget', 'customerHashId', customerHashId)
            // verify required parameter 'customerCardWidgetTokenRequestDTO' is not null or undefined
            assertParamExists('customerGetCardWidget', 'customerCardWidgetTokenRequestDTO', customerCardWidgetTokenRequestDTO)
            const localVarPath = `/api/v1/client/{clientHashId}/customer/{customerHashId}/widget/token`
                .replace(`{${"clientHashId"}}`, encodeURIComponent(String(clientHashId)))
                .replace(`{${"customerHashId"}}`, encodeURIComponent(String(customerHashId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication default required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (xRequestId != null) {
                localVarHeaderParameter['x-request-id'] = String(xRequestId);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(customerCardWidgetTokenRequestDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This API allows you to fetch the Remittance Life Cycle Status along with Payment Reference Number, Partner Reference Number, System Reference Number, Date and Time of the Remittance status based on the System Reference Number provided in the input.
         * @summary Fetch Remittance Life Cycle Status
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} customerHashId Unique customer identifier generated on customer creation.
         * @param {string} systemReferenceNumber This is a unique system reference number generated by card issuance platform for the transaction.
         * @param {string} walletHashId Unique wallet identifier generated simultaneously with customer creation.
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchRemittanceLifeCycleStatus: async (clientHashId: string, customerHashId: string, systemReferenceNumber: string, walletHashId: string, xRequestId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'clientHashId' is not null or undefined
            assertParamExists('fetchRemittanceLifeCycleStatus', 'clientHashId', clientHashId)
            // verify required parameter 'customerHashId' is not null or undefined
            assertParamExists('fetchRemittanceLifeCycleStatus', 'customerHashId', customerHashId)
            // verify required parameter 'systemReferenceNumber' is not null or undefined
            assertParamExists('fetchRemittanceLifeCycleStatus', 'systemReferenceNumber', systemReferenceNumber)
            // verify required parameter 'walletHashId' is not null or undefined
            assertParamExists('fetchRemittanceLifeCycleStatus', 'walletHashId', walletHashId)
            const localVarPath = `/api/v1/client/{clientHashId}/customer/{customerHashId}/wallet/{walletHashId}/remittance/{systemReferenceNumber}/audit`
                .replace(`{${"clientHashId"}}`, encodeURIComponent(String(clientHashId)))
                .replace(`{${"customerHashId"}}`, encodeURIComponent(String(customerHashId)))
                .replace(`{${"systemReferenceNumber"}}`, encodeURIComponent(String(systemReferenceNumber)))
                .replace(`{${"walletHashId"}}`, encodeURIComponent(String(walletHashId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication default required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (xRequestId != null) {
                localVarHeaderParameter['x-request-id'] = String(xRequestId);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This API allows you to download a proof of payment receipt against a transaction.
         * @summary Get Proof Of Payment
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} customerHashId Unique customer identifier generated on customer creation.
         * @param {string} systemReferenceNumber Unique System Reference Number generated on Transfer Money request.
         * @param {string} walletHashId Unique wallet identifier generated simultaneously with customer creation.
         * @param {string} [xRequestId] Enter a unique UUID value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        poP: async (clientHashId: string, customerHashId: string, systemReferenceNumber: string, walletHashId: string, xRequestId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'clientHashId' is not null or undefined
            assertParamExists('poP', 'clientHashId', clientHashId)
            // verify required parameter 'customerHashId' is not null or undefined
            assertParamExists('poP', 'customerHashId', customerHashId)
            // verify required parameter 'systemReferenceNumber' is not null or undefined
            assertParamExists('poP', 'systemReferenceNumber', systemReferenceNumber)
            // verify required parameter 'walletHashId' is not null or undefined
            assertParamExists('poP', 'walletHashId', walletHashId)
            const localVarPath = `/api/v1/client/{clientHashId}/customer/{customerHashId}/wallet/{walletHashId}/remittance/{systemReferenceNumber}/receipt`
                .replace(`{${"clientHashId"}}`, encodeURIComponent(String(clientHashId)))
                .replace(`{${"customerHashId"}}`, encodeURIComponent(String(customerHashId)))
                .replace(`{${"systemReferenceNumber"}}`, encodeURIComponent(String(systemReferenceNumber)))
                .replace(`{${"walletHashId"}}`, encodeURIComponent(String(walletHashId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication default required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (xRequestId != null) {
                localVarHeaderParameter['x-request-id'] = String(xRequestId);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This API will allow you to fetch the list of purpose of transfer.
         * @summary Purpose of Transfer
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        purposeofTransfer: async (xRequestId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/remittance/purposeCodes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication default required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (xRequestId != null) {
                localVarHeaderParameter['x-request-id'] = String(xRequestId);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This API allows you to respond to an RFI raised for a transaction.
         * @summary Respond to Transaction RFI
         * @param {string} authCode Authorization code of the transaction.
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} customerHashId Unique customer identifier generated on customer creation.
         * @param {string} walletHashId Unique wallet identifier generated simultaneously with customer creation.
         * @param {UploadRfiDocumentRequestDTO} uploadRfiDocumentRequestDTO uploadRfiDocumentRequestDTO
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        respondtoTransactionRFI: async (authCode: string, clientHashId: string, customerHashId: string, walletHashId: string, uploadRfiDocumentRequestDTO: UploadRfiDocumentRequestDTO, xRequestId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authCode' is not null or undefined
            assertParamExists('respondtoTransactionRFI', 'authCode', authCode)
            // verify required parameter 'clientHashId' is not null or undefined
            assertParamExists('respondtoTransactionRFI', 'clientHashId', clientHashId)
            // verify required parameter 'customerHashId' is not null or undefined
            assertParamExists('respondtoTransactionRFI', 'customerHashId', customerHashId)
            // verify required parameter 'walletHashId' is not null or undefined
            assertParamExists('respondtoTransactionRFI', 'walletHashId', walletHashId)
            // verify required parameter 'uploadRfiDocumentRequestDTO' is not null or undefined
            assertParamExists('respondtoTransactionRFI', 'uploadRfiDocumentRequestDTO', uploadRfiDocumentRequestDTO)
            const localVarPath = `/api/v1/client/{clientHashId}/customer/{customerHashId}/wallet/{walletHashId}/transactions/{authCode}/rfi/upload`
                .replace(`{${"authCode"}}`, encodeURIComponent(String(authCode)))
                .replace(`{${"clientHashId"}}`, encodeURIComponent(String(clientHashId)))
                .replace(`{${"customerHashId"}}`, encodeURIComponent(String(customerHashId)))
                .replace(`{${"walletHashId"}}`, encodeURIComponent(String(walletHashId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication default required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (xRequestId != null) {
                localVarHeaderParameter['x-request-id'] = String(xRequestId);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(uploadRfiDocumentRequestDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This API will allow you to send money to the registered beneficiary.
         * @summary Transfer Money
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} customerHashId Unique customer identifier generated on customer creation.
         * @param {string} walletHashId Unique wallet identifier generated simultaneously with customer creation.
         * @param {RemittanceTransactionsRequestDTO} remittanceTransactionsRequestDTO remittanceTransactionsRequestDTO
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferMoney: async (clientHashId: string, customerHashId: string, walletHashId: string, remittanceTransactionsRequestDTO: RemittanceTransactionsRequestDTO, xRequestId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'clientHashId' is not null or undefined
            assertParamExists('transferMoney', 'clientHashId', clientHashId)
            // verify required parameter 'customerHashId' is not null or undefined
            assertParamExists('transferMoney', 'customerHashId', customerHashId)
            // verify required parameter 'walletHashId' is not null or undefined
            assertParamExists('transferMoney', 'walletHashId', walletHashId)
            // verify required parameter 'remittanceTransactionsRequestDTO' is not null or undefined
            assertParamExists('transferMoney', 'remittanceTransactionsRequestDTO', remittanceTransactionsRequestDTO)
            const localVarPath = `/api/v1/client/{clientHashId}/customer/{customerHashId}/wallet/{walletHashId}/remittance`
                .replace(`{${"clientHashId"}}`, encodeURIComponent(String(clientHashId)))
                .replace(`{${"customerHashId"}}`, encodeURIComponent(String(customerHashId)))
                .replace(`{${"walletHashId"}}`, encodeURIComponent(String(walletHashId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication default required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (xRequestId != null) {
                localVarHeaderParameter['x-request-id'] = String(xRequestId);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(remittanceTransactionsRequestDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This API allows you to withdraw funds from the customer\'s wallet.
         * @summary Withdraw Funds from Wallet
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} customerHashId Unique customer identifier generated on customer creation.
         * @param {string} walletHashId Unique wallet identifier generated simultaneously with customer creation.
         * @param {WalletRefundRequestDTO} walletRefundRequestDTO walletRefundRequestDTO
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        withdrawFundsFromWallet: async (clientHashId: string, customerHashId: string, walletHashId: string, walletRefundRequestDTO: WalletRefundRequestDTO, xRequestId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'clientHashId' is not null or undefined
            assertParamExists('withdrawFundsFromWallet', 'clientHashId', clientHashId)
            // verify required parameter 'customerHashId' is not null or undefined
            assertParamExists('withdrawFundsFromWallet', 'customerHashId', customerHashId)
            // verify required parameter 'walletHashId' is not null or undefined
            assertParamExists('withdrawFundsFromWallet', 'walletHashId', walletHashId)
            // verify required parameter 'walletRefundRequestDTO' is not null or undefined
            assertParamExists('withdrawFundsFromWallet', 'walletRefundRequestDTO', walletRefundRequestDTO)
            const localVarPath = `/api/v1/client/{clientHashId}/customer/{customerHashId}/wallet/{walletHashId}/refund`
                .replace(`{${"clientHashId"}}`, encodeURIComponent(String(clientHashId)))
                .replace(`{${"customerHashId"}}`, encodeURIComponent(String(customerHashId)))
                .replace(`{${"walletHashId"}}`, encodeURIComponent(String(walletHashId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication default required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (xRequestId != null) {
                localVarHeaderParameter['x-request-id'] = String(xRequestId);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(walletRefundRequestDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PayoutApi - functional programming interface
 * @export
 */
export const PayoutApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PayoutApiAxiosParamCreator(configuration)
    return {
        /**
         * This API allows you to use NIUM’s card widget to tokenize beneficiary card details. Non-PCI DSS compliant Clients are expected to integrate with this new API to get beneficiary’s encrypted card token number. This token number needs to be passed in field encryptedBeneficiaryCardToken while adding a beneficiary to make a payout to card.
         * @summary Get Card Widget
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} customerHashId Unique customer identifier generated during customer creation.
         * @param {CustomerCardWidgetTokenRequestDTO} customerCardWidgetTokenRequestDTO cardWidgetTokenRequestDTO
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerGetCardWidget(clientHashId: string, customerHashId: string, customerCardWidgetTokenRequestDTO: CustomerCardWidgetTokenRequestDTO, xRequestId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerCardWidgetTokenResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerGetCardWidget(clientHashId, customerHashId, customerCardWidgetTokenRequestDTO, xRequestId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PayoutApi.customerGetCardWidget']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * This API allows you to fetch the Remittance Life Cycle Status along with Payment Reference Number, Partner Reference Number, System Reference Number, Date and Time of the Remittance status based on the System Reference Number provided in the input.
         * @summary Fetch Remittance Life Cycle Status
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} customerHashId Unique customer identifier generated on customer creation.
         * @param {string} systemReferenceNumber This is a unique system reference number generated by card issuance platform for the transaction.
         * @param {string} walletHashId Unique wallet identifier generated simultaneously with customer creation.
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchRemittanceLifeCycleStatus(clientHashId: string, customerHashId: string, systemReferenceNumber: string, walletHashId: string, xRequestId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<RemittanceEventsResponseDTO2>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchRemittanceLifeCycleStatus(clientHashId, customerHashId, systemReferenceNumber, walletHashId, xRequestId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PayoutApi.fetchRemittanceLifeCycleStatus']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * This API allows you to download a proof of payment receipt against a transaction.
         * @summary Get Proof Of Payment
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} customerHashId Unique customer identifier generated on customer creation.
         * @param {string} systemReferenceNumber Unique System Reference Number generated on Transfer Money request.
         * @param {string} walletHashId Unique wallet identifier generated simultaneously with customer creation.
         * @param {string} [xRequestId] Enter a unique UUID value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async poP(clientHashId: string, customerHashId: string, systemReferenceNumber: string, walletHashId: string, xRequestId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.poP(clientHashId, customerHashId, systemReferenceNumber, walletHashId, xRequestId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PayoutApi.poP']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * This API will allow you to fetch the list of purpose of transfer.
         * @summary Purpose of Transfer
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async purposeofTransfer(xRequestId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PurposeCodeResponseDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.purposeofTransfer(xRequestId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PayoutApi.purposeofTransfer']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * This API allows you to respond to an RFI raised for a transaction.
         * @summary Respond to Transaction RFI
         * @param {string} authCode Authorization code of the transaction.
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} customerHashId Unique customer identifier generated on customer creation.
         * @param {string} walletHashId Unique wallet identifier generated simultaneously with customer creation.
         * @param {UploadRfiDocumentRequestDTO} uploadRfiDocumentRequestDTO uploadRfiDocumentRequestDTO
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async respondtoTransactionRFI(authCode: string, clientHashId: string, customerHashId: string, walletHashId: string, uploadRfiDocumentRequestDTO: UploadRfiDocumentRequestDTO, xRequestId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UploadRfiDetailsResponseDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.respondtoTransactionRFI(authCode, clientHashId, customerHashId, walletHashId, uploadRfiDocumentRequestDTO, xRequestId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PayoutApi.respondtoTransactionRFI']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * This API will allow you to send money to the registered beneficiary.
         * @summary Transfer Money
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} customerHashId Unique customer identifier generated on customer creation.
         * @param {string} walletHashId Unique wallet identifier generated simultaneously with customer creation.
         * @param {RemittanceTransactionsRequestDTO} remittanceTransactionsRequestDTO remittanceTransactionsRequestDTO
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async transferMoney(clientHashId: string, customerHashId: string, walletHashId: string, remittanceTransactionsRequestDTO: RemittanceTransactionsRequestDTO, xRequestId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RemittanceResponseDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.transferMoney(clientHashId, customerHashId, walletHashId, remittanceTransactionsRequestDTO, xRequestId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PayoutApi.transferMoney']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * This API allows you to withdraw funds from the customer\'s wallet.
         * @summary Withdraw Funds from Wallet
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} customerHashId Unique customer identifier generated on customer creation.
         * @param {string} walletHashId Unique wallet identifier generated simultaneously with customer creation.
         * @param {WalletRefundRequestDTO} walletRefundRequestDTO walletRefundRequestDTO
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async withdrawFundsFromWallet(clientHashId: string, customerHashId: string, walletHashId: string, walletRefundRequestDTO: WalletRefundRequestDTO, xRequestId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseOfWalletRefundResponseDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.withdrawFundsFromWallet(clientHashId, customerHashId, walletHashId, walletRefundRequestDTO, xRequestId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PayoutApi.withdrawFundsFromWallet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * PayoutApi - factory interface
 * @export
 */
export const PayoutApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PayoutApiFp(configuration)
    return {
        /**
         * This API allows you to use NIUM’s card widget to tokenize beneficiary card details. Non-PCI DSS compliant Clients are expected to integrate with this new API to get beneficiary’s encrypted card token number. This token number needs to be passed in field encryptedBeneficiaryCardToken while adding a beneficiary to make a payout to card.
         * @summary Get Card Widget
         * @param {PayoutApiCustomerGetCardWidgetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerGetCardWidget(requestParameters: PayoutApiCustomerGetCardWidgetRequest, options?: RawAxiosRequestConfig): AxiosPromise<CustomerCardWidgetTokenResponse> {
            return localVarFp.customerGetCardWidget(requestParameters.clientHashId, requestParameters.customerHashId, requestParameters.customerCardWidgetTokenRequestDTO, requestParameters.xRequestId, options).then((request) => request(axios, basePath));
        },
        /**
         * This API allows you to fetch the Remittance Life Cycle Status along with Payment Reference Number, Partner Reference Number, System Reference Number, Date and Time of the Remittance status based on the System Reference Number provided in the input.
         * @summary Fetch Remittance Life Cycle Status
         * @param {PayoutApiFetchRemittanceLifeCycleStatusRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchRemittanceLifeCycleStatus(requestParameters: PayoutApiFetchRemittanceLifeCycleStatusRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<RemittanceEventsResponseDTO2>> {
            return localVarFp.fetchRemittanceLifeCycleStatus(requestParameters.clientHashId, requestParameters.customerHashId, requestParameters.systemReferenceNumber, requestParameters.walletHashId, requestParameters.xRequestId, options).then((request) => request(axios, basePath));
        },
        /**
         * This API allows you to download a proof of payment receipt against a transaction.
         * @summary Get Proof Of Payment
         * @param {PayoutApiPoPRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        poP(requestParameters: PayoutApiPoPRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.poP(requestParameters.clientHashId, requestParameters.customerHashId, requestParameters.systemReferenceNumber, requestParameters.walletHashId, requestParameters.xRequestId, options).then((request) => request(axios, basePath));
        },
        /**
         * This API will allow you to fetch the list of purpose of transfer.
         * @summary Purpose of Transfer
         * @param {PayoutApiPurposeofTransferRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        purposeofTransfer(requestParameters: PayoutApiPurposeofTransferRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<Array<PurposeCodeResponseDTO>> {
            return localVarFp.purposeofTransfer(requestParameters.xRequestId, options).then((request) => request(axios, basePath));
        },
        /**
         * This API allows you to respond to an RFI raised for a transaction.
         * @summary Respond to Transaction RFI
         * @param {PayoutApiRespondtoTransactionRFIRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        respondtoTransactionRFI(requestParameters: PayoutApiRespondtoTransactionRFIRequest, options?: RawAxiosRequestConfig): AxiosPromise<UploadRfiDetailsResponseDTO> {
            return localVarFp.respondtoTransactionRFI(requestParameters.authCode, requestParameters.clientHashId, requestParameters.customerHashId, requestParameters.walletHashId, requestParameters.uploadRfiDocumentRequestDTO, requestParameters.xRequestId, options).then((request) => request(axios, basePath));
        },
        /**
         * This API will allow you to send money to the registered beneficiary.
         * @summary Transfer Money
         * @param {PayoutApiTransferMoneyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferMoney(requestParameters: PayoutApiTransferMoneyRequest, options?: RawAxiosRequestConfig): AxiosPromise<RemittanceResponseDTO> {
            return localVarFp.transferMoney(requestParameters.clientHashId, requestParameters.customerHashId, requestParameters.walletHashId, requestParameters.remittanceTransactionsRequestDTO, requestParameters.xRequestId, options).then((request) => request(axios, basePath));
        },
        /**
         * This API allows you to withdraw funds from the customer\'s wallet.
         * @summary Withdraw Funds from Wallet
         * @param {PayoutApiWithdrawFundsFromWalletRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        withdrawFundsFromWallet(requestParameters: PayoutApiWithdrawFundsFromWalletRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseOfWalletRefundResponseDTO> {
            return localVarFp.withdrawFundsFromWallet(requestParameters.clientHashId, requestParameters.customerHashId, requestParameters.walletHashId, requestParameters.walletRefundRequestDTO, requestParameters.xRequestId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for customerGetCardWidget operation in PayoutApi.
 * @export
 * @interface PayoutApiCustomerGetCardWidgetRequest
 */
export interface PayoutApiCustomerGetCardWidgetRequest {
    /**
     * Unique client identifier generated and shared before API handshake.
     * @type {string}
     * @memberof PayoutApiCustomerGetCardWidget
     */
    readonly clientHashId: string

    /**
     * Unique customer identifier generated during customer creation.
     * @type {string}
     * @memberof PayoutApiCustomerGetCardWidget
     */
    readonly customerHashId: string

    /**
     * cardWidgetTokenRequestDTO
     * @type {CustomerCardWidgetTokenRequestDTO}
     * @memberof PayoutApiCustomerGetCardWidget
     */
    readonly customerCardWidgetTokenRequestDTO: CustomerCardWidgetTokenRequestDTO

    /**
     * Enter a unique UUID value
     * @type {string}
     * @memberof PayoutApiCustomerGetCardWidget
     */
    readonly xRequestId?: string
}

/**
 * Request parameters for fetchRemittanceLifeCycleStatus operation in PayoutApi.
 * @export
 * @interface PayoutApiFetchRemittanceLifeCycleStatusRequest
 */
export interface PayoutApiFetchRemittanceLifeCycleStatusRequest {
    /**
     * Unique client identifier generated and shared before API handshake.
     * @type {string}
     * @memberof PayoutApiFetchRemittanceLifeCycleStatus
     */
    readonly clientHashId: string

    /**
     * Unique customer identifier generated on customer creation.
     * @type {string}
     * @memberof PayoutApiFetchRemittanceLifeCycleStatus
     */
    readonly customerHashId: string

    /**
     * This is a unique system reference number generated by card issuance platform for the transaction.
     * @type {string}
     * @memberof PayoutApiFetchRemittanceLifeCycleStatus
     */
    readonly systemReferenceNumber: string

    /**
     * Unique wallet identifier generated simultaneously with customer creation.
     * @type {string}
     * @memberof PayoutApiFetchRemittanceLifeCycleStatus
     */
    readonly walletHashId: string

    /**
     * Enter a unique UUID value
     * @type {string}
     * @memberof PayoutApiFetchRemittanceLifeCycleStatus
     */
    readonly xRequestId?: string
}

/**
 * Request parameters for poP operation in PayoutApi.
 * @export
 * @interface PayoutApiPoPRequest
 */
export interface PayoutApiPoPRequest {
    /**
     * Unique client identifier generated and shared before API handshake.
     * @type {string}
     * @memberof PayoutApiPoP
     */
    readonly clientHashId: string

    /**
     * Unique customer identifier generated on customer creation.
     * @type {string}
     * @memberof PayoutApiPoP
     */
    readonly customerHashId: string

    /**
     * Unique System Reference Number generated on Transfer Money request.
     * @type {string}
     * @memberof PayoutApiPoP
     */
    readonly systemReferenceNumber: string

    /**
     * Unique wallet identifier generated simultaneously with customer creation.
     * @type {string}
     * @memberof PayoutApiPoP
     */
    readonly walletHashId: string

    /**
     * Enter a unique UUID value.
     * @type {string}
     * @memberof PayoutApiPoP
     */
    readonly xRequestId?: string
}

/**
 * Request parameters for purposeofTransfer operation in PayoutApi.
 * @export
 * @interface PayoutApiPurposeofTransferRequest
 */
export interface PayoutApiPurposeofTransferRequest {
    /**
     * Enter a unique UUID value
     * @type {string}
     * @memberof PayoutApiPurposeofTransfer
     */
    readonly xRequestId?: string
}

/**
 * Request parameters for respondtoTransactionRFI operation in PayoutApi.
 * @export
 * @interface PayoutApiRespondtoTransactionRFIRequest
 */
export interface PayoutApiRespondtoTransactionRFIRequest {
    /**
     * Authorization code of the transaction.
     * @type {string}
     * @memberof PayoutApiRespondtoTransactionRFI
     */
    readonly authCode: string

    /**
     * Unique client identifier generated and shared before API handshake.
     * @type {string}
     * @memberof PayoutApiRespondtoTransactionRFI
     */
    readonly clientHashId: string

    /**
     * Unique customer identifier generated on customer creation.
     * @type {string}
     * @memberof PayoutApiRespondtoTransactionRFI
     */
    readonly customerHashId: string

    /**
     * Unique wallet identifier generated simultaneously with customer creation.
     * @type {string}
     * @memberof PayoutApiRespondtoTransactionRFI
     */
    readonly walletHashId: string

    /**
     * uploadRfiDocumentRequestDTO
     * @type {UploadRfiDocumentRequestDTO}
     * @memberof PayoutApiRespondtoTransactionRFI
     */
    readonly uploadRfiDocumentRequestDTO: UploadRfiDocumentRequestDTO

    /**
     * Enter a unique UUID value
     * @type {string}
     * @memberof PayoutApiRespondtoTransactionRFI
     */
    readonly xRequestId?: string
}

/**
 * Request parameters for transferMoney operation in PayoutApi.
 * @export
 * @interface PayoutApiTransferMoneyRequest
 */
export interface PayoutApiTransferMoneyRequest {
    /**
     * Unique client identifier generated and shared before API handshake.
     * @type {string}
     * @memberof PayoutApiTransferMoney
     */
    readonly clientHashId: string

    /**
     * Unique customer identifier generated on customer creation.
     * @type {string}
     * @memberof PayoutApiTransferMoney
     */
    readonly customerHashId: string

    /**
     * Unique wallet identifier generated simultaneously with customer creation.
     * @type {string}
     * @memberof PayoutApiTransferMoney
     */
    readonly walletHashId: string

    /**
     * remittanceTransactionsRequestDTO
     * @type {RemittanceTransactionsRequestDTO}
     * @memberof PayoutApiTransferMoney
     */
    readonly remittanceTransactionsRequestDTO: RemittanceTransactionsRequestDTO

    /**
     * Enter a unique UUID value
     * @type {string}
     * @memberof PayoutApiTransferMoney
     */
    readonly xRequestId?: string
}

/**
 * Request parameters for withdrawFundsFromWallet operation in PayoutApi.
 * @export
 * @interface PayoutApiWithdrawFundsFromWalletRequest
 */
export interface PayoutApiWithdrawFundsFromWalletRequest {
    /**
     * Unique client identifier generated and shared before API handshake.
     * @type {string}
     * @memberof PayoutApiWithdrawFundsFromWallet
     */
    readonly clientHashId: string

    /**
     * Unique customer identifier generated on customer creation.
     * @type {string}
     * @memberof PayoutApiWithdrawFundsFromWallet
     */
    readonly customerHashId: string

    /**
     * Unique wallet identifier generated simultaneously with customer creation.
     * @type {string}
     * @memberof PayoutApiWithdrawFundsFromWallet
     */
    readonly walletHashId: string

    /**
     * walletRefundRequestDTO
     * @type {WalletRefundRequestDTO}
     * @memberof PayoutApiWithdrawFundsFromWallet
     */
    readonly walletRefundRequestDTO: WalletRefundRequestDTO

    /**
     * Enter a unique UUID value
     * @type {string}
     * @memberof PayoutApiWithdrawFundsFromWallet
     */
    readonly xRequestId?: string
}

/**
 * PayoutApi - object-oriented interface
 * @export
 * @class PayoutApi
 * @extends {BaseAPI}
 */
export class PayoutApi extends BaseAPI {
    /**
     * This API allows you to use NIUM’s card widget to tokenize beneficiary card details. Non-PCI DSS compliant Clients are expected to integrate with this new API to get beneficiary’s encrypted card token number. This token number needs to be passed in field encryptedBeneficiaryCardToken while adding a beneficiary to make a payout to card.
     * @summary Get Card Widget
     * @param {PayoutApiCustomerGetCardWidgetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PayoutApi
     */
    public customerGetCardWidget(requestParameters: PayoutApiCustomerGetCardWidgetRequest, options?: RawAxiosRequestConfig) {
        return PayoutApiFp(this.configuration).customerGetCardWidget(requestParameters.clientHashId, requestParameters.customerHashId, requestParameters.customerCardWidgetTokenRequestDTO, requestParameters.xRequestId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This API allows you to fetch the Remittance Life Cycle Status along with Payment Reference Number, Partner Reference Number, System Reference Number, Date and Time of the Remittance status based on the System Reference Number provided in the input.
     * @summary Fetch Remittance Life Cycle Status
     * @param {PayoutApiFetchRemittanceLifeCycleStatusRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PayoutApi
     */
    public fetchRemittanceLifeCycleStatus(requestParameters: PayoutApiFetchRemittanceLifeCycleStatusRequest, options?: RawAxiosRequestConfig) {
        return PayoutApiFp(this.configuration).fetchRemittanceLifeCycleStatus(requestParameters.clientHashId, requestParameters.customerHashId, requestParameters.systemReferenceNumber, requestParameters.walletHashId, requestParameters.xRequestId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This API allows you to download a proof of payment receipt against a transaction.
     * @summary Get Proof Of Payment
     * @param {PayoutApiPoPRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PayoutApi
     */
    public poP(requestParameters: PayoutApiPoPRequest, options?: RawAxiosRequestConfig) {
        return PayoutApiFp(this.configuration).poP(requestParameters.clientHashId, requestParameters.customerHashId, requestParameters.systemReferenceNumber, requestParameters.walletHashId, requestParameters.xRequestId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This API will allow you to fetch the list of purpose of transfer.
     * @summary Purpose of Transfer
     * @param {PayoutApiPurposeofTransferRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PayoutApi
     */
    public purposeofTransfer(requestParameters: PayoutApiPurposeofTransferRequest = {}, options?: RawAxiosRequestConfig) {
        return PayoutApiFp(this.configuration).purposeofTransfer(requestParameters.xRequestId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This API allows you to respond to an RFI raised for a transaction.
     * @summary Respond to Transaction RFI
     * @param {PayoutApiRespondtoTransactionRFIRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PayoutApi
     */
    public respondtoTransactionRFI(requestParameters: PayoutApiRespondtoTransactionRFIRequest, options?: RawAxiosRequestConfig) {
        return PayoutApiFp(this.configuration).respondtoTransactionRFI(requestParameters.authCode, requestParameters.clientHashId, requestParameters.customerHashId, requestParameters.walletHashId, requestParameters.uploadRfiDocumentRequestDTO, requestParameters.xRequestId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This API will allow you to send money to the registered beneficiary.
     * @summary Transfer Money
     * @param {PayoutApiTransferMoneyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PayoutApi
     */
    public transferMoney(requestParameters: PayoutApiTransferMoneyRequest, options?: RawAxiosRequestConfig) {
        return PayoutApiFp(this.configuration).transferMoney(requestParameters.clientHashId, requestParameters.customerHashId, requestParameters.walletHashId, requestParameters.remittanceTransactionsRequestDTO, requestParameters.xRequestId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This API allows you to withdraw funds from the customer\'s wallet.
     * @summary Withdraw Funds from Wallet
     * @param {PayoutApiWithdrawFundsFromWalletRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PayoutApi
     */
    public withdrawFundsFromWallet(requestParameters: PayoutApiWithdrawFundsFromWalletRequest, options?: RawAxiosRequestConfig) {
        return PayoutApiFp(this.configuration).withdrawFundsFromWallet(requestParameters.clientHashId, requestParameters.customerHashId, requestParameters.walletHashId, requestParameters.walletRefundRequestDTO, requestParameters.xRequestId, options).then((request) => request(this.axios, this.basePath));
    }
}

