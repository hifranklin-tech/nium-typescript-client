/* tslint:disable */
/* eslint-disable */
/**
 * NIUM Platform
 * NIUM Platform
 *
 * The version of the OpenAPI document: 2024.8.20
 * Contact: experience@nium.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ApiError } from '../model';
// @ts-ignore
import type { NewErrorResponse } from '../model';
// @ts-ignore
import type { OOBCallbackRequestDTO } from '../model';
// @ts-ignore
import type { OOBCallbackResponseDTO } from '../model';
// @ts-ignore
import type { OobCallbackRequestDTO } from '../model';
// @ts-ignore
import type { PasscodeRequestDTO } from '../model';
// @ts-ignore
import type { PasscodeResponseDTO } from '../model';
// @ts-ignore
import type { PasscodeStatusDTO } from '../model';
// @ts-ignore
import type { Standard401Error } from '../model';
// @ts-ignore
import type { Standard403Error } from '../model';
// @ts-ignore
import type { Standard500Error } from '../model';
/**
 * Class3DSApi - axios parameter creator
 * @export
 */
export const Class3DSApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * API allows to retrieve the status of passcode enrollments for all cards associated with wallet. Results can be filtered by `cardHashId`
         * @summary 3DS passcode enrollment status
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} customerHashId Unique customer identifier generated on customer creation.
         * @param {string} walletHashId Unique wallet identifier generated simultaneously with customer creation.
         * @param {string} [cardHashId] Unique card identifier generated while new/add-on card issuance.
         * @param {string} [xRequestId] Please enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        passcodeEnrollmentStatus: async (clientHashId: string, customerHashId: string, walletHashId: string, cardHashId?: string, xRequestId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'clientHashId' is not null or undefined
            assertParamExists('passcodeEnrollmentStatus', 'clientHashId', clientHashId)
            // verify required parameter 'customerHashId' is not null or undefined
            assertParamExists('passcodeEnrollmentStatus', 'customerHashId', customerHashId)
            // verify required parameter 'walletHashId' is not null or undefined
            assertParamExists('passcodeEnrollmentStatus', 'walletHashId', walletHashId)
            const localVarPath = `/api/v1/client/{clientHashId}/customer/{customerHashId}/wallet/{walletHashId}/3ds/passcode/status`
                .replace(`{${"clientHashId"}}`, encodeURIComponent(String(clientHashId)))
                .replace(`{${"customerHashId"}}`, encodeURIComponent(String(customerHashId)))
                .replace(`{${"walletHashId"}}`, encodeURIComponent(String(walletHashId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication default required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (cardHashId !== undefined) {
                localVarQueryParameter['cardHashId'] = cardHashId;
            }

            if (xRequestId != null) {
                localVarHeaderParameter['x-request-id'] = String(xRequestId);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * API to notify Nium on success of OOB authentication
         * @summary Process OOB callback
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {OOBCallbackRequestDTO} oOBCallbackRequestDTO oobCallbackRequestDTO
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processOOBcallback: async (clientHashId: string, oOBCallbackRequestDTO: OOBCallbackRequestDTO, xRequestId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'clientHashId' is not null or undefined
            assertParamExists('processOOBcallback', 'clientHashId', clientHashId)
            // verify required parameter 'oOBCallbackRequestDTO' is not null or undefined
            assertParamExists('processOOBcallback', 'oOBCallbackRequestDTO', oOBCallbackRequestDTO)
            const localVarPath = `/api/v1/client/{clientHashId}/notifications/3ds/oob/callback`
                .replace(`{${"clientHashId"}}`, encodeURIComponent(String(clientHashId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication default required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (xRequestId != null) {
                localVarHeaderParameter['x-request-id'] = String(xRequestId);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(oOBCallbackRequestDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * API to notify Nium on success or failure of OOB authentication
         * @summary 3DS OOB Callback V2
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {OobCallbackRequestDTO} oobCallbackRequestDTO oobCallbackRequestDTO
         * @param {string} [xRequestId] Enter a unique UUID value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processOobCallbackV2: async (clientHashId: string, oobCallbackRequestDTO: OobCallbackRequestDTO, xRequestId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'clientHashId' is not null or undefined
            assertParamExists('processOobCallbackV2', 'clientHashId', clientHashId)
            // verify required parameter 'oobCallbackRequestDTO' is not null or undefined
            assertParamExists('processOobCallbackV2', 'oobCallbackRequestDTO', oobCallbackRequestDTO)
            const localVarPath = `/api/v2/client/{clientHashId}/3ds/oob/callback`
                .replace(`{${"clientHashId"}}`, encodeURIComponent(String(clientHashId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication default required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (xRequestId != null) {
                localVarHeaderParameter['x-request-id'] = String(xRequestId);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(oobCallbackRequestDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * API to update the 3DS passcode for a specific card.
         * @summary Add or Update passcode
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} customerHashId Unique customer identifier generated on customer creation.
         * @param {string} walletHashId Unique wallet identifier generated simultaneously with customer creation.
         * @param {string} cardHashId Unique card identifier generated while new/add-on card issuance.
         * @param {PasscodeRequestDTO} passcodeRequestDTO passcodeRequestDTO
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setPasscode: async (clientHashId: string, customerHashId: string, walletHashId: string, cardHashId: string, passcodeRequestDTO: PasscodeRequestDTO, xRequestId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'clientHashId' is not null or undefined
            assertParamExists('setPasscode', 'clientHashId', clientHashId)
            // verify required parameter 'customerHashId' is not null or undefined
            assertParamExists('setPasscode', 'customerHashId', customerHashId)
            // verify required parameter 'walletHashId' is not null or undefined
            assertParamExists('setPasscode', 'walletHashId', walletHashId)
            // verify required parameter 'cardHashId' is not null or undefined
            assertParamExists('setPasscode', 'cardHashId', cardHashId)
            // verify required parameter 'passcodeRequestDTO' is not null or undefined
            assertParamExists('setPasscode', 'passcodeRequestDTO', passcodeRequestDTO)
            const localVarPath = `/api/v1/client/{clientHashId}/customer/{customerHashId}/wallet/{walletHashId}/card/{cardHashId}/3ds/passcode`
                .replace(`{${"clientHashId"}}`, encodeURIComponent(String(clientHashId)))
                .replace(`{${"customerHashId"}}`, encodeURIComponent(String(customerHashId)))
                .replace(`{${"walletHashId"}}`, encodeURIComponent(String(walletHashId)))
                .replace(`{${"cardHashId"}}`, encodeURIComponent(String(cardHashId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication default required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (xRequestId != null) {
                localVarHeaderParameter['x-request-id'] = String(xRequestId);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(passcodeRequestDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * Class3DSApi - functional programming interface
 * @export
 */
export const Class3DSApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = Class3DSApiAxiosParamCreator(configuration)
    return {
        /**
         * API allows to retrieve the status of passcode enrollments for all cards associated with wallet. Results can be filtered by `cardHashId`
         * @summary 3DS passcode enrollment status
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} customerHashId Unique customer identifier generated on customer creation.
         * @param {string} walletHashId Unique wallet identifier generated simultaneously with customer creation.
         * @param {string} [cardHashId] Unique card identifier generated while new/add-on card issuance.
         * @param {string} [xRequestId] Please enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async passcodeEnrollmentStatus(clientHashId: string, customerHashId: string, walletHashId: string, cardHashId?: string, xRequestId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PasscodeStatusDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.passcodeEnrollmentStatus(clientHashId, customerHashId, walletHashId, cardHashId, xRequestId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['Class3DSApi.passcodeEnrollmentStatus']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * API to notify Nium on success of OOB authentication
         * @summary Process OOB callback
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {OOBCallbackRequestDTO} oOBCallbackRequestDTO oobCallbackRequestDTO
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async processOOBcallback(clientHashId: string, oOBCallbackRequestDTO: OOBCallbackRequestDTO, xRequestId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OOBCallbackResponseDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.processOOBcallback(clientHashId, oOBCallbackRequestDTO, xRequestId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['Class3DSApi.processOOBcallback']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * API to notify Nium on success or failure of OOB authentication
         * @summary 3DS OOB Callback V2
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {OobCallbackRequestDTO} oobCallbackRequestDTO oobCallbackRequestDTO
         * @param {string} [xRequestId] Enter a unique UUID value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async processOobCallbackV2(clientHashId: string, oobCallbackRequestDTO: OobCallbackRequestDTO, xRequestId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.processOobCallbackV2(clientHashId, oobCallbackRequestDTO, xRequestId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['Class3DSApi.processOobCallbackV2']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * API to update the 3DS passcode for a specific card.
         * @summary Add or Update passcode
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} customerHashId Unique customer identifier generated on customer creation.
         * @param {string} walletHashId Unique wallet identifier generated simultaneously with customer creation.
         * @param {string} cardHashId Unique card identifier generated while new/add-on card issuance.
         * @param {PasscodeRequestDTO} passcodeRequestDTO passcodeRequestDTO
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setPasscode(clientHashId: string, customerHashId: string, walletHashId: string, cardHashId: string, passcodeRequestDTO: PasscodeRequestDTO, xRequestId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PasscodeResponseDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.setPasscode(clientHashId, customerHashId, walletHashId, cardHashId, passcodeRequestDTO, xRequestId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['Class3DSApi.setPasscode']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * Class3DSApi - factory interface
 * @export
 */
export const Class3DSApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = Class3DSApiFp(configuration)
    return {
        /**
         * API allows to retrieve the status of passcode enrollments for all cards associated with wallet. Results can be filtered by `cardHashId`
         * @summary 3DS passcode enrollment status
         * @param {Class3DSApiPasscodeEnrollmentStatusRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        passcodeEnrollmentStatus(requestParameters: Class3DSApiPasscodeEnrollmentStatusRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<PasscodeStatusDTO>> {
            return localVarFp.passcodeEnrollmentStatus(requestParameters.clientHashId, requestParameters.customerHashId, requestParameters.walletHashId, requestParameters.cardHashId, requestParameters.xRequestId, options).then((request) => request(axios, basePath));
        },
        /**
         * API to notify Nium on success of OOB authentication
         * @summary Process OOB callback
         * @param {Class3DSApiProcessOOBcallbackRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processOOBcallback(requestParameters: Class3DSApiProcessOOBcallbackRequest, options?: RawAxiosRequestConfig): AxiosPromise<OOBCallbackResponseDTO> {
            return localVarFp.processOOBcallback(requestParameters.clientHashId, requestParameters.oOBCallbackRequestDTO, requestParameters.xRequestId, options).then((request) => request(axios, basePath));
        },
        /**
         * API to notify Nium on success or failure of OOB authentication
         * @summary 3DS OOB Callback V2
         * @param {Class3DSApiProcessOobCallbackV2Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processOobCallbackV2(requestParameters: Class3DSApiProcessOobCallbackV2Request, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.processOobCallbackV2(requestParameters.clientHashId, requestParameters.oobCallbackRequestDTO, requestParameters.xRequestId, options).then((request) => request(axios, basePath));
        },
        /**
         * API to update the 3DS passcode for a specific card.
         * @summary Add or Update passcode
         * @param {Class3DSApiSetPasscodeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setPasscode(requestParameters: Class3DSApiSetPasscodeRequest, options?: RawAxiosRequestConfig): AxiosPromise<PasscodeResponseDTO> {
            return localVarFp.setPasscode(requestParameters.clientHashId, requestParameters.customerHashId, requestParameters.walletHashId, requestParameters.cardHashId, requestParameters.passcodeRequestDTO, requestParameters.xRequestId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for passcodeEnrollmentStatus operation in Class3DSApi.
 * @export
 * @interface Class3DSApiPasscodeEnrollmentStatusRequest
 */
export interface Class3DSApiPasscodeEnrollmentStatusRequest {
    /**
     * Unique client identifier generated and shared before API handshake.
     * @type {string}
     * @memberof Class3DSApiPasscodeEnrollmentStatus
     */
    readonly clientHashId: string

    /**
     * Unique customer identifier generated on customer creation.
     * @type {string}
     * @memberof Class3DSApiPasscodeEnrollmentStatus
     */
    readonly customerHashId: string

    /**
     * Unique wallet identifier generated simultaneously with customer creation.
     * @type {string}
     * @memberof Class3DSApiPasscodeEnrollmentStatus
     */
    readonly walletHashId: string

    /**
     * Unique card identifier generated while new/add-on card issuance.
     * @type {string}
     * @memberof Class3DSApiPasscodeEnrollmentStatus
     */
    readonly cardHashId?: string

    /**
     * Please enter a unique UUID value
     * @type {string}
     * @memberof Class3DSApiPasscodeEnrollmentStatus
     */
    readonly xRequestId?: string
}

/**
 * Request parameters for processOOBcallback operation in Class3DSApi.
 * @export
 * @interface Class3DSApiProcessOOBcallbackRequest
 */
export interface Class3DSApiProcessOOBcallbackRequest {
    /**
     * Unique client identifier generated and shared before API handshake.
     * @type {string}
     * @memberof Class3DSApiProcessOOBcallback
     */
    readonly clientHashId: string

    /**
     * oobCallbackRequestDTO
     * @type {OOBCallbackRequestDTO}
     * @memberof Class3DSApiProcessOOBcallback
     */
    readonly oOBCallbackRequestDTO: OOBCallbackRequestDTO

    /**
     * Enter a unique UUID value
     * @type {string}
     * @memberof Class3DSApiProcessOOBcallback
     */
    readonly xRequestId?: string
}

/**
 * Request parameters for processOobCallbackV2 operation in Class3DSApi.
 * @export
 * @interface Class3DSApiProcessOobCallbackV2Request
 */
export interface Class3DSApiProcessOobCallbackV2Request {
    /**
     * Unique client identifier generated and shared before API handshake.
     * @type {string}
     * @memberof Class3DSApiProcessOobCallbackV2
     */
    readonly clientHashId: string

    /**
     * oobCallbackRequestDTO
     * @type {OobCallbackRequestDTO}
     * @memberof Class3DSApiProcessOobCallbackV2
     */
    readonly oobCallbackRequestDTO: OobCallbackRequestDTO

    /**
     * Enter a unique UUID value.
     * @type {string}
     * @memberof Class3DSApiProcessOobCallbackV2
     */
    readonly xRequestId?: string
}

/**
 * Request parameters for setPasscode operation in Class3DSApi.
 * @export
 * @interface Class3DSApiSetPasscodeRequest
 */
export interface Class3DSApiSetPasscodeRequest {
    /**
     * Unique client identifier generated and shared before API handshake.
     * @type {string}
     * @memberof Class3DSApiSetPasscode
     */
    readonly clientHashId: string

    /**
     * Unique customer identifier generated on customer creation.
     * @type {string}
     * @memberof Class3DSApiSetPasscode
     */
    readonly customerHashId: string

    /**
     * Unique wallet identifier generated simultaneously with customer creation.
     * @type {string}
     * @memberof Class3DSApiSetPasscode
     */
    readonly walletHashId: string

    /**
     * Unique card identifier generated while new/add-on card issuance.
     * @type {string}
     * @memberof Class3DSApiSetPasscode
     */
    readonly cardHashId: string

    /**
     * passcodeRequestDTO
     * @type {PasscodeRequestDTO}
     * @memberof Class3DSApiSetPasscode
     */
    readonly passcodeRequestDTO: PasscodeRequestDTO

    /**
     * Enter a unique UUID value
     * @type {string}
     * @memberof Class3DSApiSetPasscode
     */
    readonly xRequestId?: string
}

/**
 * Class3DSApi - object-oriented interface
 * @export
 * @class Class3DSApi
 * @extends {BaseAPI}
 */
export class Class3DSApi extends BaseAPI {
    /**
     * API allows to retrieve the status of passcode enrollments for all cards associated with wallet. Results can be filtered by `cardHashId`
     * @summary 3DS passcode enrollment status
     * @param {Class3DSApiPasscodeEnrollmentStatusRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Class3DSApi
     */
    public passcodeEnrollmentStatus(requestParameters: Class3DSApiPasscodeEnrollmentStatusRequest, options?: RawAxiosRequestConfig) {
        return Class3DSApiFp(this.configuration).passcodeEnrollmentStatus(requestParameters.clientHashId, requestParameters.customerHashId, requestParameters.walletHashId, requestParameters.cardHashId, requestParameters.xRequestId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * API to notify Nium on success of OOB authentication
     * @summary Process OOB callback
     * @param {Class3DSApiProcessOOBcallbackRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Class3DSApi
     */
    public processOOBcallback(requestParameters: Class3DSApiProcessOOBcallbackRequest, options?: RawAxiosRequestConfig) {
        return Class3DSApiFp(this.configuration).processOOBcallback(requestParameters.clientHashId, requestParameters.oOBCallbackRequestDTO, requestParameters.xRequestId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * API to notify Nium on success or failure of OOB authentication
     * @summary 3DS OOB Callback V2
     * @param {Class3DSApiProcessOobCallbackV2Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Class3DSApi
     */
    public processOobCallbackV2(requestParameters: Class3DSApiProcessOobCallbackV2Request, options?: RawAxiosRequestConfig) {
        return Class3DSApiFp(this.configuration).processOobCallbackV2(requestParameters.clientHashId, requestParameters.oobCallbackRequestDTO, requestParameters.xRequestId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * API to update the 3DS passcode for a specific card.
     * @summary Add or Update passcode
     * @param {Class3DSApiSetPasscodeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Class3DSApi
     */
    public setPasscode(requestParameters: Class3DSApiSetPasscodeRequest, options?: RawAxiosRequestConfig) {
        return Class3DSApiFp(this.configuration).setPasscode(requestParameters.clientHashId, requestParameters.customerHashId, requestParameters.walletHashId, requestParameters.cardHashId, requestParameters.passcodeRequestDTO, requestParameters.xRequestId, options).then((request) => request(this.axios, this.basePath));
    }
}

