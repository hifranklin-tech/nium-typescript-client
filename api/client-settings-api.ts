/* tslint:disable */
/* eslint-disable */
/**
 * NIUM Platform
 * NIUM Platform
 *
 * The version of the OpenAPI document: 2023.12.12
 * Contact: experience@nium.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import { ClientDetailResponseDTO2 } from '../model';
// @ts-ignore
import { ClientFeeDetailsResponseDTO } from '../model';
// @ts-ignore
import { ProductApiError } from '../model';
// @ts-ignore
import { WalletApiError } from '../model';
/**
 * ClientSettingsApi - axios parameter creator
 * @export
 */
export const ClientSettingsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This API will help you to fetch the configuration details of a client.
         * @summary Client Details
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clientDetails: async (clientHashId: string, xRequestId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'clientHashId' is not null or undefined
            assertParamExists('clientDetails', 'clientHashId', clientHashId)
            const localVarPath = `/api/v1/client/{clientHashId}`
                .replace(`{${"clientHashId"}}`, encodeURIComponent(String(clientHashId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication default required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (xRequestId != null) {
                localVarHeaderParameter['x-request-id'] = String(xRequestId);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This API provides all the fees that have been set at the client level by NIUM. Refer to the following [Fees User Guide](doc:fees) for the Glossary of Fees for pre-defined fees supported on the system
         * @summary Fee Details
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        feeDetails: async (clientHashId: string, xRequestId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'clientHashId' is not null or undefined
            assertParamExists('feeDetails', 'clientHashId', clientHashId)
            const localVarPath = `/api/v2/client/{clientHashId}/fees`
                .replace(`{${"clientHashId"}}`, encodeURIComponent(String(clientHashId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication default required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (xRequestId != null) {
                localVarHeaderParameter['x-request-id'] = String(xRequestId);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ClientSettingsApi - functional programming interface
 * @export
 */
export const ClientSettingsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ClientSettingsApiAxiosParamCreator(configuration)
    return {
        /**
         * This API will help you to fetch the configuration details of a client.
         * @summary Client Details
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async clientDetails(clientHashId: string, xRequestId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ClientDetailResponseDTO2>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.clientDetails(clientHashId, xRequestId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ClientSettingsApi.clientDetails']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * This API provides all the fees that have been set at the client level by NIUM. Refer to the following [Fees User Guide](doc:fees) for the Glossary of Fees for pre-defined fees supported on the system
         * @summary Fee Details
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async feeDetails(clientHashId: string, xRequestId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ClientFeeDetailsResponseDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.feeDetails(clientHashId, xRequestId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ClientSettingsApi.feeDetails']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ClientSettingsApi - factory interface
 * @export
 */
export const ClientSettingsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ClientSettingsApiFp(configuration)
    return {
        /**
         * This API will help you to fetch the configuration details of a client.
         * @summary Client Details
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clientDetails(clientHashId: string, xRequestId?: string, options?: any): AxiosPromise<ClientDetailResponseDTO2> {
            return localVarFp.clientDetails(clientHashId, xRequestId, options).then((request) => request(axios, basePath));
        },
        /**
         * This API provides all the fees that have been set at the client level by NIUM. Refer to the following [Fees User Guide](doc:fees) for the Glossary of Fees for pre-defined fees supported on the system
         * @summary Fee Details
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        feeDetails(clientHashId: string, xRequestId?: string, options?: any): AxiosPromise<Array<ClientFeeDetailsResponseDTO>> {
            return localVarFp.feeDetails(clientHashId, xRequestId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ClientSettingsApi - object-oriented interface
 * @export
 * @class ClientSettingsApi
 * @extends {BaseAPI}
 */
export class ClientSettingsApi extends BaseAPI {
    /**
     * This API will help you to fetch the configuration details of a client.
     * @summary Client Details
     * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
     * @param {string} [xRequestId] Enter a unique UUID value
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientSettingsApi
     */
    public clientDetails(clientHashId: string, xRequestId?: string, options?: RawAxiosRequestConfig) {
        return ClientSettingsApiFp(this.configuration).clientDetails(clientHashId, xRequestId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This API provides all the fees that have been set at the client level by NIUM. Refer to the following [Fees User Guide](doc:fees) for the Glossary of Fees for pre-defined fees supported on the system
     * @summary Fee Details
     * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
     * @param {string} [xRequestId] Enter a unique UUID value
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientSettingsApi
     */
    public feeDetails(clientHashId: string, xRequestId?: string, options?: RawAxiosRequestConfig) {
        return ClientSettingsApiFp(this.configuration).feeDetails(clientHashId, xRequestId, options).then((request) => request(this.axios, this.basePath));
    }
}

