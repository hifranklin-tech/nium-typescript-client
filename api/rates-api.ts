/* tslint:disable */
/* eslint-disable */
/**
 * NIUM Platform
 * NIUM Platform
 *
 * The version of the OpenAPI document: 2023.12.12
 * Contact: experience@nium.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import { ErrorResponse400 } from '../model';
// @ts-ignore
import { ErrorResponse401 } from '../model';
// @ts-ignore
import { ErrorResponse403 } from '../model';
// @ts-ignore
import { ErrorResponse500 } from '../model';
// @ts-ignore
import { ExchangeRateV2ResponseDto } from '../model';
// @ts-ignore
import { ExchangeRatesGetResponse } from '../model';
// @ts-ignore
import { Window } from '../model';
/**
 * RatesApi - axios parameter creator
 * @export
 */
export const RatesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This API will retrieve aggregated time series of historical exchange rate.
         * @summary Fetch historic aggregated exchange rates
         * @param {string} sourceCurrencyCode This field contains the 3-letter [currency-and-country-codes](https://docs.nium.com/apis/docs/currency-and-country-codes).
         * @param {string} destinationCurrencyCode This field contains the 3-letter [currency-and-country-codes](https://docs.nium.com/apis/docs/currency-and-country-codes).
         * @param {string} [authorization] 
         * @param {string} [csrfToken] 
         * @param {string} [start] The start timestamp used to filter the aggregated time series. Must be in the format \&#39;yyyy-mm-ddTHH:MM:SSZ\&#39;.
         * @param {string} [end] The end timestamp used to filter the aggregated time series. Must be in the format \&#39;yyyy-mm-ddTHH:MM:SSZ\&#39;.
         * @param {Window} [window] Specifies the field by which the results should be grouped.
         * @param {string} [xRequestId] Enter a unique UUID value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aggregatedExchangeRates: async (sourceCurrencyCode: string, destinationCurrencyCode: string, authorization?: string, csrfToken?: string, start?: string, end?: string, window?: Window, xRequestId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sourceCurrencyCode' is not null or undefined
            assertParamExists('aggregatedExchangeRates', 'sourceCurrencyCode', sourceCurrencyCode)
            // verify required parameter 'destinationCurrencyCode' is not null or undefined
            assertParamExists('aggregatedExchangeRates', 'destinationCurrencyCode', destinationCurrencyCode)
            const localVarPath = `/api/v1/exchangeRates/aggregate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication default required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (sourceCurrencyCode !== undefined) {
                localVarQueryParameter['sourceCurrencyCode'] = sourceCurrencyCode;
            }

            if (destinationCurrencyCode !== undefined) {
                localVarQueryParameter['destinationCurrencyCode'] = destinationCurrencyCode;
            }

            if (start !== undefined) {
                localVarQueryParameter['start'] = (start as any instanceof Date) ?
                    (start as any).toISOString() :
                    start;
            }

            if (end !== undefined) {
                localVarQueryParameter['end'] = (end as any instanceof Date) ?
                    (end as any).toISOString() :
                    end;
            }

            if (window !== undefined) {
                localVarQueryParameter['window'] = window;
            }

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            if (csrfToken != null) {
                localVarHeaderParameter['csrf_token'] = String(csrfToken);
            }

            if (xRequestId != null) {
                localVarHeaderParameter['x-request-id'] = String(xRequestId);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This API fetches the interbank FX rate for a currency pair. Note that the rate provided does not include the Nium markup.
         * @summary Exchange Rate V2
         * @param {string} sourceCurrencyCode This field contains the 3-letter [ISO-4217 currency code](https://www.iso.org/iso-4217-currency-codes.html) for the source amount.
         * @param {string} destinationCurrencyCode This field contains the 3-letter [ISO-4217 currency code](https://www.iso.org/iso-4217-currency-codes.html) for the destination amount.
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exchangeRateV2: async (sourceCurrencyCode: string, destinationCurrencyCode: string, xRequestId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sourceCurrencyCode' is not null or undefined
            assertParamExists('exchangeRateV2', 'sourceCurrencyCode', sourceCurrencyCode)
            // verify required parameter 'destinationCurrencyCode' is not null or undefined
            assertParamExists('exchangeRateV2', 'destinationCurrencyCode', destinationCurrencyCode)
            const localVarPath = `/api/v2/exchangeRate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication default required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (sourceCurrencyCode !== undefined) {
                localVarQueryParameter['sourceCurrencyCode'] = sourceCurrencyCode;
            }

            if (destinationCurrencyCode !== undefined) {
                localVarQueryParameter['destinationCurrencyCode'] = destinationCurrencyCode;
            }

            if (xRequestId != null) {
                localVarHeaderParameter['x-request-id'] = String(xRequestId);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RatesApi - functional programming interface
 * @export
 */
export const RatesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RatesApiAxiosParamCreator(configuration)
    return {
        /**
         * This API will retrieve aggregated time series of historical exchange rate.
         * @summary Fetch historic aggregated exchange rates
         * @param {string} sourceCurrencyCode This field contains the 3-letter [currency-and-country-codes](https://docs.nium.com/apis/docs/currency-and-country-codes).
         * @param {string} destinationCurrencyCode This field contains the 3-letter [currency-and-country-codes](https://docs.nium.com/apis/docs/currency-and-country-codes).
         * @param {string} [authorization] 
         * @param {string} [csrfToken] 
         * @param {string} [start] The start timestamp used to filter the aggregated time series. Must be in the format \&#39;yyyy-mm-ddTHH:MM:SSZ\&#39;.
         * @param {string} [end] The end timestamp used to filter the aggregated time series. Must be in the format \&#39;yyyy-mm-ddTHH:MM:SSZ\&#39;.
         * @param {Window} [window] Specifies the field by which the results should be grouped.
         * @param {string} [xRequestId] Enter a unique UUID value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async aggregatedExchangeRates(sourceCurrencyCode: string, destinationCurrencyCode: string, authorization?: string, csrfToken?: string, start?: string, end?: string, window?: Window, xRequestId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExchangeRatesGetResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.aggregatedExchangeRates(sourceCurrencyCode, destinationCurrencyCode, authorization, csrfToken, start, end, window, xRequestId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RatesApi.aggregatedExchangeRates']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * This API fetches the interbank FX rate for a currency pair. Note that the rate provided does not include the Nium markup.
         * @summary Exchange Rate V2
         * @param {string} sourceCurrencyCode This field contains the 3-letter [ISO-4217 currency code](https://www.iso.org/iso-4217-currency-codes.html) for the source amount.
         * @param {string} destinationCurrencyCode This field contains the 3-letter [ISO-4217 currency code](https://www.iso.org/iso-4217-currency-codes.html) for the destination amount.
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async exchangeRateV2(sourceCurrencyCode: string, destinationCurrencyCode: string, xRequestId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExchangeRateV2ResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.exchangeRateV2(sourceCurrencyCode, destinationCurrencyCode, xRequestId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RatesApi.exchangeRateV2']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * RatesApi - factory interface
 * @export
 */
export const RatesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RatesApiFp(configuration)
    return {
        /**
         * This API will retrieve aggregated time series of historical exchange rate.
         * @summary Fetch historic aggregated exchange rates
         * @param {string} sourceCurrencyCode This field contains the 3-letter [currency-and-country-codes](https://docs.nium.com/apis/docs/currency-and-country-codes).
         * @param {string} destinationCurrencyCode This field contains the 3-letter [currency-and-country-codes](https://docs.nium.com/apis/docs/currency-and-country-codes).
         * @param {string} [authorization] 
         * @param {string} [csrfToken] 
         * @param {string} [start] The start timestamp used to filter the aggregated time series. Must be in the format \&#39;yyyy-mm-ddTHH:MM:SSZ\&#39;.
         * @param {string} [end] The end timestamp used to filter the aggregated time series. Must be in the format \&#39;yyyy-mm-ddTHH:MM:SSZ\&#39;.
         * @param {Window} [window] Specifies the field by which the results should be grouped.
         * @param {string} [xRequestId] Enter a unique UUID value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aggregatedExchangeRates(sourceCurrencyCode: string, destinationCurrencyCode: string, authorization?: string, csrfToken?: string, start?: string, end?: string, window?: Window, xRequestId?: string, options?: any): AxiosPromise<ExchangeRatesGetResponse> {
            return localVarFp.aggregatedExchangeRates(sourceCurrencyCode, destinationCurrencyCode, authorization, csrfToken, start, end, window, xRequestId, options).then((request) => request(axios, basePath));
        },
        /**
         * This API fetches the interbank FX rate for a currency pair. Note that the rate provided does not include the Nium markup.
         * @summary Exchange Rate V2
         * @param {string} sourceCurrencyCode This field contains the 3-letter [ISO-4217 currency code](https://www.iso.org/iso-4217-currency-codes.html) for the source amount.
         * @param {string} destinationCurrencyCode This field contains the 3-letter [ISO-4217 currency code](https://www.iso.org/iso-4217-currency-codes.html) for the destination amount.
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exchangeRateV2(sourceCurrencyCode: string, destinationCurrencyCode: string, xRequestId?: string, options?: any): AxiosPromise<ExchangeRateV2ResponseDto> {
            return localVarFp.exchangeRateV2(sourceCurrencyCode, destinationCurrencyCode, xRequestId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RatesApi - object-oriented interface
 * @export
 * @class RatesApi
 * @extends {BaseAPI}
 */
export class RatesApi extends BaseAPI {
    /**
     * This API will retrieve aggregated time series of historical exchange rate.
     * @summary Fetch historic aggregated exchange rates
     * @param {string} sourceCurrencyCode This field contains the 3-letter [currency-and-country-codes](https://docs.nium.com/apis/docs/currency-and-country-codes).
     * @param {string} destinationCurrencyCode This field contains the 3-letter [currency-and-country-codes](https://docs.nium.com/apis/docs/currency-and-country-codes).
     * @param {string} [authorization] 
     * @param {string} [csrfToken] 
     * @param {string} [start] The start timestamp used to filter the aggregated time series. Must be in the format \&#39;yyyy-mm-ddTHH:MM:SSZ\&#39;.
     * @param {string} [end] The end timestamp used to filter the aggregated time series. Must be in the format \&#39;yyyy-mm-ddTHH:MM:SSZ\&#39;.
     * @param {Window} [window] Specifies the field by which the results should be grouped.
     * @param {string} [xRequestId] Enter a unique UUID value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RatesApi
     */
    public aggregatedExchangeRates(sourceCurrencyCode: string, destinationCurrencyCode: string, authorization?: string, csrfToken?: string, start?: string, end?: string, window?: Window, xRequestId?: string, options?: RawAxiosRequestConfig) {
        return RatesApiFp(this.configuration).aggregatedExchangeRates(sourceCurrencyCode, destinationCurrencyCode, authorization, csrfToken, start, end, window, xRequestId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This API fetches the interbank FX rate for a currency pair. Note that the rate provided does not include the Nium markup.
     * @summary Exchange Rate V2
     * @param {string} sourceCurrencyCode This field contains the 3-letter [ISO-4217 currency code](https://www.iso.org/iso-4217-currency-codes.html) for the source amount.
     * @param {string} destinationCurrencyCode This field contains the 3-letter [ISO-4217 currency code](https://www.iso.org/iso-4217-currency-codes.html) for the destination amount.
     * @param {string} [xRequestId] Enter a unique UUID value
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RatesApi
     */
    public exchangeRateV2(sourceCurrencyCode: string, destinationCurrencyCode: string, xRequestId?: string, options?: RawAxiosRequestConfig) {
        return RatesApiFp(this.configuration).exchangeRateV2(sourceCurrencyCode, destinationCurrencyCode, xRequestId, options).then((request) => request(this.axios, this.basePath));
    }
}

