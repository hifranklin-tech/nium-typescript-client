/* tslint:disable */
/* eslint-disable */
/**
 * NIUM Platform
 * NIUM Platform
 *
 * The version of the OpenAPI document: 2024.8.20
 * Contact: experience@nium.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ExternalAccountServiceStandard401Error } from '../model';
// @ts-ignore
import type { ExternalAccountServiceStandard404Error } from '../model';
// @ts-ignore
import type { ExternalAccountServiceStandard500Error } from '../model';
// @ts-ignore
import type { MicroDepositDetails } from '../model';
/**
 * CustomerApi - axios parameter creator
 * @export
 */
export const CustomerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This API is used to fetch the micro-deposit details that were sent to a linked bank account pending authentication for E2E testing.
         * @summary Fetch micro-deposit details
         * @param {string} clientHashId Unique identifier of the client.
         * @param {string} customerHashId Unique identifier of the customer.
         * @param {string} bankAccountId Unique identifier of the linked bank account.
         * @param {string} [xRequestId] Enter a unique UUID value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchMicroDepositDetails: async (clientHashId: string, customerHashId: string, bankAccountId: string, xRequestId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'clientHashId' is not null or undefined
            assertParamExists('fetchMicroDepositDetails', 'clientHashId', clientHashId)
            // verify required parameter 'customerHashId' is not null or undefined
            assertParamExists('fetchMicroDepositDetails', 'customerHashId', customerHashId)
            // verify required parameter 'bankAccountId' is not null or undefined
            assertParamExists('fetchMicroDepositDetails', 'bankAccountId', bankAccountId)
            const localVarPath = `/api/v1/simulations/client/{clientHashId}/customer/{customerHashId}/bankAccounts/{bankAccountId}/microDeposits`
                .replace(`{${"clientHashId"}}`, encodeURIComponent(String(clientHashId)))
                .replace(`{${"customerHashId"}}`, encodeURIComponent(String(customerHashId)))
                .replace(`{${"bankAccountId"}}`, encodeURIComponent(String(bankAccountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication default required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (xRequestId != null) {
                localVarHeaderParameter['x-request-id'] = String(xRequestId);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CustomerApi - functional programming interface
 * @export
 */
export const CustomerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CustomerApiAxiosParamCreator(configuration)
    return {
        /**
         * This API is used to fetch the micro-deposit details that were sent to a linked bank account pending authentication for E2E testing.
         * @summary Fetch micro-deposit details
         * @param {string} clientHashId Unique identifier of the client.
         * @param {string} customerHashId Unique identifier of the customer.
         * @param {string} bankAccountId Unique identifier of the linked bank account.
         * @param {string} [xRequestId] Enter a unique UUID value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchMicroDepositDetails(clientHashId: string, customerHashId: string, bankAccountId: string, xRequestId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MicroDepositDetails>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchMicroDepositDetails(clientHashId, customerHashId, bankAccountId, xRequestId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CustomerApi.fetchMicroDepositDetails']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CustomerApi - factory interface
 * @export
 */
export const CustomerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CustomerApiFp(configuration)
    return {
        /**
         * This API is used to fetch the micro-deposit details that were sent to a linked bank account pending authentication for E2E testing.
         * @summary Fetch micro-deposit details
         * @param {CustomerApiFetchMicroDepositDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchMicroDepositDetails(requestParameters: CustomerApiFetchMicroDepositDetailsRequest, options?: RawAxiosRequestConfig): AxiosPromise<MicroDepositDetails> {
            return localVarFp.fetchMicroDepositDetails(requestParameters.clientHashId, requestParameters.customerHashId, requestParameters.bankAccountId, requestParameters.xRequestId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for fetchMicroDepositDetails operation in CustomerApi.
 * @export
 * @interface CustomerApiFetchMicroDepositDetailsRequest
 */
export interface CustomerApiFetchMicroDepositDetailsRequest {
    /**
     * Unique identifier of the client.
     * @type {string}
     * @memberof CustomerApiFetchMicroDepositDetails
     */
    readonly clientHashId: string

    /**
     * Unique identifier of the customer.
     * @type {string}
     * @memberof CustomerApiFetchMicroDepositDetails
     */
    readonly customerHashId: string

    /**
     * Unique identifier of the linked bank account.
     * @type {string}
     * @memberof CustomerApiFetchMicroDepositDetails
     */
    readonly bankAccountId: string

    /**
     * Enter a unique UUID value.
     * @type {string}
     * @memberof CustomerApiFetchMicroDepositDetails
     */
    readonly xRequestId?: string
}

/**
 * CustomerApi - object-oriented interface
 * @export
 * @class CustomerApi
 * @extends {BaseAPI}
 */
export class CustomerApi extends BaseAPI {
    /**
     * This API is used to fetch the micro-deposit details that were sent to a linked bank account pending authentication for E2E testing.
     * @summary Fetch micro-deposit details
     * @param {CustomerApiFetchMicroDepositDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public fetchMicroDepositDetails(requestParameters: CustomerApiFetchMicroDepositDetailsRequest, options?: RawAxiosRequestConfig) {
        return CustomerApiFp(this.configuration).fetchMicroDepositDetails(requestParameters.clientHashId, requestParameters.customerHashId, requestParameters.bankAccountId, requestParameters.xRequestId, options).then((request) => request(this.axios, this.basePath));
    }
}

