/* tslint:disable */
/* eslint-disable */
/**
 * NIUM Platform
 * NIUM Platform
 *
 * The version of the OpenAPI document: 2023.12.12
 * Contact: experience@nium.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import { ApiError2 } from '../model';
// @ts-ignore
import { PaymentIdCientTagsResponseDTO } from '../model';
// @ts-ignore
import { PaymentIdRequestDTO2 } from '../model';
// @ts-ignore
import { PaymentIdResponseDTO2 } from '../model';
// @ts-ignore
import { PaymentIdTagRequestDTO } from '../model';
// @ts-ignore
import { VirtualAccountResponseDTO } from '../model';
// @ts-ignore
import { WalletApiError } from '../model';
// @ts-ignore
import { WalletPaymentIdsResponseDTO } from '../model';
/**
 * CustomerVirtualAccountsApi - axios parameter creator
 * @export
 */
export const CustomerVirtualAccountsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This API allows you to download an account ownership certificate.
         * @summary Account Ownership Certificate
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} customerHashId Unique customer identifier generated on customer creation.
         * @param {string} [currencies] This field accepts the list of currencies in 3-letter [ISO-4217 transaction currency code](https://docs.nium.com/apis/docs/currency-and-country-codes) for which the account ownership certificate to be generated. If no currencies are being sent in query param then account ownership certificate will be generated for all the currencies enabled to the customer.
         * @param {boolean} [currentAccountBalance] This field will display the account balance of the customer as on date
         * @param {string} [xRequestId] Enter a unique UUID value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountOwnershipCertificate: async (clientHashId: string, customerHashId: string, currencies?: string, currentAccountBalance?: boolean, xRequestId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'clientHashId' is not null or undefined
            assertParamExists('accountOwnershipCertificate', 'clientHashId', clientHashId)
            // verify required parameter 'customerHashId' is not null or undefined
            assertParamExists('accountOwnershipCertificate', 'customerHashId', customerHashId)
            const localVarPath = `/api/v1/client/{clientHashId}/customer/{customerHashId}/accountOwnershipCertificate`
                .replace(`{${"clientHashId"}}`, encodeURIComponent(String(clientHashId)))
                .replace(`{${"customerHashId"}}`, encodeURIComponent(String(customerHashId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication default required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (currencies !== undefined) {
                localVarQueryParameter['currencies'] = currencies;
            }

            if (currentAccountBalance !== undefined) {
                localVarQueryParameter['currentAccountBalance'] = currentAccountBalance;
            }

            if (xRequestId != null) {
                localVarHeaderParameter['x-request-id'] = String(xRequestId);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This API allows you to assign virtual account numbers to customer for specific source.
         * @summary Assign Payment ID
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} customerHashId Unique customer identifier generated on customer creation.
         * @param {string} walletHashId Unique wallet identifier generated simultaneously with customer creation.
         * @param {PaymentIdRequestDTO2} paymentIdRequestDTO2 paymentIdRequestDTO2
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assignPaymentID: async (clientHashId: string, customerHashId: string, walletHashId: string, paymentIdRequestDTO2: PaymentIdRequestDTO2, xRequestId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'clientHashId' is not null or undefined
            assertParamExists('assignPaymentID', 'clientHashId', clientHashId)
            // verify required parameter 'customerHashId' is not null or undefined
            assertParamExists('assignPaymentID', 'customerHashId', customerHashId)
            // verify required parameter 'walletHashId' is not null or undefined
            assertParamExists('assignPaymentID', 'walletHashId', walletHashId)
            // verify required parameter 'paymentIdRequestDTO2' is not null or undefined
            assertParamExists('assignPaymentID', 'paymentIdRequestDTO2', paymentIdRequestDTO2)
            const localVarPath = `/api/v1/client/{clientHashId}/customer/{customerHashId}/wallet/{walletHashId}/paymentId`
                .replace(`{${"clientHashId"}}`, encodeURIComponent(String(clientHashId)))
                .replace(`{${"customerHashId"}}`, encodeURIComponent(String(customerHashId)))
                .replace(`{${"walletHashId"}}`, encodeURIComponent(String(walletHashId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication default required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (xRequestId != null) {
                localVarHeaderParameter['x-request-id'] = String(xRequestId);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(paymentIdRequestDTO2, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This API allows you to add, update, delete client tags against each virtual account.
         * @summary Manage Virtual Account Tags
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} customerHashId Unique customer identifier generated on customer creation.
         * @param {string} walletHashId Unique wallet identifier generated simultaneously with customer creation.
         * @param {PaymentIdTagRequestDTO} paymentIdTagRequestDTO tags
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        manageVirtualAccountTags: async (clientHashId: string, customerHashId: string, walletHashId: string, paymentIdTagRequestDTO: PaymentIdTagRequestDTO, xRequestId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'clientHashId' is not null or undefined
            assertParamExists('manageVirtualAccountTags', 'clientHashId', clientHashId)
            // verify required parameter 'customerHashId' is not null or undefined
            assertParamExists('manageVirtualAccountTags', 'customerHashId', customerHashId)
            // verify required parameter 'walletHashId' is not null or undefined
            assertParamExists('manageVirtualAccountTags', 'walletHashId', walletHashId)
            // verify required parameter 'paymentIdTagRequestDTO' is not null or undefined
            assertParamExists('manageVirtualAccountTags', 'paymentIdTagRequestDTO', paymentIdTagRequestDTO)
            const localVarPath = `/api/v1/client/{clientHashId}/customer/{customerHashId}/wallet/{walletHashId}/paymentId/tags`
                .replace(`{${"clientHashId"}}`, encodeURIComponent(String(clientHashId)))
                .replace(`{${"customerHashId"}}`, encodeURIComponent(String(customerHashId)))
                .replace(`{${"walletHashId"}}`, encodeURIComponent(String(walletHashId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication default required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (xRequestId != null) {
                localVarHeaderParameter['x-request-id'] = String(xRequestId);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(paymentIdTagRequestDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This API allows you to fetch virtual accounts assigned to a customer\'s wallet.   ⚠️ WARNING   > To access updated functionality and features we recommed using the latest version of this API [Virtual Account Details V2](/apis/reference/virtualaccountdetailsv2). Eventually, this API version will be deprecated and becomes unsupported.
         * @summary Virtual Account Details
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} customerHashId Unique customer identifier generated and shared before API handshake.
         * @param {string} walletHashId Unique wallet identifier generated and shared before API handshake.
         * @param {string} [currencyCode] 
         * @param {string} [endDate] 
         * @param {VirtualAccountDetailsOrderEnum} [order] 
         * @param {number} [page] 
         * @param {VirtualAccountDetailsPropertyEnum} [property] 
         * @param {number} [size] 
         * @param {string} [startDate] 
         * @param {string} [tagKey] 
         * @param {string} [tagValue] 
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        virtualAccountDetails: async (clientHashId: string, customerHashId: string, walletHashId: string, currencyCode?: string, endDate?: string, order?: VirtualAccountDetailsOrderEnum, page?: number, property?: VirtualAccountDetailsPropertyEnum, size?: number, startDate?: string, tagKey?: string, tagValue?: string, xRequestId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'clientHashId' is not null or undefined
            assertParamExists('virtualAccountDetails', 'clientHashId', clientHashId)
            // verify required parameter 'customerHashId' is not null or undefined
            assertParamExists('virtualAccountDetails', 'customerHashId', customerHashId)
            // verify required parameter 'walletHashId' is not null or undefined
            assertParamExists('virtualAccountDetails', 'walletHashId', walletHashId)
            const localVarPath = `/api/v1/client/{clientHashId}/customer/{customerHashId}/wallet/{walletHashId}/paymentIds`
                .replace(`{${"clientHashId"}}`, encodeURIComponent(String(clientHashId)))
                .replace(`{${"customerHashId"}}`, encodeURIComponent(String(customerHashId)))
                .replace(`{${"walletHashId"}}`, encodeURIComponent(String(walletHashId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication default required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (currencyCode !== undefined) {
                localVarQueryParameter['currencyCode'] = currencyCode;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = endDate;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (property !== undefined) {
                localVarQueryParameter['property'] = property;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = startDate;
            }

            if (tagKey !== undefined) {
                localVarQueryParameter['tagKey'] = tagKey;
            }

            if (tagValue !== undefined) {
                localVarQueryParameter['tagValue'] = tagValue;
            }

            if (xRequestId != null) {
                localVarHeaderParameter['x-request-id'] = String(xRequestId);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This API allows you to fetch virtual accounts assigned to a customer\'s wallet.
         * @summary Virtual Account Details V2
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} customerHashId Unique customer identifier generated and shared before API handshake.
         * @param {string} walletHashId Unique wallet identifier generated and shared before API handshake.
         * @param {string} [currencyCode] 
         * @param {string} [endDate] 
         * @param {VirtualAccountDetailsV2OrderEnum} [order] 
         * @param {number} [page] 
         * @param {VirtualAccountDetailsV2PropertyEnum} [property] 
         * @param {number} [size] 
         * @param {string} [startDate] 
         * @param {string} [tagKey] 
         * @param {string} [tagValue] 
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        virtualAccountDetailsV2: async (clientHashId: string, customerHashId: string, walletHashId: string, currencyCode?: string, endDate?: string, order?: VirtualAccountDetailsV2OrderEnum, page?: number, property?: VirtualAccountDetailsV2PropertyEnum, size?: number, startDate?: string, tagKey?: string, tagValue?: string, xRequestId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'clientHashId' is not null or undefined
            assertParamExists('virtualAccountDetailsV2', 'clientHashId', clientHashId)
            // verify required parameter 'customerHashId' is not null or undefined
            assertParamExists('virtualAccountDetailsV2', 'customerHashId', customerHashId)
            // verify required parameter 'walletHashId' is not null or undefined
            assertParamExists('virtualAccountDetailsV2', 'walletHashId', walletHashId)
            const localVarPath = `/api/v2/client/{clientHashId}/customer/{customerHashId}/wallet/{walletHashId}/paymentIds`
                .replace(`{${"clientHashId"}}`, encodeURIComponent(String(clientHashId)))
                .replace(`{${"customerHashId"}}`, encodeURIComponent(String(customerHashId)))
                .replace(`{${"walletHashId"}}`, encodeURIComponent(String(walletHashId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication default required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (currencyCode !== undefined) {
                localVarQueryParameter['currencyCode'] = currencyCode;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = endDate;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (property !== undefined) {
                localVarQueryParameter['property'] = property;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = startDate;
            }

            if (tagKey !== undefined) {
                localVarQueryParameter['tagKey'] = tagKey;
            }

            if (tagValue !== undefined) {
                localVarQueryParameter['tagValue'] = tagValue;
            }

            if (xRequestId != null) {
                localVarHeaderParameter['x-request-id'] = String(xRequestId);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CustomerVirtualAccountsApi - functional programming interface
 * @export
 */
export const CustomerVirtualAccountsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CustomerVirtualAccountsApiAxiosParamCreator(configuration)
    return {
        /**
         * This API allows you to download an account ownership certificate.
         * @summary Account Ownership Certificate
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} customerHashId Unique customer identifier generated on customer creation.
         * @param {string} [currencies] This field accepts the list of currencies in 3-letter [ISO-4217 transaction currency code](https://docs.nium.com/apis/docs/currency-and-country-codes) for which the account ownership certificate to be generated. If no currencies are being sent in query param then account ownership certificate will be generated for all the currencies enabled to the customer.
         * @param {boolean} [currentAccountBalance] This field will display the account balance of the customer as on date
         * @param {string} [xRequestId] Enter a unique UUID value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountOwnershipCertificate(clientHashId: string, customerHashId: string, currencies?: string, currentAccountBalance?: boolean, xRequestId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountOwnershipCertificate(clientHashId, customerHashId, currencies, currentAccountBalance, xRequestId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CustomerVirtualAccountsApi.accountOwnershipCertificate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * This API allows you to assign virtual account numbers to customer for specific source.
         * @summary Assign Payment ID
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} customerHashId Unique customer identifier generated on customer creation.
         * @param {string} walletHashId Unique wallet identifier generated simultaneously with customer creation.
         * @param {PaymentIdRequestDTO2} paymentIdRequestDTO2 paymentIdRequestDTO2
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async assignPaymentID(clientHashId: string, customerHashId: string, walletHashId: string, paymentIdRequestDTO2: PaymentIdRequestDTO2, xRequestId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaymentIdResponseDTO2>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.assignPaymentID(clientHashId, customerHashId, walletHashId, paymentIdRequestDTO2, xRequestId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CustomerVirtualAccountsApi.assignPaymentID']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * This API allows you to add, update, delete client tags against each virtual account.
         * @summary Manage Virtual Account Tags
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} customerHashId Unique customer identifier generated on customer creation.
         * @param {string} walletHashId Unique wallet identifier generated simultaneously with customer creation.
         * @param {PaymentIdTagRequestDTO} paymentIdTagRequestDTO tags
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async manageVirtualAccountTags(clientHashId: string, customerHashId: string, walletHashId: string, paymentIdTagRequestDTO: PaymentIdTagRequestDTO, xRequestId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaymentIdCientTagsResponseDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.manageVirtualAccountTags(clientHashId, customerHashId, walletHashId, paymentIdTagRequestDTO, xRequestId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CustomerVirtualAccountsApi.manageVirtualAccountTags']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * This API allows you to fetch virtual accounts assigned to a customer\'s wallet.   ⚠️ WARNING   > To access updated functionality and features we recommed using the latest version of this API [Virtual Account Details V2](/apis/reference/virtualaccountdetailsv2). Eventually, this API version will be deprecated and becomes unsupported.
         * @summary Virtual Account Details
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} customerHashId Unique customer identifier generated and shared before API handshake.
         * @param {string} walletHashId Unique wallet identifier generated and shared before API handshake.
         * @param {string} [currencyCode] 
         * @param {string} [endDate] 
         * @param {VirtualAccountDetailsOrderEnum} [order] 
         * @param {number} [page] 
         * @param {VirtualAccountDetailsPropertyEnum} [property] 
         * @param {number} [size] 
         * @param {string} [startDate] 
         * @param {string} [tagKey] 
         * @param {string} [tagValue] 
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async virtualAccountDetails(clientHashId: string, customerHashId: string, walletHashId: string, currencyCode?: string, endDate?: string, order?: VirtualAccountDetailsOrderEnum, page?: number, property?: VirtualAccountDetailsPropertyEnum, size?: number, startDate?: string, tagKey?: string, tagValue?: string, xRequestId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<WalletPaymentIdsResponseDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.virtualAccountDetails(clientHashId, customerHashId, walletHashId, currencyCode, endDate, order, page, property, size, startDate, tagKey, tagValue, xRequestId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CustomerVirtualAccountsApi.virtualAccountDetails']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * This API allows you to fetch virtual accounts assigned to a customer\'s wallet.
         * @summary Virtual Account Details V2
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} customerHashId Unique customer identifier generated and shared before API handshake.
         * @param {string} walletHashId Unique wallet identifier generated and shared before API handshake.
         * @param {string} [currencyCode] 
         * @param {string} [endDate] 
         * @param {VirtualAccountDetailsV2OrderEnum} [order] 
         * @param {number} [page] 
         * @param {VirtualAccountDetailsV2PropertyEnum} [property] 
         * @param {number} [size] 
         * @param {string} [startDate] 
         * @param {string} [tagKey] 
         * @param {string} [tagValue] 
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async virtualAccountDetailsV2(clientHashId: string, customerHashId: string, walletHashId: string, currencyCode?: string, endDate?: string, order?: VirtualAccountDetailsV2OrderEnum, page?: number, property?: VirtualAccountDetailsV2PropertyEnum, size?: number, startDate?: string, tagKey?: string, tagValue?: string, xRequestId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VirtualAccountResponseDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.virtualAccountDetailsV2(clientHashId, customerHashId, walletHashId, currencyCode, endDate, order, page, property, size, startDate, tagKey, tagValue, xRequestId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CustomerVirtualAccountsApi.virtualAccountDetailsV2']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CustomerVirtualAccountsApi - factory interface
 * @export
 */
export const CustomerVirtualAccountsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CustomerVirtualAccountsApiFp(configuration)
    return {
        /**
         * This API allows you to download an account ownership certificate.
         * @summary Account Ownership Certificate
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} customerHashId Unique customer identifier generated on customer creation.
         * @param {string} [currencies] This field accepts the list of currencies in 3-letter [ISO-4217 transaction currency code](https://docs.nium.com/apis/docs/currency-and-country-codes) for which the account ownership certificate to be generated. If no currencies are being sent in query param then account ownership certificate will be generated for all the currencies enabled to the customer.
         * @param {boolean} [currentAccountBalance] This field will display the account balance of the customer as on date
         * @param {string} [xRequestId] Enter a unique UUID value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountOwnershipCertificate(clientHashId: string, customerHashId: string, currencies?: string, currentAccountBalance?: boolean, xRequestId?: string, options?: any): AxiosPromise<void> {
            return localVarFp.accountOwnershipCertificate(clientHashId, customerHashId, currencies, currentAccountBalance, xRequestId, options).then((request) => request(axios, basePath));
        },
        /**
         * This API allows you to assign virtual account numbers to customer for specific source.
         * @summary Assign Payment ID
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} customerHashId Unique customer identifier generated on customer creation.
         * @param {string} walletHashId Unique wallet identifier generated simultaneously with customer creation.
         * @param {PaymentIdRequestDTO2} paymentIdRequestDTO2 paymentIdRequestDTO2
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assignPaymentID(clientHashId: string, customerHashId: string, walletHashId: string, paymentIdRequestDTO2: PaymentIdRequestDTO2, xRequestId?: string, options?: any): AxiosPromise<PaymentIdResponseDTO2> {
            return localVarFp.assignPaymentID(clientHashId, customerHashId, walletHashId, paymentIdRequestDTO2, xRequestId, options).then((request) => request(axios, basePath));
        },
        /**
         * This API allows you to add, update, delete client tags against each virtual account.
         * @summary Manage Virtual Account Tags
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} customerHashId Unique customer identifier generated on customer creation.
         * @param {string} walletHashId Unique wallet identifier generated simultaneously with customer creation.
         * @param {PaymentIdTagRequestDTO} paymentIdTagRequestDTO tags
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        manageVirtualAccountTags(clientHashId: string, customerHashId: string, walletHashId: string, paymentIdTagRequestDTO: PaymentIdTagRequestDTO, xRequestId?: string, options?: any): AxiosPromise<PaymentIdCientTagsResponseDTO> {
            return localVarFp.manageVirtualAccountTags(clientHashId, customerHashId, walletHashId, paymentIdTagRequestDTO, xRequestId, options).then((request) => request(axios, basePath));
        },
        /**
         * This API allows you to fetch virtual accounts assigned to a customer\'s wallet.   ⚠️ WARNING   > To access updated functionality and features we recommed using the latest version of this API [Virtual Account Details V2](/apis/reference/virtualaccountdetailsv2). Eventually, this API version will be deprecated and becomes unsupported.
         * @summary Virtual Account Details
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} customerHashId Unique customer identifier generated and shared before API handshake.
         * @param {string} walletHashId Unique wallet identifier generated and shared before API handshake.
         * @param {string} [currencyCode] 
         * @param {string} [endDate] 
         * @param {VirtualAccountDetailsOrderEnum} [order] 
         * @param {number} [page] 
         * @param {VirtualAccountDetailsPropertyEnum} [property] 
         * @param {number} [size] 
         * @param {string} [startDate] 
         * @param {string} [tagKey] 
         * @param {string} [tagValue] 
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        virtualAccountDetails(clientHashId: string, customerHashId: string, walletHashId: string, currencyCode?: string, endDate?: string, order?: VirtualAccountDetailsOrderEnum, page?: number, property?: VirtualAccountDetailsPropertyEnum, size?: number, startDate?: string, tagKey?: string, tagValue?: string, xRequestId?: string, options?: any): AxiosPromise<Array<WalletPaymentIdsResponseDTO>> {
            return localVarFp.virtualAccountDetails(clientHashId, customerHashId, walletHashId, currencyCode, endDate, order, page, property, size, startDate, tagKey, tagValue, xRequestId, options).then((request) => request(axios, basePath));
        },
        /**
         * This API allows you to fetch virtual accounts assigned to a customer\'s wallet.
         * @summary Virtual Account Details V2
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} customerHashId Unique customer identifier generated and shared before API handshake.
         * @param {string} walletHashId Unique wallet identifier generated and shared before API handshake.
         * @param {string} [currencyCode] 
         * @param {string} [endDate] 
         * @param {VirtualAccountDetailsV2OrderEnum} [order] 
         * @param {number} [page] 
         * @param {VirtualAccountDetailsV2PropertyEnum} [property] 
         * @param {number} [size] 
         * @param {string} [startDate] 
         * @param {string} [tagKey] 
         * @param {string} [tagValue] 
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        virtualAccountDetailsV2(clientHashId: string, customerHashId: string, walletHashId: string, currencyCode?: string, endDate?: string, order?: VirtualAccountDetailsV2OrderEnum, page?: number, property?: VirtualAccountDetailsV2PropertyEnum, size?: number, startDate?: string, tagKey?: string, tagValue?: string, xRequestId?: string, options?: any): AxiosPromise<VirtualAccountResponseDTO> {
            return localVarFp.virtualAccountDetailsV2(clientHashId, customerHashId, walletHashId, currencyCode, endDate, order, page, property, size, startDate, tagKey, tagValue, xRequestId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CustomerVirtualAccountsApi - object-oriented interface
 * @export
 * @class CustomerVirtualAccountsApi
 * @extends {BaseAPI}
 */
export class CustomerVirtualAccountsApi extends BaseAPI {
    /**
     * This API allows you to download an account ownership certificate.
     * @summary Account Ownership Certificate
     * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
     * @param {string} customerHashId Unique customer identifier generated on customer creation.
     * @param {string} [currencies] This field accepts the list of currencies in 3-letter [ISO-4217 transaction currency code](https://docs.nium.com/apis/docs/currency-and-country-codes) for which the account ownership certificate to be generated. If no currencies are being sent in query param then account ownership certificate will be generated for all the currencies enabled to the customer.
     * @param {boolean} [currentAccountBalance] This field will display the account balance of the customer as on date
     * @param {string} [xRequestId] Enter a unique UUID value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerVirtualAccountsApi
     */
    public accountOwnershipCertificate(clientHashId: string, customerHashId: string, currencies?: string, currentAccountBalance?: boolean, xRequestId?: string, options?: RawAxiosRequestConfig) {
        return CustomerVirtualAccountsApiFp(this.configuration).accountOwnershipCertificate(clientHashId, customerHashId, currencies, currentAccountBalance, xRequestId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This API allows you to assign virtual account numbers to customer for specific source.
     * @summary Assign Payment ID
     * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
     * @param {string} customerHashId Unique customer identifier generated on customer creation.
     * @param {string} walletHashId Unique wallet identifier generated simultaneously with customer creation.
     * @param {PaymentIdRequestDTO2} paymentIdRequestDTO2 paymentIdRequestDTO2
     * @param {string} [xRequestId] Enter a unique UUID value
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerVirtualAccountsApi
     */
    public assignPaymentID(clientHashId: string, customerHashId: string, walletHashId: string, paymentIdRequestDTO2: PaymentIdRequestDTO2, xRequestId?: string, options?: RawAxiosRequestConfig) {
        return CustomerVirtualAccountsApiFp(this.configuration).assignPaymentID(clientHashId, customerHashId, walletHashId, paymentIdRequestDTO2, xRequestId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This API allows you to add, update, delete client tags against each virtual account.
     * @summary Manage Virtual Account Tags
     * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
     * @param {string} customerHashId Unique customer identifier generated on customer creation.
     * @param {string} walletHashId Unique wallet identifier generated simultaneously with customer creation.
     * @param {PaymentIdTagRequestDTO} paymentIdTagRequestDTO tags
     * @param {string} [xRequestId] Enter a unique UUID value
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerVirtualAccountsApi
     */
    public manageVirtualAccountTags(clientHashId: string, customerHashId: string, walletHashId: string, paymentIdTagRequestDTO: PaymentIdTagRequestDTO, xRequestId?: string, options?: RawAxiosRequestConfig) {
        return CustomerVirtualAccountsApiFp(this.configuration).manageVirtualAccountTags(clientHashId, customerHashId, walletHashId, paymentIdTagRequestDTO, xRequestId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This API allows you to fetch virtual accounts assigned to a customer\'s wallet.   ⚠️ WARNING   > To access updated functionality and features we recommed using the latest version of this API [Virtual Account Details V2](/apis/reference/virtualaccountdetailsv2). Eventually, this API version will be deprecated and becomes unsupported.
     * @summary Virtual Account Details
     * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
     * @param {string} customerHashId Unique customer identifier generated and shared before API handshake.
     * @param {string} walletHashId Unique wallet identifier generated and shared before API handshake.
     * @param {string} [currencyCode] 
     * @param {string} [endDate] 
     * @param {VirtualAccountDetailsOrderEnum} [order] 
     * @param {number} [page] 
     * @param {VirtualAccountDetailsPropertyEnum} [property] 
     * @param {number} [size] 
     * @param {string} [startDate] 
     * @param {string} [tagKey] 
     * @param {string} [tagValue] 
     * @param {string} [xRequestId] Enter a unique UUID value
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerVirtualAccountsApi
     */
    public virtualAccountDetails(clientHashId: string, customerHashId: string, walletHashId: string, currencyCode?: string, endDate?: string, order?: VirtualAccountDetailsOrderEnum, page?: number, property?: VirtualAccountDetailsPropertyEnum, size?: number, startDate?: string, tagKey?: string, tagValue?: string, xRequestId?: string, options?: RawAxiosRequestConfig) {
        return CustomerVirtualAccountsApiFp(this.configuration).virtualAccountDetails(clientHashId, customerHashId, walletHashId, currencyCode, endDate, order, page, property, size, startDate, tagKey, tagValue, xRequestId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This API allows you to fetch virtual accounts assigned to a customer\'s wallet.
     * @summary Virtual Account Details V2
     * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
     * @param {string} customerHashId Unique customer identifier generated and shared before API handshake.
     * @param {string} walletHashId Unique wallet identifier generated and shared before API handshake.
     * @param {string} [currencyCode] 
     * @param {string} [endDate] 
     * @param {VirtualAccountDetailsV2OrderEnum} [order] 
     * @param {number} [page] 
     * @param {VirtualAccountDetailsV2PropertyEnum} [property] 
     * @param {number} [size] 
     * @param {string} [startDate] 
     * @param {string} [tagKey] 
     * @param {string} [tagValue] 
     * @param {string} [xRequestId] Enter a unique UUID value
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerVirtualAccountsApi
     */
    public virtualAccountDetailsV2(clientHashId: string, customerHashId: string, walletHashId: string, currencyCode?: string, endDate?: string, order?: VirtualAccountDetailsV2OrderEnum, page?: number, property?: VirtualAccountDetailsV2PropertyEnum, size?: number, startDate?: string, tagKey?: string, tagValue?: string, xRequestId?: string, options?: RawAxiosRequestConfig) {
        return CustomerVirtualAccountsApiFp(this.configuration).virtualAccountDetailsV2(clientHashId, customerHashId, walletHashId, currencyCode, endDate, order, page, property, size, startDate, tagKey, tagValue, xRequestId, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const VirtualAccountDetailsOrderEnum = {
    Desc: 'DESC',
    Asc: 'ASC'
} as const;
export type VirtualAccountDetailsOrderEnum = typeof VirtualAccountDetailsOrderEnum[keyof typeof VirtualAccountDetailsOrderEnum];
/**
 * @export
 */
export const VirtualAccountDetailsPropertyEnum = {
    CreatedAt: 'createdAt'
} as const;
export type VirtualAccountDetailsPropertyEnum = typeof VirtualAccountDetailsPropertyEnum[keyof typeof VirtualAccountDetailsPropertyEnum];
/**
 * @export
 */
export const VirtualAccountDetailsV2OrderEnum = {
    Desc: 'DESC',
    Asc: 'ASC'
} as const;
export type VirtualAccountDetailsV2OrderEnum = typeof VirtualAccountDetailsV2OrderEnum[keyof typeof VirtualAccountDetailsV2OrderEnum];
/**
 * @export
 */
export const VirtualAccountDetailsV2PropertyEnum = {
    CreatedAt: 'createdAt'
} as const;
export type VirtualAccountDetailsV2PropertyEnum = typeof VirtualAccountDetailsV2PropertyEnum[keyof typeof VirtualAccountDetailsV2PropertyEnum];
