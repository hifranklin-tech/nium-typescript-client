/* tslint:disable */
/* eslint-disable */
/**
 * NIUM Platform
 * NIUM Platform
 *
 * The version of the OpenAPI document: 2024.8.20
 * Contact: experience@nium.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ApiError2 } from '../model';
// @ts-ignore
import type { PayinWalletApiError } from '../model';
// @ts-ignore
import type { PaymentIdCientTagsResponseDTO } from '../model';
// @ts-ignore
import type { PaymentIdRequestDTO2 } from '../model';
// @ts-ignore
import type { PaymentIdResponseDTO2 } from '../model';
// @ts-ignore
import type { PaymentIdTagRequestDTO } from '../model';
// @ts-ignore
import type { VirtualAccountResponseDTO } from '../model';
// @ts-ignore
import type { WalletPaymentIdsResponseDTO } from '../model';
/**
 * CustomerVirtualAccountsApi - axios parameter creator
 * @export
 */
export const CustomerVirtualAccountsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This API allows you to download an account ownership certificate.
         * @summary Account Ownership Certificate
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} customerHashId Unique customer identifier, generated when the customer was first created.
         * @param {string} [currencies] This field accepts the list of currencies in 3-letter [ISO-4217 transaction currency code](https://docs.nium.com/apis/docs/currency-and-country-codes) for which the account ownership certificate to be generated. If no currencies are being sent in query param then account ownership certificate will be generated for all the currencies enabled to the customer.
         * @param {boolean} [currentAccountBalance] Set to &#x60;true&#x60; to include the current account balance in the response. Default is &#x60;false&#x60;.
         * @param {string} [xRequestId] Enter a unique UUID value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountOwnershipCertificate: async (clientHashId: string, customerHashId: string, currencies?: string, currentAccountBalance?: boolean, xRequestId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'clientHashId' is not null or undefined
            assertParamExists('accountOwnershipCertificate', 'clientHashId', clientHashId)
            // verify required parameter 'customerHashId' is not null or undefined
            assertParamExists('accountOwnershipCertificate', 'customerHashId', customerHashId)
            const localVarPath = `/api/v1/client/{clientHashId}/customer/{customerHashId}/accountOwnershipCertificate`
                .replace(`{${"clientHashId"}}`, encodeURIComponent(String(clientHashId)))
                .replace(`{${"customerHashId"}}`, encodeURIComponent(String(customerHashId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication default required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (currencies !== undefined) {
                localVarQueryParameter['currencies'] = currencies;
            }

            if (currentAccountBalance !== undefined) {
                localVarQueryParameter['currentAccountBalance'] = currentAccountBalance;
            }

            if (xRequestId != null) {
                localVarHeaderParameter['x-request-id'] = String(xRequestId);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This API allows you to assign virtual account numbers to customers so they can use a specific funding source.
         * @summary Assign Payment ID
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} customerHashId Unique customer identifier generated on customer creation.
         * @param {string} walletHashId Unique wallet identifier generated simultaneously with customer creation.
         * @param {PaymentIdRequestDTO2} paymentIdRequestDTO2 paymentIdRequestDTO2
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assignPaymentID: async (clientHashId: string, customerHashId: string, walletHashId: string, paymentIdRequestDTO2: PaymentIdRequestDTO2, xRequestId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'clientHashId' is not null or undefined
            assertParamExists('assignPaymentID', 'clientHashId', clientHashId)
            // verify required parameter 'customerHashId' is not null or undefined
            assertParamExists('assignPaymentID', 'customerHashId', customerHashId)
            // verify required parameter 'walletHashId' is not null or undefined
            assertParamExists('assignPaymentID', 'walletHashId', walletHashId)
            // verify required parameter 'paymentIdRequestDTO2' is not null or undefined
            assertParamExists('assignPaymentID', 'paymentIdRequestDTO2', paymentIdRequestDTO2)
            const localVarPath = `/api/v1/client/{clientHashId}/customer/{customerHashId}/wallet/{walletHashId}/paymentId`
                .replace(`{${"clientHashId"}}`, encodeURIComponent(String(clientHashId)))
                .replace(`{${"customerHashId"}}`, encodeURIComponent(String(customerHashId)))
                .replace(`{${"walletHashId"}}`, encodeURIComponent(String(walletHashId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication default required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (xRequestId != null) {
                localVarHeaderParameter['x-request-id'] = String(xRequestId);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(paymentIdRequestDTO2, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This API allows you to add, update, delete client tags against each virtual account.
         * @summary Manage Virtual Account Tags
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} customerHashId Unique customer identifier generated on customer creation.
         * @param {string} walletHashId Unique wallet identifier generated simultaneously with customer creation.
         * @param {PaymentIdTagRequestDTO} paymentIdTagRequestDTO tags
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        manageVirtualAccountTags: async (clientHashId: string, customerHashId: string, walletHashId: string, paymentIdTagRequestDTO: PaymentIdTagRequestDTO, xRequestId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'clientHashId' is not null or undefined
            assertParamExists('manageVirtualAccountTags', 'clientHashId', clientHashId)
            // verify required parameter 'customerHashId' is not null or undefined
            assertParamExists('manageVirtualAccountTags', 'customerHashId', customerHashId)
            // verify required parameter 'walletHashId' is not null or undefined
            assertParamExists('manageVirtualAccountTags', 'walletHashId', walletHashId)
            // verify required parameter 'paymentIdTagRequestDTO' is not null or undefined
            assertParamExists('manageVirtualAccountTags', 'paymentIdTagRequestDTO', paymentIdTagRequestDTO)
            const localVarPath = `/api/v1/client/{clientHashId}/customer/{customerHashId}/wallet/{walletHashId}/paymentId/tags`
                .replace(`{${"clientHashId"}}`, encodeURIComponent(String(clientHashId)))
                .replace(`{${"customerHashId"}}`, encodeURIComponent(String(customerHashId)))
                .replace(`{${"walletHashId"}}`, encodeURIComponent(String(walletHashId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication default required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (xRequestId != null) {
                localVarHeaderParameter['x-request-id'] = String(xRequestId);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(paymentIdTagRequestDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This API allows you to fetch virtual accounts assigned to a customer\'s wallet.   ⚠️ WARNING   > To access updated functionality and features we recommed using the latest version of this API [Virtual Account Details V2](/apis/reference/virtualaccountdetailsv2). Eventually, this API version will be deprecated and becomes unsupported.
         * @summary Virtual Account Details
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} customerHashId Unique customer identifier generated and shared before API handshake.
         * @param {string} walletHashId Unique wallet identifier generated and shared before API handshake.
         * @param {string} [currencyCode] 
         * @param {string} [endDate] 
         * @param {VirtualAccountDetailsOrderEnum} [order] 
         * @param {number} [page] 
         * @param {VirtualAccountDetailsPropertyEnum} [property] 
         * @param {number} [size] 
         * @param {string} [startDate] 
         * @param {string} [status] 
         * @param {string} [tagKey] 
         * @param {string} [tagValue] 
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        virtualAccountDetails: async (clientHashId: string, customerHashId: string, walletHashId: string, currencyCode?: string, endDate?: string, order?: VirtualAccountDetailsOrderEnum, page?: number, property?: VirtualAccountDetailsPropertyEnum, size?: number, startDate?: string, status?: string, tagKey?: string, tagValue?: string, xRequestId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'clientHashId' is not null or undefined
            assertParamExists('virtualAccountDetails', 'clientHashId', clientHashId)
            // verify required parameter 'customerHashId' is not null or undefined
            assertParamExists('virtualAccountDetails', 'customerHashId', customerHashId)
            // verify required parameter 'walletHashId' is not null or undefined
            assertParamExists('virtualAccountDetails', 'walletHashId', walletHashId)
            const localVarPath = `/api/v1/client/{clientHashId}/customer/{customerHashId}/wallet/{walletHashId}/paymentIds`
                .replace(`{${"clientHashId"}}`, encodeURIComponent(String(clientHashId)))
                .replace(`{${"customerHashId"}}`, encodeURIComponent(String(customerHashId)))
                .replace(`{${"walletHashId"}}`, encodeURIComponent(String(walletHashId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication default required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (currencyCode !== undefined) {
                localVarQueryParameter['currencyCode'] = currencyCode;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = endDate;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (property !== undefined) {
                localVarQueryParameter['property'] = property;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = startDate;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (tagKey !== undefined) {
                localVarQueryParameter['tagKey'] = tagKey;
            }

            if (tagValue !== undefined) {
                localVarQueryParameter['tagValue'] = tagValue;
            }

            if (xRequestId != null) {
                localVarHeaderParameter['x-request-id'] = String(xRequestId);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This API allows you to fetch virtual accounts assigned to a customer\'s wallet.
         * @summary Virtual Account Details V2
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} customerHashId Unique customer identifier generated and shared before API handshake.
         * @param {string} walletHashId Unique wallet identifier generated and shared before API handshake.
         * @param {string} [currencyCode] This field accepts the [3-letter ISO-4217 currency code](doc:currency-and-country-codes) for which routing code search is to be initiated.
         * @param {string} [endDate] End date for fetching the transaction details. The format for endDate is YYYY-MM-DD.
         * @param {VirtualAccountDetailsV2OrderEnum} [order] The sort order for the results. Acceptable values are ASC or DESC. The default order is DESC.
         * @param {number} [page] In some cases, the response can return multiple pages of data. Use this parameter to page through the returned results. The default page is 0.
         * @param {VirtualAccountDetailsV2PropertyEnum} [property] Define how to sort paginated data. The default sorting order is \&#39;createdAt\&#39;.
         * @param {number} [size] Define how many elements get retunred per response page. Accepted values can be 1-20.
         * @param {string} [startDate] The beginning date to start fetching transaction details. The format for &#x60;startDate&#x60; is YYYY-MM-DD.
         * @param {string} [status] 
         * @param {string} [tagKey] Use this parameter to filter responses, based on the exact value of &#x60;tagKey&#x60;. The &#x60;tagkey&#x60; can be used also be used as an independent search parameter.
         * @param {string} [tagValue] Use this parameter to filter responses, based on the exact value of &#x60;tagValue&#x60; (that may be mapped for a &#x60;tagKey&#x60; defined against transactions). The &#x60;tagValue&#x60; can also be used as an independent search parameter.
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        virtualAccountDetailsV2: async (clientHashId: string, customerHashId: string, walletHashId: string, currencyCode?: string, endDate?: string, order?: VirtualAccountDetailsV2OrderEnum, page?: number, property?: VirtualAccountDetailsV2PropertyEnum, size?: number, startDate?: string, status?: string, tagKey?: string, tagValue?: string, xRequestId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'clientHashId' is not null or undefined
            assertParamExists('virtualAccountDetailsV2', 'clientHashId', clientHashId)
            // verify required parameter 'customerHashId' is not null or undefined
            assertParamExists('virtualAccountDetailsV2', 'customerHashId', customerHashId)
            // verify required parameter 'walletHashId' is not null or undefined
            assertParamExists('virtualAccountDetailsV2', 'walletHashId', walletHashId)
            const localVarPath = `/api/v2/client/{clientHashId}/customer/{customerHashId}/wallet/{walletHashId}/paymentIds`
                .replace(`{${"clientHashId"}}`, encodeURIComponent(String(clientHashId)))
                .replace(`{${"customerHashId"}}`, encodeURIComponent(String(customerHashId)))
                .replace(`{${"walletHashId"}}`, encodeURIComponent(String(walletHashId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication default required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (currencyCode !== undefined) {
                localVarQueryParameter['currencyCode'] = currencyCode;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = endDate;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (property !== undefined) {
                localVarQueryParameter['property'] = property;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = startDate;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (tagKey !== undefined) {
                localVarQueryParameter['tagKey'] = tagKey;
            }

            if (tagValue !== undefined) {
                localVarQueryParameter['tagValue'] = tagValue;
            }

            if (xRequestId != null) {
                localVarHeaderParameter['x-request-id'] = String(xRequestId);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CustomerVirtualAccountsApi - functional programming interface
 * @export
 */
export const CustomerVirtualAccountsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CustomerVirtualAccountsApiAxiosParamCreator(configuration)
    return {
        /**
         * This API allows you to download an account ownership certificate.
         * @summary Account Ownership Certificate
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} customerHashId Unique customer identifier, generated when the customer was first created.
         * @param {string} [currencies] This field accepts the list of currencies in 3-letter [ISO-4217 transaction currency code](https://docs.nium.com/apis/docs/currency-and-country-codes) for which the account ownership certificate to be generated. If no currencies are being sent in query param then account ownership certificate will be generated for all the currencies enabled to the customer.
         * @param {boolean} [currentAccountBalance] Set to &#x60;true&#x60; to include the current account balance in the response. Default is &#x60;false&#x60;.
         * @param {string} [xRequestId] Enter a unique UUID value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountOwnershipCertificate(clientHashId: string, customerHashId: string, currencies?: string, currentAccountBalance?: boolean, xRequestId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountOwnershipCertificate(clientHashId, customerHashId, currencies, currentAccountBalance, xRequestId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CustomerVirtualAccountsApi.accountOwnershipCertificate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * This API allows you to assign virtual account numbers to customers so they can use a specific funding source.
         * @summary Assign Payment ID
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} customerHashId Unique customer identifier generated on customer creation.
         * @param {string} walletHashId Unique wallet identifier generated simultaneously with customer creation.
         * @param {PaymentIdRequestDTO2} paymentIdRequestDTO2 paymentIdRequestDTO2
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async assignPaymentID(clientHashId: string, customerHashId: string, walletHashId: string, paymentIdRequestDTO2: PaymentIdRequestDTO2, xRequestId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaymentIdResponseDTO2>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.assignPaymentID(clientHashId, customerHashId, walletHashId, paymentIdRequestDTO2, xRequestId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CustomerVirtualAccountsApi.assignPaymentID']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * This API allows you to add, update, delete client tags against each virtual account.
         * @summary Manage Virtual Account Tags
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} customerHashId Unique customer identifier generated on customer creation.
         * @param {string} walletHashId Unique wallet identifier generated simultaneously with customer creation.
         * @param {PaymentIdTagRequestDTO} paymentIdTagRequestDTO tags
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async manageVirtualAccountTags(clientHashId: string, customerHashId: string, walletHashId: string, paymentIdTagRequestDTO: PaymentIdTagRequestDTO, xRequestId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaymentIdCientTagsResponseDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.manageVirtualAccountTags(clientHashId, customerHashId, walletHashId, paymentIdTagRequestDTO, xRequestId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CustomerVirtualAccountsApi.manageVirtualAccountTags']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * This API allows you to fetch virtual accounts assigned to a customer\'s wallet.   ⚠️ WARNING   > To access updated functionality and features we recommed using the latest version of this API [Virtual Account Details V2](/apis/reference/virtualaccountdetailsv2). Eventually, this API version will be deprecated and becomes unsupported.
         * @summary Virtual Account Details
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} customerHashId Unique customer identifier generated and shared before API handshake.
         * @param {string} walletHashId Unique wallet identifier generated and shared before API handshake.
         * @param {string} [currencyCode] 
         * @param {string} [endDate] 
         * @param {VirtualAccountDetailsOrderEnum} [order] 
         * @param {number} [page] 
         * @param {VirtualAccountDetailsPropertyEnum} [property] 
         * @param {number} [size] 
         * @param {string} [startDate] 
         * @param {string} [status] 
         * @param {string} [tagKey] 
         * @param {string} [tagValue] 
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async virtualAccountDetails(clientHashId: string, customerHashId: string, walletHashId: string, currencyCode?: string, endDate?: string, order?: VirtualAccountDetailsOrderEnum, page?: number, property?: VirtualAccountDetailsPropertyEnum, size?: number, startDate?: string, status?: string, tagKey?: string, tagValue?: string, xRequestId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<WalletPaymentIdsResponseDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.virtualAccountDetails(clientHashId, customerHashId, walletHashId, currencyCode, endDate, order, page, property, size, startDate, status, tagKey, tagValue, xRequestId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CustomerVirtualAccountsApi.virtualAccountDetails']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * This API allows you to fetch virtual accounts assigned to a customer\'s wallet.
         * @summary Virtual Account Details V2
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} customerHashId Unique customer identifier generated and shared before API handshake.
         * @param {string} walletHashId Unique wallet identifier generated and shared before API handshake.
         * @param {string} [currencyCode] This field accepts the [3-letter ISO-4217 currency code](doc:currency-and-country-codes) for which routing code search is to be initiated.
         * @param {string} [endDate] End date for fetching the transaction details. The format for endDate is YYYY-MM-DD.
         * @param {VirtualAccountDetailsV2OrderEnum} [order] The sort order for the results. Acceptable values are ASC or DESC. The default order is DESC.
         * @param {number} [page] In some cases, the response can return multiple pages of data. Use this parameter to page through the returned results. The default page is 0.
         * @param {VirtualAccountDetailsV2PropertyEnum} [property] Define how to sort paginated data. The default sorting order is \&#39;createdAt\&#39;.
         * @param {number} [size] Define how many elements get retunred per response page. Accepted values can be 1-20.
         * @param {string} [startDate] The beginning date to start fetching transaction details. The format for &#x60;startDate&#x60; is YYYY-MM-DD.
         * @param {string} [status] 
         * @param {string} [tagKey] Use this parameter to filter responses, based on the exact value of &#x60;tagKey&#x60;. The &#x60;tagkey&#x60; can be used also be used as an independent search parameter.
         * @param {string} [tagValue] Use this parameter to filter responses, based on the exact value of &#x60;tagValue&#x60; (that may be mapped for a &#x60;tagKey&#x60; defined against transactions). The &#x60;tagValue&#x60; can also be used as an independent search parameter.
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async virtualAccountDetailsV2(clientHashId: string, customerHashId: string, walletHashId: string, currencyCode?: string, endDate?: string, order?: VirtualAccountDetailsV2OrderEnum, page?: number, property?: VirtualAccountDetailsV2PropertyEnum, size?: number, startDate?: string, status?: string, tagKey?: string, tagValue?: string, xRequestId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VirtualAccountResponseDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.virtualAccountDetailsV2(clientHashId, customerHashId, walletHashId, currencyCode, endDate, order, page, property, size, startDate, status, tagKey, tagValue, xRequestId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CustomerVirtualAccountsApi.virtualAccountDetailsV2']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CustomerVirtualAccountsApi - factory interface
 * @export
 */
export const CustomerVirtualAccountsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CustomerVirtualAccountsApiFp(configuration)
    return {
        /**
         * This API allows you to download an account ownership certificate.
         * @summary Account Ownership Certificate
         * @param {CustomerVirtualAccountsApiAccountOwnershipCertificateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountOwnershipCertificate(requestParameters: CustomerVirtualAccountsApiAccountOwnershipCertificateRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.accountOwnershipCertificate(requestParameters.clientHashId, requestParameters.customerHashId, requestParameters.currencies, requestParameters.currentAccountBalance, requestParameters.xRequestId, options).then((request) => request(axios, basePath));
        },
        /**
         * This API allows you to assign virtual account numbers to customers so they can use a specific funding source.
         * @summary Assign Payment ID
         * @param {CustomerVirtualAccountsApiAssignPaymentIDRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assignPaymentID(requestParameters: CustomerVirtualAccountsApiAssignPaymentIDRequest, options?: RawAxiosRequestConfig): AxiosPromise<PaymentIdResponseDTO2> {
            return localVarFp.assignPaymentID(requestParameters.clientHashId, requestParameters.customerHashId, requestParameters.walletHashId, requestParameters.paymentIdRequestDTO2, requestParameters.xRequestId, options).then((request) => request(axios, basePath));
        },
        /**
         * This API allows you to add, update, delete client tags against each virtual account.
         * @summary Manage Virtual Account Tags
         * @param {CustomerVirtualAccountsApiManageVirtualAccountTagsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        manageVirtualAccountTags(requestParameters: CustomerVirtualAccountsApiManageVirtualAccountTagsRequest, options?: RawAxiosRequestConfig): AxiosPromise<PaymentIdCientTagsResponseDTO> {
            return localVarFp.manageVirtualAccountTags(requestParameters.clientHashId, requestParameters.customerHashId, requestParameters.walletHashId, requestParameters.paymentIdTagRequestDTO, requestParameters.xRequestId, options).then((request) => request(axios, basePath));
        },
        /**
         * This API allows you to fetch virtual accounts assigned to a customer\'s wallet.   ⚠️ WARNING   > To access updated functionality and features we recommed using the latest version of this API [Virtual Account Details V2](/apis/reference/virtualaccountdetailsv2). Eventually, this API version will be deprecated and becomes unsupported.
         * @summary Virtual Account Details
         * @param {CustomerVirtualAccountsApiVirtualAccountDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        virtualAccountDetails(requestParameters: CustomerVirtualAccountsApiVirtualAccountDetailsRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<WalletPaymentIdsResponseDTO>> {
            return localVarFp.virtualAccountDetails(requestParameters.clientHashId, requestParameters.customerHashId, requestParameters.walletHashId, requestParameters.currencyCode, requestParameters.endDate, requestParameters.order, requestParameters.page, requestParameters.property, requestParameters.size, requestParameters.startDate, requestParameters.status, requestParameters.tagKey, requestParameters.tagValue, requestParameters.xRequestId, options).then((request) => request(axios, basePath));
        },
        /**
         * This API allows you to fetch virtual accounts assigned to a customer\'s wallet.
         * @summary Virtual Account Details V2
         * @param {CustomerVirtualAccountsApiVirtualAccountDetailsV2Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        virtualAccountDetailsV2(requestParameters: CustomerVirtualAccountsApiVirtualAccountDetailsV2Request, options?: RawAxiosRequestConfig): AxiosPromise<VirtualAccountResponseDTO> {
            return localVarFp.virtualAccountDetailsV2(requestParameters.clientHashId, requestParameters.customerHashId, requestParameters.walletHashId, requestParameters.currencyCode, requestParameters.endDate, requestParameters.order, requestParameters.page, requestParameters.property, requestParameters.size, requestParameters.startDate, requestParameters.status, requestParameters.tagKey, requestParameters.tagValue, requestParameters.xRequestId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for accountOwnershipCertificate operation in CustomerVirtualAccountsApi.
 * @export
 * @interface CustomerVirtualAccountsApiAccountOwnershipCertificateRequest
 */
export interface CustomerVirtualAccountsApiAccountOwnershipCertificateRequest {
    /**
     * Unique client identifier generated and shared before API handshake.
     * @type {string}
     * @memberof CustomerVirtualAccountsApiAccountOwnershipCertificate
     */
    readonly clientHashId: string

    /**
     * Unique customer identifier, generated when the customer was first created.
     * @type {string}
     * @memberof CustomerVirtualAccountsApiAccountOwnershipCertificate
     */
    readonly customerHashId: string

    /**
     * This field accepts the list of currencies in 3-letter [ISO-4217 transaction currency code](https://docs.nium.com/apis/docs/currency-and-country-codes) for which the account ownership certificate to be generated. If no currencies are being sent in query param then account ownership certificate will be generated for all the currencies enabled to the customer.
     * @type {string}
     * @memberof CustomerVirtualAccountsApiAccountOwnershipCertificate
     */
    readonly currencies?: string

    /**
     * Set to &#x60;true&#x60; to include the current account balance in the response. Default is &#x60;false&#x60;.
     * @type {boolean}
     * @memberof CustomerVirtualAccountsApiAccountOwnershipCertificate
     */
    readonly currentAccountBalance?: boolean

    /**
     * Enter a unique UUID value.
     * @type {string}
     * @memberof CustomerVirtualAccountsApiAccountOwnershipCertificate
     */
    readonly xRequestId?: string
}

/**
 * Request parameters for assignPaymentID operation in CustomerVirtualAccountsApi.
 * @export
 * @interface CustomerVirtualAccountsApiAssignPaymentIDRequest
 */
export interface CustomerVirtualAccountsApiAssignPaymentIDRequest {
    /**
     * Unique client identifier generated and shared before API handshake.
     * @type {string}
     * @memberof CustomerVirtualAccountsApiAssignPaymentID
     */
    readonly clientHashId: string

    /**
     * Unique customer identifier generated on customer creation.
     * @type {string}
     * @memberof CustomerVirtualAccountsApiAssignPaymentID
     */
    readonly customerHashId: string

    /**
     * Unique wallet identifier generated simultaneously with customer creation.
     * @type {string}
     * @memberof CustomerVirtualAccountsApiAssignPaymentID
     */
    readonly walletHashId: string

    /**
     * paymentIdRequestDTO2
     * @type {PaymentIdRequestDTO2}
     * @memberof CustomerVirtualAccountsApiAssignPaymentID
     */
    readonly paymentIdRequestDTO2: PaymentIdRequestDTO2

    /**
     * Enter a unique UUID value
     * @type {string}
     * @memberof CustomerVirtualAccountsApiAssignPaymentID
     */
    readonly xRequestId?: string
}

/**
 * Request parameters for manageVirtualAccountTags operation in CustomerVirtualAccountsApi.
 * @export
 * @interface CustomerVirtualAccountsApiManageVirtualAccountTagsRequest
 */
export interface CustomerVirtualAccountsApiManageVirtualAccountTagsRequest {
    /**
     * Unique client identifier generated and shared before API handshake.
     * @type {string}
     * @memberof CustomerVirtualAccountsApiManageVirtualAccountTags
     */
    readonly clientHashId: string

    /**
     * Unique customer identifier generated on customer creation.
     * @type {string}
     * @memberof CustomerVirtualAccountsApiManageVirtualAccountTags
     */
    readonly customerHashId: string

    /**
     * Unique wallet identifier generated simultaneously with customer creation.
     * @type {string}
     * @memberof CustomerVirtualAccountsApiManageVirtualAccountTags
     */
    readonly walletHashId: string

    /**
     * tags
     * @type {PaymentIdTagRequestDTO}
     * @memberof CustomerVirtualAccountsApiManageVirtualAccountTags
     */
    readonly paymentIdTagRequestDTO: PaymentIdTagRequestDTO

    /**
     * Enter a unique UUID value
     * @type {string}
     * @memberof CustomerVirtualAccountsApiManageVirtualAccountTags
     */
    readonly xRequestId?: string
}

/**
 * Request parameters for virtualAccountDetails operation in CustomerVirtualAccountsApi.
 * @export
 * @interface CustomerVirtualAccountsApiVirtualAccountDetailsRequest
 */
export interface CustomerVirtualAccountsApiVirtualAccountDetailsRequest {
    /**
     * Unique client identifier generated and shared before API handshake.
     * @type {string}
     * @memberof CustomerVirtualAccountsApiVirtualAccountDetails
     */
    readonly clientHashId: string

    /**
     * Unique customer identifier generated and shared before API handshake.
     * @type {string}
     * @memberof CustomerVirtualAccountsApiVirtualAccountDetails
     */
    readonly customerHashId: string

    /**
     * Unique wallet identifier generated and shared before API handshake.
     * @type {string}
     * @memberof CustomerVirtualAccountsApiVirtualAccountDetails
     */
    readonly walletHashId: string

    /**
     * 
     * @type {string}
     * @memberof CustomerVirtualAccountsApiVirtualAccountDetails
     */
    readonly currencyCode?: string

    /**
     * 
     * @type {string}
     * @memberof CustomerVirtualAccountsApiVirtualAccountDetails
     */
    readonly endDate?: string

    /**
     * 
     * @type {'DESC' | 'ASC'}
     * @memberof CustomerVirtualAccountsApiVirtualAccountDetails
     */
    readonly order?: VirtualAccountDetailsOrderEnum

    /**
     * 
     * @type {number}
     * @memberof CustomerVirtualAccountsApiVirtualAccountDetails
     */
    readonly page?: number

    /**
     * 
     * @type {'createdAt'}
     * @memberof CustomerVirtualAccountsApiVirtualAccountDetails
     */
    readonly property?: VirtualAccountDetailsPropertyEnum

    /**
     * 
     * @type {number}
     * @memberof CustomerVirtualAccountsApiVirtualAccountDetails
     */
    readonly size?: number

    /**
     * 
     * @type {string}
     * @memberof CustomerVirtualAccountsApiVirtualAccountDetails
     */
    readonly startDate?: string

    /**
     * 
     * @type {string}
     * @memberof CustomerVirtualAccountsApiVirtualAccountDetails
     */
    readonly status?: string

    /**
     * 
     * @type {string}
     * @memberof CustomerVirtualAccountsApiVirtualAccountDetails
     */
    readonly tagKey?: string

    /**
     * 
     * @type {string}
     * @memberof CustomerVirtualAccountsApiVirtualAccountDetails
     */
    readonly tagValue?: string

    /**
     * Enter a unique UUID value
     * @type {string}
     * @memberof CustomerVirtualAccountsApiVirtualAccountDetails
     */
    readonly xRequestId?: string
}

/**
 * Request parameters for virtualAccountDetailsV2 operation in CustomerVirtualAccountsApi.
 * @export
 * @interface CustomerVirtualAccountsApiVirtualAccountDetailsV2Request
 */
export interface CustomerVirtualAccountsApiVirtualAccountDetailsV2Request {
    /**
     * Unique client identifier generated and shared before API handshake.
     * @type {string}
     * @memberof CustomerVirtualAccountsApiVirtualAccountDetailsV2
     */
    readonly clientHashId: string

    /**
     * Unique customer identifier generated and shared before API handshake.
     * @type {string}
     * @memberof CustomerVirtualAccountsApiVirtualAccountDetailsV2
     */
    readonly customerHashId: string

    /**
     * Unique wallet identifier generated and shared before API handshake.
     * @type {string}
     * @memberof CustomerVirtualAccountsApiVirtualAccountDetailsV2
     */
    readonly walletHashId: string

    /**
     * This field accepts the [3-letter ISO-4217 currency code](doc:currency-and-country-codes) for which routing code search is to be initiated.
     * @type {string}
     * @memberof CustomerVirtualAccountsApiVirtualAccountDetailsV2
     */
    readonly currencyCode?: string

    /**
     * End date for fetching the transaction details. The format for endDate is YYYY-MM-DD.
     * @type {string}
     * @memberof CustomerVirtualAccountsApiVirtualAccountDetailsV2
     */
    readonly endDate?: string

    /**
     * The sort order for the results. Acceptable values are ASC or DESC. The default order is DESC.
     * @type {'DESC' | 'ASC'}
     * @memberof CustomerVirtualAccountsApiVirtualAccountDetailsV2
     */
    readonly order?: VirtualAccountDetailsV2OrderEnum

    /**
     * In some cases, the response can return multiple pages of data. Use this parameter to page through the returned results. The default page is 0.
     * @type {number}
     * @memberof CustomerVirtualAccountsApiVirtualAccountDetailsV2
     */
    readonly page?: number

    /**
     * Define how to sort paginated data. The default sorting order is \&#39;createdAt\&#39;.
     * @type {'createdAt'}
     * @memberof CustomerVirtualAccountsApiVirtualAccountDetailsV2
     */
    readonly property?: VirtualAccountDetailsV2PropertyEnum

    /**
     * Define how many elements get retunred per response page. Accepted values can be 1-20.
     * @type {number}
     * @memberof CustomerVirtualAccountsApiVirtualAccountDetailsV2
     */
    readonly size?: number

    /**
     * The beginning date to start fetching transaction details. The format for &#x60;startDate&#x60; is YYYY-MM-DD.
     * @type {string}
     * @memberof CustomerVirtualAccountsApiVirtualAccountDetailsV2
     */
    readonly startDate?: string

    /**
     * 
     * @type {string}
     * @memberof CustomerVirtualAccountsApiVirtualAccountDetailsV2
     */
    readonly status?: string

    /**
     * Use this parameter to filter responses, based on the exact value of &#x60;tagKey&#x60;. The &#x60;tagkey&#x60; can be used also be used as an independent search parameter.
     * @type {string}
     * @memberof CustomerVirtualAccountsApiVirtualAccountDetailsV2
     */
    readonly tagKey?: string

    /**
     * Use this parameter to filter responses, based on the exact value of &#x60;tagValue&#x60; (that may be mapped for a &#x60;tagKey&#x60; defined against transactions). The &#x60;tagValue&#x60; can also be used as an independent search parameter.
     * @type {string}
     * @memberof CustomerVirtualAccountsApiVirtualAccountDetailsV2
     */
    readonly tagValue?: string

    /**
     * Enter a unique UUID value
     * @type {string}
     * @memberof CustomerVirtualAccountsApiVirtualAccountDetailsV2
     */
    readonly xRequestId?: string
}

/**
 * CustomerVirtualAccountsApi - object-oriented interface
 * @export
 * @class CustomerVirtualAccountsApi
 * @extends {BaseAPI}
 */
export class CustomerVirtualAccountsApi extends BaseAPI {
    /**
     * This API allows you to download an account ownership certificate.
     * @summary Account Ownership Certificate
     * @param {CustomerVirtualAccountsApiAccountOwnershipCertificateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerVirtualAccountsApi
     */
    public accountOwnershipCertificate(requestParameters: CustomerVirtualAccountsApiAccountOwnershipCertificateRequest, options?: RawAxiosRequestConfig) {
        return CustomerVirtualAccountsApiFp(this.configuration).accountOwnershipCertificate(requestParameters.clientHashId, requestParameters.customerHashId, requestParameters.currencies, requestParameters.currentAccountBalance, requestParameters.xRequestId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This API allows you to assign virtual account numbers to customers so they can use a specific funding source.
     * @summary Assign Payment ID
     * @param {CustomerVirtualAccountsApiAssignPaymentIDRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerVirtualAccountsApi
     */
    public assignPaymentID(requestParameters: CustomerVirtualAccountsApiAssignPaymentIDRequest, options?: RawAxiosRequestConfig) {
        return CustomerVirtualAccountsApiFp(this.configuration).assignPaymentID(requestParameters.clientHashId, requestParameters.customerHashId, requestParameters.walletHashId, requestParameters.paymentIdRequestDTO2, requestParameters.xRequestId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This API allows you to add, update, delete client tags against each virtual account.
     * @summary Manage Virtual Account Tags
     * @param {CustomerVirtualAccountsApiManageVirtualAccountTagsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerVirtualAccountsApi
     */
    public manageVirtualAccountTags(requestParameters: CustomerVirtualAccountsApiManageVirtualAccountTagsRequest, options?: RawAxiosRequestConfig) {
        return CustomerVirtualAccountsApiFp(this.configuration).manageVirtualAccountTags(requestParameters.clientHashId, requestParameters.customerHashId, requestParameters.walletHashId, requestParameters.paymentIdTagRequestDTO, requestParameters.xRequestId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This API allows you to fetch virtual accounts assigned to a customer\'s wallet.   ⚠️ WARNING   > To access updated functionality and features we recommed using the latest version of this API [Virtual Account Details V2](/apis/reference/virtualaccountdetailsv2). Eventually, this API version will be deprecated and becomes unsupported.
     * @summary Virtual Account Details
     * @param {CustomerVirtualAccountsApiVirtualAccountDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerVirtualAccountsApi
     */
    public virtualAccountDetails(requestParameters: CustomerVirtualAccountsApiVirtualAccountDetailsRequest, options?: RawAxiosRequestConfig) {
        return CustomerVirtualAccountsApiFp(this.configuration).virtualAccountDetails(requestParameters.clientHashId, requestParameters.customerHashId, requestParameters.walletHashId, requestParameters.currencyCode, requestParameters.endDate, requestParameters.order, requestParameters.page, requestParameters.property, requestParameters.size, requestParameters.startDate, requestParameters.status, requestParameters.tagKey, requestParameters.tagValue, requestParameters.xRequestId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This API allows you to fetch virtual accounts assigned to a customer\'s wallet.
     * @summary Virtual Account Details V2
     * @param {CustomerVirtualAccountsApiVirtualAccountDetailsV2Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerVirtualAccountsApi
     */
    public virtualAccountDetailsV2(requestParameters: CustomerVirtualAccountsApiVirtualAccountDetailsV2Request, options?: RawAxiosRequestConfig) {
        return CustomerVirtualAccountsApiFp(this.configuration).virtualAccountDetailsV2(requestParameters.clientHashId, requestParameters.customerHashId, requestParameters.walletHashId, requestParameters.currencyCode, requestParameters.endDate, requestParameters.order, requestParameters.page, requestParameters.property, requestParameters.size, requestParameters.startDate, requestParameters.status, requestParameters.tagKey, requestParameters.tagValue, requestParameters.xRequestId, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const VirtualAccountDetailsOrderEnum = {
    Desc: 'DESC',
    Asc: 'ASC'
} as const;
export type VirtualAccountDetailsOrderEnum = typeof VirtualAccountDetailsOrderEnum[keyof typeof VirtualAccountDetailsOrderEnum];
/**
 * @export
 */
export const VirtualAccountDetailsPropertyEnum = {
    CreatedAt: 'createdAt'
} as const;
export type VirtualAccountDetailsPropertyEnum = typeof VirtualAccountDetailsPropertyEnum[keyof typeof VirtualAccountDetailsPropertyEnum];
/**
 * @export
 */
export const VirtualAccountDetailsV2OrderEnum = {
    Desc: 'DESC',
    Asc: 'ASC'
} as const;
export type VirtualAccountDetailsV2OrderEnum = typeof VirtualAccountDetailsV2OrderEnum[keyof typeof VirtualAccountDetailsV2OrderEnum];
/**
 * @export
 */
export const VirtualAccountDetailsV2PropertyEnum = {
    CreatedAt: 'createdAt'
} as const;
export type VirtualAccountDetailsV2PropertyEnum = typeof VirtualAccountDetailsV2PropertyEnum[keyof typeof VirtualAccountDetailsV2PropertyEnum];
