/* tslint:disable */
/* eslint-disable */
/**
 * NIUM Platform
 * NIUM Platform
 *
 * The version of the OpenAPI document: 2023.12.12
 * Contact: experience@nium.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import { AccountValidationRequestDTO } from '../model';
// @ts-ignore
import { AccountValidationResponseDTO } from '../model';
// @ts-ignore
import { AddBeneficiaryRequest } from '../model';
// @ts-ignore
import { AddBeneficiaryRequestDTO } from '../model';
// @ts-ignore
import { BeneficiaryResponseDTO } from '../model';
// @ts-ignore
import { BeneficiaryValidationRequestDTO } from '../model';
// @ts-ignore
import { BeneficiaryValidationResponseDTO } from '../model';
// @ts-ignore
import { PayoutCustomerApiError } from '../model';
// @ts-ignore
import { Resource } from '../model';
// @ts-ignore
import { UpdateBeneficiaryRequestDTO } from '../model';
// @ts-ignore
import { WalletApiError } from '../model';
/**
 * BeneficiaryApi - axios parameter creator
 * @export
 */
export const BeneficiaryApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This API allows you to verify a beneficiary account details. > > ℹ️ INFO   >This API only supports account verification for certain destination corridors. >Refer to the   [Account verification user guide](/apis/docs/account-verification#supported-corridors-for-account-verification) for details.
         * @summary Account verification (Confirmation of Payee)
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} customerHashId Unique customer identifier generated on customer creation.
         * @param {AccountValidationRequestDTO} accountValidationRequestDTO accountValidationRequestDTO
         * @param {string} [xRequestId] Enter a unique UUID value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountVerification: async (clientHashId: string, customerHashId: string, accountValidationRequestDTO: AccountValidationRequestDTO, xRequestId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'clientHashId' is not null or undefined
            assertParamExists('accountVerification', 'clientHashId', clientHashId)
            // verify required parameter 'customerHashId' is not null or undefined
            assertParamExists('accountVerification', 'customerHashId', customerHashId)
            // verify required parameter 'accountValidationRequestDTO' is not null or undefined
            assertParamExists('accountVerification', 'accountValidationRequestDTO', accountValidationRequestDTO)
            const localVarPath = `/api/v1/client/{clientHashId}/customer/{customerHashId}/accountVerification`
                .replace(`{${"clientHashId"}}`, encodeURIComponent(String(clientHashId)))
                .replace(`{${"customerHashId"}}`, encodeURIComponent(String(customerHashId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication default required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (xRequestId != null) {
                localVarHeaderParameter['x-request-id'] = String(xRequestId);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(accountValidationRequestDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This API allows you to add a beneficiary to transfer funds.  >⚠️ WARNING   >This API version is deprecated. Eventually, a deprecated API version becomes unsupported. [Add Beneficiary V2](/apis/reference/addbeneficiaryv2) is the latest version of this API.
         * @summary Add Beneficiary
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} customerHashId Unique customer identifier generated on customer creation.
         * @param {AddBeneficiaryRequest} addBeneficiaryRequest addBeneficiaryRequest
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addBeneficiary: async (clientHashId: string, customerHashId: string, addBeneficiaryRequest: AddBeneficiaryRequest, xRequestId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'clientHashId' is not null or undefined
            assertParamExists('addBeneficiary', 'clientHashId', clientHashId)
            // verify required parameter 'customerHashId' is not null or undefined
            assertParamExists('addBeneficiary', 'customerHashId', customerHashId)
            // verify required parameter 'addBeneficiaryRequest' is not null or undefined
            assertParamExists('addBeneficiary', 'addBeneficiaryRequest', addBeneficiaryRequest)
            const localVarPath = `/api/v1/client/{clientHashId}/customer/{customerHashId}/beneficiaries`
                .replace(`{${"clientHashId"}}`, encodeURIComponent(String(clientHashId)))
                .replace(`{${"customerHashId"}}`, encodeURIComponent(String(customerHashId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication default required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (xRequestId != null) {
                localVarHeaderParameter['x-request-id'] = String(xRequestId);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(addBeneficiaryRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This API allows you to add a beneficiary to transfer funds.   > ⚠️ IMPORTANT    Some fields are conditional based on corridors. Use the [Beneficiary Validation Schema V2](/apis/reference/beneficiaryvalidationschemav2) with the currency code and payout method to determine if a field is required or not.
         * @summary Add Beneficiary V2
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} customerHashId Unique customer identifier generated on customer creation.
         * @param {AddBeneficiaryRequestDTO} addBeneficiaryRequestDTO addBeneficiaryRequestDTO
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addBeneficiaryV2: async (clientHashId: string, customerHashId: string, addBeneficiaryRequestDTO: AddBeneficiaryRequestDTO, xRequestId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'clientHashId' is not null or undefined
            assertParamExists('addBeneficiaryV2', 'clientHashId', clientHashId)
            // verify required parameter 'customerHashId' is not null or undefined
            assertParamExists('addBeneficiaryV2', 'customerHashId', customerHashId)
            // verify required parameter 'addBeneficiaryRequestDTO' is not null or undefined
            assertParamExists('addBeneficiaryV2', 'addBeneficiaryRequestDTO', addBeneficiaryRequestDTO)
            const localVarPath = `/api/v2/client/{clientHashId}/customer/{customerHashId}/beneficiaries`
                .replace(`{${"clientHashId"}}`, encodeURIComponent(String(clientHashId)))
                .replace(`{${"customerHashId"}}`, encodeURIComponent(String(customerHashId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication default required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (xRequestId != null) {
                localVarHeaderParameter['x-request-id'] = String(xRequestId);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(addBeneficiaryRequestDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This API allows you to fetch beneficiary details of an individual beneficiary.  >⚠️ WARNING   >This API version is deprecated. Eventually, a deprecated API version becomes unsupported. [Beneficiary Details V2](/apis/reference/beneficiarydetailsv2) is the latest version of this API.
         * @summary Beneficiary Details
         * @param {string} beneficiaryHashId Unique beneficiary hash ID.
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} customerHashId Unique customer identifier generated on customer creation.
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        beneficiaryDetails: async (beneficiaryHashId: string, clientHashId: string, customerHashId: string, xRequestId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'beneficiaryHashId' is not null or undefined
            assertParamExists('beneficiaryDetails', 'beneficiaryHashId', beneficiaryHashId)
            // verify required parameter 'clientHashId' is not null or undefined
            assertParamExists('beneficiaryDetails', 'clientHashId', clientHashId)
            // verify required parameter 'customerHashId' is not null or undefined
            assertParamExists('beneficiaryDetails', 'customerHashId', customerHashId)
            const localVarPath = `/api/v1/client/{clientHashId}/customer/{customerHashId}/beneficiaries/{beneficiaryHashId}`
                .replace(`{${"beneficiaryHashId"}}`, encodeURIComponent(String(beneficiaryHashId)))
                .replace(`{${"clientHashId"}}`, encodeURIComponent(String(clientHashId)))
                .replace(`{${"customerHashId"}}`, encodeURIComponent(String(customerHashId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication default required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (xRequestId != null) {
                localVarHeaderParameter['x-request-id'] = String(xRequestId);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This API allows you to fetch beneficiary details of an individual beneficiary.
         * @summary Beneficiary Details V2
         * @param {string} beneficiaryHashId Unique beneficiary hash ID.
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} customerHashId Unique customer identifier generated on customer creation.
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        beneficiaryDetailsV2: async (beneficiaryHashId: string, clientHashId: string, customerHashId: string, xRequestId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'beneficiaryHashId' is not null or undefined
            assertParamExists('beneficiaryDetailsV2', 'beneficiaryHashId', beneficiaryHashId)
            // verify required parameter 'clientHashId' is not null or undefined
            assertParamExists('beneficiaryDetailsV2', 'clientHashId', clientHashId)
            // verify required parameter 'customerHashId' is not null or undefined
            assertParamExists('beneficiaryDetailsV2', 'customerHashId', customerHashId)
            const localVarPath = `/api/v2/client/{clientHashId}/customer/{customerHashId}/beneficiaries/{beneficiaryHashId}`
                .replace(`{${"beneficiaryHashId"}}`, encodeURIComponent(String(beneficiaryHashId)))
                .replace(`{${"clientHashId"}}`, encodeURIComponent(String(clientHashId)))
                .replace(`{${"customerHashId"}}`, encodeURIComponent(String(customerHashId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication default required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (xRequestId != null) {
                localVarHeaderParameter['x-request-id'] = String(xRequestId);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This API allows you to fetch beneficiary details.  >⚠️ WARNING   >This API version is deprecated. Eventually, a deprecated API version becomes unsupported. [Beneficiary List V2](/apis/reference/beneficiarylistv2) is the latest version of this API.
         * @summary Beneficiary List
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} customerHashId Unique customer identifier generated on customer creation.
         * @param {Array<{ [key: string]: string; }>} [parameters] parameters
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        beneficiaryList: async (clientHashId: string, customerHashId: string, parameters?: Array<{ [key: string]: string; }>, xRequestId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'clientHashId' is not null or undefined
            assertParamExists('beneficiaryList', 'clientHashId', clientHashId)
            // verify required parameter 'customerHashId' is not null or undefined
            assertParamExists('beneficiaryList', 'customerHashId', customerHashId)
            const localVarPath = `/api/v1/client/{clientHashId}/customer/{customerHashId}/beneficiaries`
                .replace(`{${"clientHashId"}}`, encodeURIComponent(String(clientHashId)))
                .replace(`{${"customerHashId"}}`, encodeURIComponent(String(customerHashId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication default required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (parameters) {
                localVarQueryParameter['parameters'] = parameters;
            }

            if (xRequestId != null) {
                localVarHeaderParameter['x-request-id'] = String(xRequestId);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This API allows you to fetch beneficiary details.
         * @summary Beneficiary List V2
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} customerHashId Unique customer identifier generated on customer creation.
         * @param {Array<{ [key: string]: string; }>} [parameters] parameters
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        beneficiaryListV2: async (clientHashId: string, customerHashId: string, parameters?: Array<{ [key: string]: string; }>, xRequestId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'clientHashId' is not null or undefined
            assertParamExists('beneficiaryListV2', 'clientHashId', clientHashId)
            // verify required parameter 'customerHashId' is not null or undefined
            assertParamExists('beneficiaryListV2', 'customerHashId', customerHashId)
            const localVarPath = `/api/v2/client/{clientHashId}/customer/{customerHashId}/beneficiaries`
                .replace(`{${"clientHashId"}}`, encodeURIComponent(String(clientHashId)))
                .replace(`{${"customerHashId"}}`, encodeURIComponent(String(customerHashId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication default required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (parameters) {
                localVarQueryParameter['parameters'] = parameters;
            }

            if (xRequestId != null) {
                localVarHeaderParameter['x-request-id'] = String(xRequestId);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This API will allow you to fetch the validation schema for beneficiary validation details.  >⚠️ WARNING   >This API version is deprecated. Eventually, a deprecated API version becomes unsupported. [Beneficiary Validation Schema V2](/apis/reference/beneficiaryvalidationschemav2) is the latest version of this API.
         * @summary Beneficiary Validation Schema
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} currencyCode This field accepts the 3-letter [ISO-4217 currency code](doc:currency-and-country-codes).
         * @param {string} customerHashId Unique customer identifier generated on customer creation.
         * @param {string} [payoutMethod] This field can accept the different modes of payout.This field can accept one of the following values: 1.LOCAL 2.SWIFT 3.WALLET Default value of the parameter is LOCAL.
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        beneficiaryValidationSchema: async (clientHashId: string, currencyCode: string, customerHashId: string, payoutMethod?: string, xRequestId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'clientHashId' is not null or undefined
            assertParamExists('beneficiaryValidationSchema', 'clientHashId', clientHashId)
            // verify required parameter 'currencyCode' is not null or undefined
            assertParamExists('beneficiaryValidationSchema', 'currencyCode', currencyCode)
            // verify required parameter 'customerHashId' is not null or undefined
            assertParamExists('beneficiaryValidationSchema', 'customerHashId', customerHashId)
            const localVarPath = `/api/v1/client/{clientHashId}/customer/{customerHashId}/currency/{currencyCode}/validationSchemas`
                .replace(`{${"clientHashId"}}`, encodeURIComponent(String(clientHashId)))
                .replace(`{${"currencyCode"}}`, encodeURIComponent(String(currencyCode)))
                .replace(`{${"customerHashId"}}`, encodeURIComponent(String(customerHashId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication default required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (payoutMethod !== undefined) {
                localVarQueryParameter['payoutMethod'] = payoutMethod;
            }

            if (xRequestId != null) {
                localVarHeaderParameter['x-request-id'] = String(xRequestId);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This API will allow you to fetch the validation schema for beneficiary validation details.
         * @summary Beneficiary Validation Schema V2
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} currencyCode This field accepts the 3-letter [ISO-4217 currency code](doc:currency-and-country-codes).
         * @param {string} customerHashId Unique customer identifier generated on customer creation.
         * @param {string} [payoutMethod] This field can accept the different modes of payout.
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        beneficiaryValidationSchemaV2: async (clientHashId: string, currencyCode: string, customerHashId: string, payoutMethod?: string, xRequestId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'clientHashId' is not null or undefined
            assertParamExists('beneficiaryValidationSchemaV2', 'clientHashId', clientHashId)
            // verify required parameter 'currencyCode' is not null or undefined
            assertParamExists('beneficiaryValidationSchemaV2', 'currencyCode', currencyCode)
            // verify required parameter 'customerHashId' is not null or undefined
            assertParamExists('beneficiaryValidationSchemaV2', 'customerHashId', customerHashId)
            const localVarPath = `/api/v2/client/{clientHashId}/customer/{customerHashId}/currency/{currencyCode}/validationSchemas`
                .replace(`{${"clientHashId"}}`, encodeURIComponent(String(clientHashId)))
                .replace(`{${"currencyCode"}}`, encodeURIComponent(String(currencyCode)))
                .replace(`{${"customerHashId"}}`, encodeURIComponent(String(customerHashId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication default required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (payoutMethod !== undefined) {
                localVarQueryParameter['payoutMethod'] = payoutMethod;
            }

            if (xRequestId != null) {
                localVarHeaderParameter['x-request-id'] = String(xRequestId);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This API allows you to Validate Beneficiary Details.  >ℹ️ INFO   >This API only supports account verification for below destination corridors. >**For LOCAL payment method:** Vietnam (VN), Thailand (TH), India (IN), Pakistan(PK), Malaysia(MY), Indonesia (ID) >**For PROXY payment method:** Singapore (SG), India (IN), Malaysia(MY)
         * @summary Confirmation of Payee (Previous version)
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} customerHashId Unique customer identifier generated on customer creation.
         * @param {BeneficiaryValidationRequestDTO} beneficiaryValidationRequestDTO beneficiaryValidationRequestDTO
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        confirmationofPayee: async (clientHashId: string, customerHashId: string, beneficiaryValidationRequestDTO: BeneficiaryValidationRequestDTO, xRequestId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'clientHashId' is not null or undefined
            assertParamExists('confirmationofPayee', 'clientHashId', clientHashId)
            // verify required parameter 'customerHashId' is not null or undefined
            assertParamExists('confirmationofPayee', 'customerHashId', customerHashId)
            // verify required parameter 'beneficiaryValidationRequestDTO' is not null or undefined
            assertParamExists('confirmationofPayee', 'beneficiaryValidationRequestDTO', beneficiaryValidationRequestDTO)
            const localVarPath = `/api/v2/client/{clientHashId}/customer/{customerHashId}/beneficiaries/validate`
                .replace(`{${"clientHashId"}}`, encodeURIComponent(String(clientHashId)))
                .replace(`{${"customerHashId"}}`, encodeURIComponent(String(customerHashId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication default required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (xRequestId != null) {
                localVarHeaderParameter['x-request-id'] = String(xRequestId);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(beneficiaryValidationRequestDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This API allows you to delete a beneficiary.
         * @summary Delete Beneficiary
         * @param {string} beneficiaryHashId Unique beneficiary hash ID.
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} customerHashId Unique customer identifier generated on customer creation.
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBeneficiary: async (beneficiaryHashId: string, clientHashId: string, customerHashId: string, xRequestId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'beneficiaryHashId' is not null or undefined
            assertParamExists('deleteBeneficiary', 'beneficiaryHashId', beneficiaryHashId)
            // verify required parameter 'clientHashId' is not null or undefined
            assertParamExists('deleteBeneficiary', 'clientHashId', clientHashId)
            // verify required parameter 'customerHashId' is not null or undefined
            assertParamExists('deleteBeneficiary', 'customerHashId', customerHashId)
            const localVarPath = `/api/v1/client/{clientHashId}/customer/{customerHashId}/beneficiaries/{beneficiaryHashId}`
                .replace(`{${"beneficiaryHashId"}}`, encodeURIComponent(String(beneficiaryHashId)))
                .replace(`{${"clientHashId"}}`, encodeURIComponent(String(clientHashId)))
                .replace(`{${"customerHashId"}}`, encodeURIComponent(String(customerHashId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication default required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (xRequestId != null) {
                localVarHeaderParameter['x-request-id'] = String(xRequestId);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This API allows you to update beneficiary details.
         * @summary Update Beneficiary
         * @param {string} beneficiaryHashId Unique beneficiary hash ID.
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} customerHashId Unique customer identifier generated on customer creation.
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {AddBeneficiaryRequest} [addBeneficiaryRequest] Info:  Update Beneficiary API will be restricted when a remittance transaction for the beneficiary is Pending.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBeneficiary: async (beneficiaryHashId: string, clientHashId: string, customerHashId: string, xRequestId?: string, addBeneficiaryRequest?: AddBeneficiaryRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'beneficiaryHashId' is not null or undefined
            assertParamExists('updateBeneficiary', 'beneficiaryHashId', beneficiaryHashId)
            // verify required parameter 'clientHashId' is not null or undefined
            assertParamExists('updateBeneficiary', 'clientHashId', clientHashId)
            // verify required parameter 'customerHashId' is not null or undefined
            assertParamExists('updateBeneficiary', 'customerHashId', customerHashId)
            const localVarPath = `/api/v1/client/{clientHashId}/customer/{customerHashId}/beneficiaries/{beneficiaryHashId}`
                .replace(`{${"beneficiaryHashId"}}`, encodeURIComponent(String(beneficiaryHashId)))
                .replace(`{${"clientHashId"}}`, encodeURIComponent(String(clientHashId)))
                .replace(`{${"customerHashId"}}`, encodeURIComponent(String(customerHashId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication default required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (xRequestId != null) {
                localVarHeaderParameter['x-request-id'] = String(xRequestId);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(addBeneficiaryRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This API allows you to update beneficiary details.
         * @summary Update Beneficiary V2
         * @param {string} beneficiaryHashId Unique beneficiary hash ID.
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} customerHashId Unique customer identifier generated on customer creation.
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {UpdateBeneficiaryRequestDTO} [updateBeneficiaryRequestDTO] Info:  Update Beneficiary API will be restricted when a remittance transaction for the beneficiary is Pending.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBeneficiaryV2: async (beneficiaryHashId: string, clientHashId: string, customerHashId: string, xRequestId?: string, updateBeneficiaryRequestDTO?: UpdateBeneficiaryRequestDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'beneficiaryHashId' is not null or undefined
            assertParamExists('updateBeneficiaryV2', 'beneficiaryHashId', beneficiaryHashId)
            // verify required parameter 'clientHashId' is not null or undefined
            assertParamExists('updateBeneficiaryV2', 'clientHashId', clientHashId)
            // verify required parameter 'customerHashId' is not null or undefined
            assertParamExists('updateBeneficiaryV2', 'customerHashId', customerHashId)
            const localVarPath = `/api/v2/client/{clientHashId}/customer/{customerHashId}/beneficiaries/{beneficiaryHashId}`
                .replace(`{${"beneficiaryHashId"}}`, encodeURIComponent(String(beneficiaryHashId)))
                .replace(`{${"clientHashId"}}`, encodeURIComponent(String(clientHashId)))
                .replace(`{${"customerHashId"}}`, encodeURIComponent(String(customerHashId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication default required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (xRequestId != null) {
                localVarHeaderParameter['x-request-id'] = String(xRequestId);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateBeneficiaryRequestDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BeneficiaryApi - functional programming interface
 * @export
 */
export const BeneficiaryApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BeneficiaryApiAxiosParamCreator(configuration)
    return {
        /**
         * This API allows you to verify a beneficiary account details. > > ℹ️ INFO   >This API only supports account verification for certain destination corridors. >Refer to the   [Account verification user guide](/apis/docs/account-verification#supported-corridors-for-account-verification) for details.
         * @summary Account verification (Confirmation of Payee)
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} customerHashId Unique customer identifier generated on customer creation.
         * @param {AccountValidationRequestDTO} accountValidationRequestDTO accountValidationRequestDTO
         * @param {string} [xRequestId] Enter a unique UUID value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountVerification(clientHashId: string, customerHashId: string, accountValidationRequestDTO: AccountValidationRequestDTO, xRequestId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountValidationResponseDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountVerification(clientHashId, customerHashId, accountValidationRequestDTO, xRequestId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BeneficiaryApi.accountVerification']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * This API allows you to add a beneficiary to transfer funds.  >⚠️ WARNING   >This API version is deprecated. Eventually, a deprecated API version becomes unsupported. [Add Beneficiary V2](/apis/reference/addbeneficiaryv2) is the latest version of this API.
         * @summary Add Beneficiary
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} customerHashId Unique customer identifier generated on customer creation.
         * @param {AddBeneficiaryRequest} addBeneficiaryRequest addBeneficiaryRequest
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addBeneficiary(clientHashId: string, customerHashId: string, addBeneficiaryRequest: AddBeneficiaryRequest, xRequestId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Resource>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addBeneficiary(clientHashId, customerHashId, addBeneficiaryRequest, xRequestId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BeneficiaryApi.addBeneficiary']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * This API allows you to add a beneficiary to transfer funds.   > ⚠️ IMPORTANT    Some fields are conditional based on corridors. Use the [Beneficiary Validation Schema V2](/apis/reference/beneficiaryvalidationschemav2) with the currency code and payout method to determine if a field is required or not.
         * @summary Add Beneficiary V2
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} customerHashId Unique customer identifier generated on customer creation.
         * @param {AddBeneficiaryRequestDTO} addBeneficiaryRequestDTO addBeneficiaryRequestDTO
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addBeneficiaryV2(clientHashId: string, customerHashId: string, addBeneficiaryRequestDTO: AddBeneficiaryRequestDTO, xRequestId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BeneficiaryResponseDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addBeneficiaryV2(clientHashId, customerHashId, addBeneficiaryRequestDTO, xRequestId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BeneficiaryApi.addBeneficiaryV2']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * This API allows you to fetch beneficiary details of an individual beneficiary.  >⚠️ WARNING   >This API version is deprecated. Eventually, a deprecated API version becomes unsupported. [Beneficiary Details V2](/apis/reference/beneficiarydetailsv2) is the latest version of this API.
         * @summary Beneficiary Details
         * @param {string} beneficiaryHashId Unique beneficiary hash ID.
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} customerHashId Unique customer identifier generated on customer creation.
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async beneficiaryDetails(beneficiaryHashId: string, clientHashId: string, customerHashId: string, xRequestId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Resource>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.beneficiaryDetails(beneficiaryHashId, clientHashId, customerHashId, xRequestId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BeneficiaryApi.beneficiaryDetails']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * This API allows you to fetch beneficiary details of an individual beneficiary.
         * @summary Beneficiary Details V2
         * @param {string} beneficiaryHashId Unique beneficiary hash ID.
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} customerHashId Unique customer identifier generated on customer creation.
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async beneficiaryDetailsV2(beneficiaryHashId: string, clientHashId: string, customerHashId: string, xRequestId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BeneficiaryResponseDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.beneficiaryDetailsV2(beneficiaryHashId, clientHashId, customerHashId, xRequestId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BeneficiaryApi.beneficiaryDetailsV2']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * This API allows you to fetch beneficiary details.  >⚠️ WARNING   >This API version is deprecated. Eventually, a deprecated API version becomes unsupported. [Beneficiary List V2](/apis/reference/beneficiarylistv2) is the latest version of this API.
         * @summary Beneficiary List
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} customerHashId Unique customer identifier generated on customer creation.
         * @param {Array<{ [key: string]: string; }>} [parameters] parameters
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async beneficiaryList(clientHashId: string, customerHashId: string, parameters?: Array<{ [key: string]: string; }>, xRequestId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Resource>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.beneficiaryList(clientHashId, customerHashId, parameters, xRequestId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BeneficiaryApi.beneficiaryList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * This API allows you to fetch beneficiary details.
         * @summary Beneficiary List V2
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} customerHashId Unique customer identifier generated on customer creation.
         * @param {Array<{ [key: string]: string; }>} [parameters] parameters
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async beneficiaryListV2(clientHashId: string, customerHashId: string, parameters?: Array<{ [key: string]: string; }>, xRequestId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<BeneficiaryResponseDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.beneficiaryListV2(clientHashId, customerHashId, parameters, xRequestId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BeneficiaryApi.beneficiaryListV2']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * This API will allow you to fetch the validation schema for beneficiary validation details.  >⚠️ WARNING   >This API version is deprecated. Eventually, a deprecated API version becomes unsupported. [Beneficiary Validation Schema V2](/apis/reference/beneficiaryvalidationschemav2) is the latest version of this API.
         * @summary Beneficiary Validation Schema
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} currencyCode This field accepts the 3-letter [ISO-4217 currency code](doc:currency-and-country-codes).
         * @param {string} customerHashId Unique customer identifier generated on customer creation.
         * @param {string} [payoutMethod] This field can accept the different modes of payout.This field can accept one of the following values: 1.LOCAL 2.SWIFT 3.WALLET Default value of the parameter is LOCAL.
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async beneficiaryValidationSchema(clientHashId: string, currencyCode: string, customerHashId: string, payoutMethod?: string, xRequestId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Resource>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.beneficiaryValidationSchema(clientHashId, currencyCode, customerHashId, payoutMethod, xRequestId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BeneficiaryApi.beneficiaryValidationSchema']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * This API will allow you to fetch the validation schema for beneficiary validation details.
         * @summary Beneficiary Validation Schema V2
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} currencyCode This field accepts the 3-letter [ISO-4217 currency code](doc:currency-and-country-codes).
         * @param {string} customerHashId Unique customer identifier generated on customer creation.
         * @param {string} [payoutMethod] This field can accept the different modes of payout.
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async beneficiaryValidationSchemaV2(clientHashId: string, currencyCode: string, customerHashId: string, payoutMethod?: string, xRequestId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.beneficiaryValidationSchemaV2(clientHashId, currencyCode, customerHashId, payoutMethod, xRequestId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BeneficiaryApi.beneficiaryValidationSchemaV2']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * This API allows you to Validate Beneficiary Details.  >ℹ️ INFO   >This API only supports account verification for below destination corridors. >**For LOCAL payment method:** Vietnam (VN), Thailand (TH), India (IN), Pakistan(PK), Malaysia(MY), Indonesia (ID) >**For PROXY payment method:** Singapore (SG), India (IN), Malaysia(MY)
         * @summary Confirmation of Payee (Previous version)
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} customerHashId Unique customer identifier generated on customer creation.
         * @param {BeneficiaryValidationRequestDTO} beneficiaryValidationRequestDTO beneficiaryValidationRequestDTO
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async confirmationofPayee(clientHashId: string, customerHashId: string, beneficiaryValidationRequestDTO: BeneficiaryValidationRequestDTO, xRequestId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BeneficiaryValidationResponseDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.confirmationofPayee(clientHashId, customerHashId, beneficiaryValidationRequestDTO, xRequestId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BeneficiaryApi.confirmationofPayee']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * This API allows you to delete a beneficiary.
         * @summary Delete Beneficiary
         * @param {string} beneficiaryHashId Unique beneficiary hash ID.
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} customerHashId Unique customer identifier generated on customer creation.
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteBeneficiary(beneficiaryHashId: string, clientHashId: string, customerHashId: string, xRequestId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Resource>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteBeneficiary(beneficiaryHashId, clientHashId, customerHashId, xRequestId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BeneficiaryApi.deleteBeneficiary']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * This API allows you to update beneficiary details.
         * @summary Update Beneficiary
         * @param {string} beneficiaryHashId Unique beneficiary hash ID.
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} customerHashId Unique customer identifier generated on customer creation.
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {AddBeneficiaryRequest} [addBeneficiaryRequest] Info:  Update Beneficiary API will be restricted when a remittance transaction for the beneficiary is Pending.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateBeneficiary(beneficiaryHashId: string, clientHashId: string, customerHashId: string, xRequestId?: string, addBeneficiaryRequest?: AddBeneficiaryRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Resource>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateBeneficiary(beneficiaryHashId, clientHashId, customerHashId, xRequestId, addBeneficiaryRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BeneficiaryApi.updateBeneficiary']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * This API allows you to update beneficiary details.
         * @summary Update Beneficiary V2
         * @param {string} beneficiaryHashId Unique beneficiary hash ID.
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} customerHashId Unique customer identifier generated on customer creation.
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {UpdateBeneficiaryRequestDTO} [updateBeneficiaryRequestDTO] Info:  Update Beneficiary API will be restricted when a remittance transaction for the beneficiary is Pending.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateBeneficiaryV2(beneficiaryHashId: string, clientHashId: string, customerHashId: string, xRequestId?: string, updateBeneficiaryRequestDTO?: UpdateBeneficiaryRequestDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BeneficiaryResponseDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateBeneficiaryV2(beneficiaryHashId, clientHashId, customerHashId, xRequestId, updateBeneficiaryRequestDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BeneficiaryApi.updateBeneficiaryV2']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * BeneficiaryApi - factory interface
 * @export
 */
export const BeneficiaryApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BeneficiaryApiFp(configuration)
    return {
        /**
         * This API allows you to verify a beneficiary account details. > > ℹ️ INFO   >This API only supports account verification for certain destination corridors. >Refer to the   [Account verification user guide](/apis/docs/account-verification#supported-corridors-for-account-verification) for details.
         * @summary Account verification (Confirmation of Payee)
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} customerHashId Unique customer identifier generated on customer creation.
         * @param {AccountValidationRequestDTO} accountValidationRequestDTO accountValidationRequestDTO
         * @param {string} [xRequestId] Enter a unique UUID value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountVerification(clientHashId: string, customerHashId: string, accountValidationRequestDTO: AccountValidationRequestDTO, xRequestId?: string, options?: any): AxiosPromise<AccountValidationResponseDTO> {
            return localVarFp.accountVerification(clientHashId, customerHashId, accountValidationRequestDTO, xRequestId, options).then((request) => request(axios, basePath));
        },
        /**
         * This API allows you to add a beneficiary to transfer funds.  >⚠️ WARNING   >This API version is deprecated. Eventually, a deprecated API version becomes unsupported. [Add Beneficiary V2](/apis/reference/addbeneficiaryv2) is the latest version of this API.
         * @summary Add Beneficiary
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} customerHashId Unique customer identifier generated on customer creation.
         * @param {AddBeneficiaryRequest} addBeneficiaryRequest addBeneficiaryRequest
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addBeneficiary(clientHashId: string, customerHashId: string, addBeneficiaryRequest: AddBeneficiaryRequest, xRequestId?: string, options?: any): AxiosPromise<Resource> {
            return localVarFp.addBeneficiary(clientHashId, customerHashId, addBeneficiaryRequest, xRequestId, options).then((request) => request(axios, basePath));
        },
        /**
         * This API allows you to add a beneficiary to transfer funds.   > ⚠️ IMPORTANT    Some fields are conditional based on corridors. Use the [Beneficiary Validation Schema V2](/apis/reference/beneficiaryvalidationschemav2) with the currency code and payout method to determine if a field is required or not.
         * @summary Add Beneficiary V2
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} customerHashId Unique customer identifier generated on customer creation.
         * @param {AddBeneficiaryRequestDTO} addBeneficiaryRequestDTO addBeneficiaryRequestDTO
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addBeneficiaryV2(clientHashId: string, customerHashId: string, addBeneficiaryRequestDTO: AddBeneficiaryRequestDTO, xRequestId?: string, options?: any): AxiosPromise<BeneficiaryResponseDTO> {
            return localVarFp.addBeneficiaryV2(clientHashId, customerHashId, addBeneficiaryRequestDTO, xRequestId, options).then((request) => request(axios, basePath));
        },
        /**
         * This API allows you to fetch beneficiary details of an individual beneficiary.  >⚠️ WARNING   >This API version is deprecated. Eventually, a deprecated API version becomes unsupported. [Beneficiary Details V2](/apis/reference/beneficiarydetailsv2) is the latest version of this API.
         * @summary Beneficiary Details
         * @param {string} beneficiaryHashId Unique beneficiary hash ID.
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} customerHashId Unique customer identifier generated on customer creation.
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        beneficiaryDetails(beneficiaryHashId: string, clientHashId: string, customerHashId: string, xRequestId?: string, options?: any): AxiosPromise<Resource> {
            return localVarFp.beneficiaryDetails(beneficiaryHashId, clientHashId, customerHashId, xRequestId, options).then((request) => request(axios, basePath));
        },
        /**
         * This API allows you to fetch beneficiary details of an individual beneficiary.
         * @summary Beneficiary Details V2
         * @param {string} beneficiaryHashId Unique beneficiary hash ID.
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} customerHashId Unique customer identifier generated on customer creation.
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        beneficiaryDetailsV2(beneficiaryHashId: string, clientHashId: string, customerHashId: string, xRequestId?: string, options?: any): AxiosPromise<BeneficiaryResponseDTO> {
            return localVarFp.beneficiaryDetailsV2(beneficiaryHashId, clientHashId, customerHashId, xRequestId, options).then((request) => request(axios, basePath));
        },
        /**
         * This API allows you to fetch beneficiary details.  >⚠️ WARNING   >This API version is deprecated. Eventually, a deprecated API version becomes unsupported. [Beneficiary List V2](/apis/reference/beneficiarylistv2) is the latest version of this API.
         * @summary Beneficiary List
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} customerHashId Unique customer identifier generated on customer creation.
         * @param {Array<{ [key: string]: string; }>} [parameters] parameters
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        beneficiaryList(clientHashId: string, customerHashId: string, parameters?: Array<{ [key: string]: string; }>, xRequestId?: string, options?: any): AxiosPromise<Resource> {
            return localVarFp.beneficiaryList(clientHashId, customerHashId, parameters, xRequestId, options).then((request) => request(axios, basePath));
        },
        /**
         * This API allows you to fetch beneficiary details.
         * @summary Beneficiary List V2
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} customerHashId Unique customer identifier generated on customer creation.
         * @param {Array<{ [key: string]: string; }>} [parameters] parameters
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        beneficiaryListV2(clientHashId: string, customerHashId: string, parameters?: Array<{ [key: string]: string; }>, xRequestId?: string, options?: any): AxiosPromise<Array<BeneficiaryResponseDTO>> {
            return localVarFp.beneficiaryListV2(clientHashId, customerHashId, parameters, xRequestId, options).then((request) => request(axios, basePath));
        },
        /**
         * This API will allow you to fetch the validation schema for beneficiary validation details.  >⚠️ WARNING   >This API version is deprecated. Eventually, a deprecated API version becomes unsupported. [Beneficiary Validation Schema V2](/apis/reference/beneficiaryvalidationschemav2) is the latest version of this API.
         * @summary Beneficiary Validation Schema
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} currencyCode This field accepts the 3-letter [ISO-4217 currency code](doc:currency-and-country-codes).
         * @param {string} customerHashId Unique customer identifier generated on customer creation.
         * @param {string} [payoutMethod] This field can accept the different modes of payout.This field can accept one of the following values: 1.LOCAL 2.SWIFT 3.WALLET Default value of the parameter is LOCAL.
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        beneficiaryValidationSchema(clientHashId: string, currencyCode: string, customerHashId: string, payoutMethod?: string, xRequestId?: string, options?: any): AxiosPromise<Resource> {
            return localVarFp.beneficiaryValidationSchema(clientHashId, currencyCode, customerHashId, payoutMethod, xRequestId, options).then((request) => request(axios, basePath));
        },
        /**
         * This API will allow you to fetch the validation schema for beneficiary validation details.
         * @summary Beneficiary Validation Schema V2
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} currencyCode This field accepts the 3-letter [ISO-4217 currency code](doc:currency-and-country-codes).
         * @param {string} customerHashId Unique customer identifier generated on customer creation.
         * @param {string} [payoutMethod] This field can accept the different modes of payout.
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        beneficiaryValidationSchemaV2(clientHashId: string, currencyCode: string, customerHashId: string, payoutMethod?: string, xRequestId?: string, options?: any): AxiosPromise<string> {
            return localVarFp.beneficiaryValidationSchemaV2(clientHashId, currencyCode, customerHashId, payoutMethod, xRequestId, options).then((request) => request(axios, basePath));
        },
        /**
         * This API allows you to Validate Beneficiary Details.  >ℹ️ INFO   >This API only supports account verification for below destination corridors. >**For LOCAL payment method:** Vietnam (VN), Thailand (TH), India (IN), Pakistan(PK), Malaysia(MY), Indonesia (ID) >**For PROXY payment method:** Singapore (SG), India (IN), Malaysia(MY)
         * @summary Confirmation of Payee (Previous version)
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} customerHashId Unique customer identifier generated on customer creation.
         * @param {BeneficiaryValidationRequestDTO} beneficiaryValidationRequestDTO beneficiaryValidationRequestDTO
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        confirmationofPayee(clientHashId: string, customerHashId: string, beneficiaryValidationRequestDTO: BeneficiaryValidationRequestDTO, xRequestId?: string, options?: any): AxiosPromise<BeneficiaryValidationResponseDTO> {
            return localVarFp.confirmationofPayee(clientHashId, customerHashId, beneficiaryValidationRequestDTO, xRequestId, options).then((request) => request(axios, basePath));
        },
        /**
         * This API allows you to delete a beneficiary.
         * @summary Delete Beneficiary
         * @param {string} beneficiaryHashId Unique beneficiary hash ID.
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} customerHashId Unique customer identifier generated on customer creation.
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBeneficiary(beneficiaryHashId: string, clientHashId: string, customerHashId: string, xRequestId?: string, options?: any): AxiosPromise<Resource> {
            return localVarFp.deleteBeneficiary(beneficiaryHashId, clientHashId, customerHashId, xRequestId, options).then((request) => request(axios, basePath));
        },
        /**
         * This API allows you to update beneficiary details.
         * @summary Update Beneficiary
         * @param {string} beneficiaryHashId Unique beneficiary hash ID.
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} customerHashId Unique customer identifier generated on customer creation.
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {AddBeneficiaryRequest} [addBeneficiaryRequest] Info:  Update Beneficiary API will be restricted when a remittance transaction for the beneficiary is Pending.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBeneficiary(beneficiaryHashId: string, clientHashId: string, customerHashId: string, xRequestId?: string, addBeneficiaryRequest?: AddBeneficiaryRequest, options?: any): AxiosPromise<Resource> {
            return localVarFp.updateBeneficiary(beneficiaryHashId, clientHashId, customerHashId, xRequestId, addBeneficiaryRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * This API allows you to update beneficiary details.
         * @summary Update Beneficiary V2
         * @param {string} beneficiaryHashId Unique beneficiary hash ID.
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} customerHashId Unique customer identifier generated on customer creation.
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {UpdateBeneficiaryRequestDTO} [updateBeneficiaryRequestDTO] Info:  Update Beneficiary API will be restricted when a remittance transaction for the beneficiary is Pending.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBeneficiaryV2(beneficiaryHashId: string, clientHashId: string, customerHashId: string, xRequestId?: string, updateBeneficiaryRequestDTO?: UpdateBeneficiaryRequestDTO, options?: any): AxiosPromise<BeneficiaryResponseDTO> {
            return localVarFp.updateBeneficiaryV2(beneficiaryHashId, clientHashId, customerHashId, xRequestId, updateBeneficiaryRequestDTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BeneficiaryApi - object-oriented interface
 * @export
 * @class BeneficiaryApi
 * @extends {BaseAPI}
 */
export class BeneficiaryApi extends BaseAPI {
    /**
     * This API allows you to verify a beneficiary account details. > > ℹ️ INFO   >This API only supports account verification for certain destination corridors. >Refer to the   [Account verification user guide](/apis/docs/account-verification#supported-corridors-for-account-verification) for details.
     * @summary Account verification (Confirmation of Payee)
     * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
     * @param {string} customerHashId Unique customer identifier generated on customer creation.
     * @param {AccountValidationRequestDTO} accountValidationRequestDTO accountValidationRequestDTO
     * @param {string} [xRequestId] Enter a unique UUID value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BeneficiaryApi
     */
    public accountVerification(clientHashId: string, customerHashId: string, accountValidationRequestDTO: AccountValidationRequestDTO, xRequestId?: string, options?: RawAxiosRequestConfig) {
        return BeneficiaryApiFp(this.configuration).accountVerification(clientHashId, customerHashId, accountValidationRequestDTO, xRequestId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This API allows you to add a beneficiary to transfer funds.  >⚠️ WARNING   >This API version is deprecated. Eventually, a deprecated API version becomes unsupported. [Add Beneficiary V2](/apis/reference/addbeneficiaryv2) is the latest version of this API.
     * @summary Add Beneficiary
     * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
     * @param {string} customerHashId Unique customer identifier generated on customer creation.
     * @param {AddBeneficiaryRequest} addBeneficiaryRequest addBeneficiaryRequest
     * @param {string} [xRequestId] Enter a unique UUID value
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BeneficiaryApi
     */
    public addBeneficiary(clientHashId: string, customerHashId: string, addBeneficiaryRequest: AddBeneficiaryRequest, xRequestId?: string, options?: RawAxiosRequestConfig) {
        return BeneficiaryApiFp(this.configuration).addBeneficiary(clientHashId, customerHashId, addBeneficiaryRequest, xRequestId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This API allows you to add a beneficiary to transfer funds.   > ⚠️ IMPORTANT    Some fields are conditional based on corridors. Use the [Beneficiary Validation Schema V2](/apis/reference/beneficiaryvalidationschemav2) with the currency code and payout method to determine if a field is required or not.
     * @summary Add Beneficiary V2
     * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
     * @param {string} customerHashId Unique customer identifier generated on customer creation.
     * @param {AddBeneficiaryRequestDTO} addBeneficiaryRequestDTO addBeneficiaryRequestDTO
     * @param {string} [xRequestId] Enter a unique UUID value
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BeneficiaryApi
     */
    public addBeneficiaryV2(clientHashId: string, customerHashId: string, addBeneficiaryRequestDTO: AddBeneficiaryRequestDTO, xRequestId?: string, options?: RawAxiosRequestConfig) {
        return BeneficiaryApiFp(this.configuration).addBeneficiaryV2(clientHashId, customerHashId, addBeneficiaryRequestDTO, xRequestId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This API allows you to fetch beneficiary details of an individual beneficiary.  >⚠️ WARNING   >This API version is deprecated. Eventually, a deprecated API version becomes unsupported. [Beneficiary Details V2](/apis/reference/beneficiarydetailsv2) is the latest version of this API.
     * @summary Beneficiary Details
     * @param {string} beneficiaryHashId Unique beneficiary hash ID.
     * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
     * @param {string} customerHashId Unique customer identifier generated on customer creation.
     * @param {string} [xRequestId] Enter a unique UUID value
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BeneficiaryApi
     */
    public beneficiaryDetails(beneficiaryHashId: string, clientHashId: string, customerHashId: string, xRequestId?: string, options?: RawAxiosRequestConfig) {
        return BeneficiaryApiFp(this.configuration).beneficiaryDetails(beneficiaryHashId, clientHashId, customerHashId, xRequestId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This API allows you to fetch beneficiary details of an individual beneficiary.
     * @summary Beneficiary Details V2
     * @param {string} beneficiaryHashId Unique beneficiary hash ID.
     * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
     * @param {string} customerHashId Unique customer identifier generated on customer creation.
     * @param {string} [xRequestId] Enter a unique UUID value
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BeneficiaryApi
     */
    public beneficiaryDetailsV2(beneficiaryHashId: string, clientHashId: string, customerHashId: string, xRequestId?: string, options?: RawAxiosRequestConfig) {
        return BeneficiaryApiFp(this.configuration).beneficiaryDetailsV2(beneficiaryHashId, clientHashId, customerHashId, xRequestId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This API allows you to fetch beneficiary details.  >⚠️ WARNING   >This API version is deprecated. Eventually, a deprecated API version becomes unsupported. [Beneficiary List V2](/apis/reference/beneficiarylistv2) is the latest version of this API.
     * @summary Beneficiary List
     * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
     * @param {string} customerHashId Unique customer identifier generated on customer creation.
     * @param {Array<{ [key: string]: string; }>} [parameters] parameters
     * @param {string} [xRequestId] Enter a unique UUID value
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BeneficiaryApi
     */
    public beneficiaryList(clientHashId: string, customerHashId: string, parameters?: Array<{ [key: string]: string; }>, xRequestId?: string, options?: RawAxiosRequestConfig) {
        return BeneficiaryApiFp(this.configuration).beneficiaryList(clientHashId, customerHashId, parameters, xRequestId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This API allows you to fetch beneficiary details.
     * @summary Beneficiary List V2
     * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
     * @param {string} customerHashId Unique customer identifier generated on customer creation.
     * @param {Array<{ [key: string]: string; }>} [parameters] parameters
     * @param {string} [xRequestId] Enter a unique UUID value
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BeneficiaryApi
     */
    public beneficiaryListV2(clientHashId: string, customerHashId: string, parameters?: Array<{ [key: string]: string; }>, xRequestId?: string, options?: RawAxiosRequestConfig) {
        return BeneficiaryApiFp(this.configuration).beneficiaryListV2(clientHashId, customerHashId, parameters, xRequestId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This API will allow you to fetch the validation schema for beneficiary validation details.  >⚠️ WARNING   >This API version is deprecated. Eventually, a deprecated API version becomes unsupported. [Beneficiary Validation Schema V2](/apis/reference/beneficiaryvalidationschemav2) is the latest version of this API.
     * @summary Beneficiary Validation Schema
     * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
     * @param {string} currencyCode This field accepts the 3-letter [ISO-4217 currency code](doc:currency-and-country-codes).
     * @param {string} customerHashId Unique customer identifier generated on customer creation.
     * @param {string} [payoutMethod] This field can accept the different modes of payout.This field can accept one of the following values: 1.LOCAL 2.SWIFT 3.WALLET Default value of the parameter is LOCAL.
     * @param {string} [xRequestId] Enter a unique UUID value
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BeneficiaryApi
     */
    public beneficiaryValidationSchema(clientHashId: string, currencyCode: string, customerHashId: string, payoutMethod?: string, xRequestId?: string, options?: RawAxiosRequestConfig) {
        return BeneficiaryApiFp(this.configuration).beneficiaryValidationSchema(clientHashId, currencyCode, customerHashId, payoutMethod, xRequestId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This API will allow you to fetch the validation schema for beneficiary validation details.
     * @summary Beneficiary Validation Schema V2
     * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
     * @param {string} currencyCode This field accepts the 3-letter [ISO-4217 currency code](doc:currency-and-country-codes).
     * @param {string} customerHashId Unique customer identifier generated on customer creation.
     * @param {string} [payoutMethod] This field can accept the different modes of payout.
     * @param {string} [xRequestId] Enter a unique UUID value
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BeneficiaryApi
     */
    public beneficiaryValidationSchemaV2(clientHashId: string, currencyCode: string, customerHashId: string, payoutMethod?: string, xRequestId?: string, options?: RawAxiosRequestConfig) {
        return BeneficiaryApiFp(this.configuration).beneficiaryValidationSchemaV2(clientHashId, currencyCode, customerHashId, payoutMethod, xRequestId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This API allows you to Validate Beneficiary Details.  >ℹ️ INFO   >This API only supports account verification for below destination corridors. >**For LOCAL payment method:** Vietnam (VN), Thailand (TH), India (IN), Pakistan(PK), Malaysia(MY), Indonesia (ID) >**For PROXY payment method:** Singapore (SG), India (IN), Malaysia(MY)
     * @summary Confirmation of Payee (Previous version)
     * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
     * @param {string} customerHashId Unique customer identifier generated on customer creation.
     * @param {BeneficiaryValidationRequestDTO} beneficiaryValidationRequestDTO beneficiaryValidationRequestDTO
     * @param {string} [xRequestId] Enter a unique UUID value
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BeneficiaryApi
     */
    public confirmationofPayee(clientHashId: string, customerHashId: string, beneficiaryValidationRequestDTO: BeneficiaryValidationRequestDTO, xRequestId?: string, options?: RawAxiosRequestConfig) {
        return BeneficiaryApiFp(this.configuration).confirmationofPayee(clientHashId, customerHashId, beneficiaryValidationRequestDTO, xRequestId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This API allows you to delete a beneficiary.
     * @summary Delete Beneficiary
     * @param {string} beneficiaryHashId Unique beneficiary hash ID.
     * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
     * @param {string} customerHashId Unique customer identifier generated on customer creation.
     * @param {string} [xRequestId] Enter a unique UUID value
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BeneficiaryApi
     */
    public deleteBeneficiary(beneficiaryHashId: string, clientHashId: string, customerHashId: string, xRequestId?: string, options?: RawAxiosRequestConfig) {
        return BeneficiaryApiFp(this.configuration).deleteBeneficiary(beneficiaryHashId, clientHashId, customerHashId, xRequestId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This API allows you to update beneficiary details.
     * @summary Update Beneficiary
     * @param {string} beneficiaryHashId Unique beneficiary hash ID.
     * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
     * @param {string} customerHashId Unique customer identifier generated on customer creation.
     * @param {string} [xRequestId] Enter a unique UUID value
     * @param {AddBeneficiaryRequest} [addBeneficiaryRequest] Info:  Update Beneficiary API will be restricted when a remittance transaction for the beneficiary is Pending.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BeneficiaryApi
     */
    public updateBeneficiary(beneficiaryHashId: string, clientHashId: string, customerHashId: string, xRequestId?: string, addBeneficiaryRequest?: AddBeneficiaryRequest, options?: RawAxiosRequestConfig) {
        return BeneficiaryApiFp(this.configuration).updateBeneficiary(beneficiaryHashId, clientHashId, customerHashId, xRequestId, addBeneficiaryRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This API allows you to update beneficiary details.
     * @summary Update Beneficiary V2
     * @param {string} beneficiaryHashId Unique beneficiary hash ID.
     * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
     * @param {string} customerHashId Unique customer identifier generated on customer creation.
     * @param {string} [xRequestId] Enter a unique UUID value
     * @param {UpdateBeneficiaryRequestDTO} [updateBeneficiaryRequestDTO] Info:  Update Beneficiary API will be restricted when a remittance transaction for the beneficiary is Pending.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BeneficiaryApi
     */
    public updateBeneficiaryV2(beneficiaryHashId: string, clientHashId: string, customerHashId: string, xRequestId?: string, updateBeneficiaryRequestDTO?: UpdateBeneficiaryRequestDTO, options?: RawAxiosRequestConfig) {
        return BeneficiaryApiFp(this.configuration).updateBeneficiaryV2(beneficiaryHashId, clientHashId, customerHashId, xRequestId, updateBeneficiaryRequestDTO, options).then((request) => request(this.axios, this.basePath));
    }
}

