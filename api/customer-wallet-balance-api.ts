/* tslint:disable */
/* eslint-disable */
/**
 * NIUM Platform
 * NIUM Platform
 *
 * The version of the OpenAPI document: 2024.8.20
 * Contact: experience@nium.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { AddWalletRequestDTO } from '../model';
// @ts-ignore
import type { ApiErrorResponse } from '../model';
// @ts-ignore
import type { Standard404Error } from '../model';
// @ts-ignore
import type { UpdateWalletRequestDTO } from '../model';
// @ts-ignore
import type { WalletBalanceResponseDTO } from '../model';
// @ts-ignore
import type { WalletResponseDTO2 } from '../model';
// @ts-ignore
import type { WalletStandard500Error } from '../model';
// @ts-ignore
import type { WalletWalletApiError } from '../model';
/**
 * CustomerWalletBalanceApi - axios parameter creator
 * @export
 */
export const CustomerWalletBalanceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This API allows you to add a wallet for a customer.
         * @summary Add Wallet
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} customerHashId Unique customer identifier generated on customer creation.
         * @param {AddWalletRequestDTO} addWalletRequestDTO addWalletRequestDTO
         * @param {string} [xRequestId] Enter a unique UUID value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addWallet: async (clientHashId: string, customerHashId: string, addWalletRequestDTO: AddWalletRequestDTO, xRequestId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'clientHashId' is not null or undefined
            assertParamExists('addWallet', 'clientHashId', clientHashId)
            // verify required parameter 'customerHashId' is not null or undefined
            assertParamExists('addWallet', 'customerHashId', customerHashId)
            // verify required parameter 'addWalletRequestDTO' is not null or undefined
            assertParamExists('addWallet', 'addWalletRequestDTO', addWalletRequestDTO)
            const localVarPath = `/api/v1/client/{clientHashId}/customer/{customerHashId}/wallet`
                .replace(`{${"clientHashId"}}`, encodeURIComponent(String(clientHashId)))
                .replace(`{${"customerHashId"}}`, encodeURIComponent(String(customerHashId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication default required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (xRequestId != null) {
                localVarHeaderParameter['x-request-id'] = String(xRequestId);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(addWalletRequestDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Fetch Wallet
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} customerHashId Unique customer identifier generated on customer creation.
         * @param {string} [tagKey] The name of the tag. The maximum character length for &#x60;keys&#x60; is 128 characters.
         * @param {string} [tagValue] The value of the tag. The maximum character length for values is 256 characters.
         * @param {string} [walletHashId] Unique wallet identifier generated on wallet creation.
         * @param {string} [xRequestId] Enter a unique UUID value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWallet: async (clientHashId: string, customerHashId: string, tagKey?: string, tagValue?: string, walletHashId?: string, xRequestId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'clientHashId' is not null or undefined
            assertParamExists('getWallet', 'clientHashId', clientHashId)
            // verify required parameter 'customerHashId' is not null or undefined
            assertParamExists('getWallet', 'customerHashId', customerHashId)
            const localVarPath = `/api/v1/client/{clientHashId}/customer/{customerHashId}/wallet`
                .replace(`{${"clientHashId"}}`, encodeURIComponent(String(clientHashId)))
                .replace(`{${"customerHashId"}}`, encodeURIComponent(String(customerHashId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication default required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (tagKey !== undefined) {
                localVarQueryParameter['tagKey'] = tagKey;
            }

            if (tagValue !== undefined) {
                localVarQueryParameter['tagValue'] = tagValue;
            }

            if (walletHashId !== undefined) {
                localVarQueryParameter['walletHashId'] = walletHashId;
            }

            if (xRequestId != null) {
                localVarHeaderParameter['x-request-id'] = String(xRequestId);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This API allows you to update a specific wallet.
         * @summary Update Wallet
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} customerHashId Unique customer identifier generated on customer creation.
         * @param {string} walletHashId Unique wallet identifier generated simultaneously with customer creation.
         * @param {UpdateWalletRequestDTO} updateWalletRequestDTO updateWalletRequestDTO
         * @param {string} [xRequestId] Enter a unique UUID value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateWallet: async (clientHashId: string, customerHashId: string, walletHashId: string, updateWalletRequestDTO: UpdateWalletRequestDTO, xRequestId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'clientHashId' is not null or undefined
            assertParamExists('updateWallet', 'clientHashId', clientHashId)
            // verify required parameter 'customerHashId' is not null or undefined
            assertParamExists('updateWallet', 'customerHashId', customerHashId)
            // verify required parameter 'walletHashId' is not null or undefined
            assertParamExists('updateWallet', 'walletHashId', walletHashId)
            // verify required parameter 'updateWalletRequestDTO' is not null or undefined
            assertParamExists('updateWallet', 'updateWalletRequestDTO', updateWalletRequestDTO)
            const localVarPath = `/api/v1/client/{clientHashId}/customer/{customerHashId}/wallet/{walletHashId}`
                .replace(`{${"clientHashId"}}`, encodeURIComponent(String(clientHashId)))
                .replace(`{${"customerHashId"}}`, encodeURIComponent(String(customerHashId)))
                .replace(`{${"walletHashId"}}`, encodeURIComponent(String(walletHashId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication default required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (xRequestId != null) {
                localVarHeaderParameter['x-request-id'] = String(xRequestId);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateWalletRequestDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This API allows you to fetch balance for a specific wallet.
         * @summary Wallet Balance
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} customerHashId Unique customer identifier generated on customer creation.
         * @param {string} walletHashId Unique wallet identifier generated simultaneously with customer creation.
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletBalance: async (clientHashId: string, customerHashId: string, walletHashId: string, xRequestId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'clientHashId' is not null or undefined
            assertParamExists('walletBalance', 'clientHashId', clientHashId)
            // verify required parameter 'customerHashId' is not null or undefined
            assertParamExists('walletBalance', 'customerHashId', customerHashId)
            // verify required parameter 'walletHashId' is not null or undefined
            assertParamExists('walletBalance', 'walletHashId', walletHashId)
            const localVarPath = `/api/v1/client/{clientHashId}/customer/{customerHashId}/wallet/{walletHashId}`
                .replace(`{${"clientHashId"}}`, encodeURIComponent(String(clientHashId)))
                .replace(`{${"customerHashId"}}`, encodeURIComponent(String(customerHashId)))
                .replace(`{${"walletHashId"}}`, encodeURIComponent(String(walletHashId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication default required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (xRequestId != null) {
                localVarHeaderParameter['x-request-id'] = String(xRequestId);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CustomerWalletBalanceApi - functional programming interface
 * @export
 */
export const CustomerWalletBalanceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CustomerWalletBalanceApiAxiosParamCreator(configuration)
    return {
        /**
         * This API allows you to add a wallet for a customer.
         * @summary Add Wallet
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} customerHashId Unique customer identifier generated on customer creation.
         * @param {AddWalletRequestDTO} addWalletRequestDTO addWalletRequestDTO
         * @param {string} [xRequestId] Enter a unique UUID value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addWallet(clientHashId: string, customerHashId: string, addWalletRequestDTO: AddWalletRequestDTO, xRequestId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WalletResponseDTO2>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addWallet(clientHashId, customerHashId, addWalletRequestDTO, xRequestId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CustomerWalletBalanceApi.addWallet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Fetch Wallet
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} customerHashId Unique customer identifier generated on customer creation.
         * @param {string} [tagKey] The name of the tag. The maximum character length for &#x60;keys&#x60; is 128 characters.
         * @param {string} [tagValue] The value of the tag. The maximum character length for values is 256 characters.
         * @param {string} [walletHashId] Unique wallet identifier generated on wallet creation.
         * @param {string} [xRequestId] Enter a unique UUID value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWallet(clientHashId: string, customerHashId: string, tagKey?: string, tagValue?: string, walletHashId?: string, xRequestId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WalletResponseDTO2>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getWallet(clientHashId, customerHashId, tagKey, tagValue, walletHashId, xRequestId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CustomerWalletBalanceApi.getWallet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * This API allows you to update a specific wallet.
         * @summary Update Wallet
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} customerHashId Unique customer identifier generated on customer creation.
         * @param {string} walletHashId Unique wallet identifier generated simultaneously with customer creation.
         * @param {UpdateWalletRequestDTO} updateWalletRequestDTO updateWalletRequestDTO
         * @param {string} [xRequestId] Enter a unique UUID value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateWallet(clientHashId: string, customerHashId: string, walletHashId: string, updateWalletRequestDTO: UpdateWalletRequestDTO, xRequestId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WalletResponseDTO2>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateWallet(clientHashId, customerHashId, walletHashId, updateWalletRequestDTO, xRequestId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CustomerWalletBalanceApi.updateWallet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * This API allows you to fetch balance for a specific wallet.
         * @summary Wallet Balance
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} customerHashId Unique customer identifier generated on customer creation.
         * @param {string} walletHashId Unique wallet identifier generated simultaneously with customer creation.
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async walletBalance(clientHashId: string, customerHashId: string, walletHashId: string, xRequestId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<WalletBalanceResponseDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.walletBalance(clientHashId, customerHashId, walletHashId, xRequestId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CustomerWalletBalanceApi.walletBalance']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CustomerWalletBalanceApi - factory interface
 * @export
 */
export const CustomerWalletBalanceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CustomerWalletBalanceApiFp(configuration)
    return {
        /**
         * This API allows you to add a wallet for a customer.
         * @summary Add Wallet
         * @param {CustomerWalletBalanceApiAddWalletRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addWallet(requestParameters: CustomerWalletBalanceApiAddWalletRequest, options?: RawAxiosRequestConfig): AxiosPromise<WalletResponseDTO2> {
            return localVarFp.addWallet(requestParameters.clientHashId, requestParameters.customerHashId, requestParameters.addWalletRequestDTO, requestParameters.xRequestId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Fetch Wallet
         * @param {CustomerWalletBalanceApiGetWalletRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWallet(requestParameters: CustomerWalletBalanceApiGetWalletRequest, options?: RawAxiosRequestConfig): AxiosPromise<WalletResponseDTO2> {
            return localVarFp.getWallet(requestParameters.clientHashId, requestParameters.customerHashId, requestParameters.tagKey, requestParameters.tagValue, requestParameters.walletHashId, requestParameters.xRequestId, options).then((request) => request(axios, basePath));
        },
        /**
         * This API allows you to update a specific wallet.
         * @summary Update Wallet
         * @param {CustomerWalletBalanceApiUpdateWalletRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateWallet(requestParameters: CustomerWalletBalanceApiUpdateWalletRequest, options?: RawAxiosRequestConfig): AxiosPromise<WalletResponseDTO2> {
            return localVarFp.updateWallet(requestParameters.clientHashId, requestParameters.customerHashId, requestParameters.walletHashId, requestParameters.updateWalletRequestDTO, requestParameters.xRequestId, options).then((request) => request(axios, basePath));
        },
        /**
         * This API allows you to fetch balance for a specific wallet.
         * @summary Wallet Balance
         * @param {CustomerWalletBalanceApiWalletBalanceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletBalance(requestParameters: CustomerWalletBalanceApiWalletBalanceRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<WalletBalanceResponseDTO>> {
            return localVarFp.walletBalance(requestParameters.clientHashId, requestParameters.customerHashId, requestParameters.walletHashId, requestParameters.xRequestId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addWallet operation in CustomerWalletBalanceApi.
 * @export
 * @interface CustomerWalletBalanceApiAddWalletRequest
 */
export interface CustomerWalletBalanceApiAddWalletRequest {
    /**
     * Unique client identifier generated and shared before API handshake.
     * @type {string}
     * @memberof CustomerWalletBalanceApiAddWallet
     */
    readonly clientHashId: string

    /**
     * Unique customer identifier generated on customer creation.
     * @type {string}
     * @memberof CustomerWalletBalanceApiAddWallet
     */
    readonly customerHashId: string

    /**
     * addWalletRequestDTO
     * @type {AddWalletRequestDTO}
     * @memberof CustomerWalletBalanceApiAddWallet
     */
    readonly addWalletRequestDTO: AddWalletRequestDTO

    /**
     * Enter a unique UUID value.
     * @type {string}
     * @memberof CustomerWalletBalanceApiAddWallet
     */
    readonly xRequestId?: string
}

/**
 * Request parameters for getWallet operation in CustomerWalletBalanceApi.
 * @export
 * @interface CustomerWalletBalanceApiGetWalletRequest
 */
export interface CustomerWalletBalanceApiGetWalletRequest {
    /**
     * Unique client identifier generated and shared before API handshake.
     * @type {string}
     * @memberof CustomerWalletBalanceApiGetWallet
     */
    readonly clientHashId: string

    /**
     * Unique customer identifier generated on customer creation.
     * @type {string}
     * @memberof CustomerWalletBalanceApiGetWallet
     */
    readonly customerHashId: string

    /**
     * The name of the tag. The maximum character length for &#x60;keys&#x60; is 128 characters.
     * @type {string}
     * @memberof CustomerWalletBalanceApiGetWallet
     */
    readonly tagKey?: string

    /**
     * The value of the tag. The maximum character length for values is 256 characters.
     * @type {string}
     * @memberof CustomerWalletBalanceApiGetWallet
     */
    readonly tagValue?: string

    /**
     * Unique wallet identifier generated on wallet creation.
     * @type {string}
     * @memberof CustomerWalletBalanceApiGetWallet
     */
    readonly walletHashId?: string

    /**
     * Enter a unique UUID value.
     * @type {string}
     * @memberof CustomerWalletBalanceApiGetWallet
     */
    readonly xRequestId?: string
}

/**
 * Request parameters for updateWallet operation in CustomerWalletBalanceApi.
 * @export
 * @interface CustomerWalletBalanceApiUpdateWalletRequest
 */
export interface CustomerWalletBalanceApiUpdateWalletRequest {
    /**
     * Unique client identifier generated and shared before API handshake.
     * @type {string}
     * @memberof CustomerWalletBalanceApiUpdateWallet
     */
    readonly clientHashId: string

    /**
     * Unique customer identifier generated on customer creation.
     * @type {string}
     * @memberof CustomerWalletBalanceApiUpdateWallet
     */
    readonly customerHashId: string

    /**
     * Unique wallet identifier generated simultaneously with customer creation.
     * @type {string}
     * @memberof CustomerWalletBalanceApiUpdateWallet
     */
    readonly walletHashId: string

    /**
     * updateWalletRequestDTO
     * @type {UpdateWalletRequestDTO}
     * @memberof CustomerWalletBalanceApiUpdateWallet
     */
    readonly updateWalletRequestDTO: UpdateWalletRequestDTO

    /**
     * Enter a unique UUID value.
     * @type {string}
     * @memberof CustomerWalletBalanceApiUpdateWallet
     */
    readonly xRequestId?: string
}

/**
 * Request parameters for walletBalance operation in CustomerWalletBalanceApi.
 * @export
 * @interface CustomerWalletBalanceApiWalletBalanceRequest
 */
export interface CustomerWalletBalanceApiWalletBalanceRequest {
    /**
     * Unique client identifier generated and shared before API handshake.
     * @type {string}
     * @memberof CustomerWalletBalanceApiWalletBalance
     */
    readonly clientHashId: string

    /**
     * Unique customer identifier generated on customer creation.
     * @type {string}
     * @memberof CustomerWalletBalanceApiWalletBalance
     */
    readonly customerHashId: string

    /**
     * Unique wallet identifier generated simultaneously with customer creation.
     * @type {string}
     * @memberof CustomerWalletBalanceApiWalletBalance
     */
    readonly walletHashId: string

    /**
     * Enter a unique UUID value
     * @type {string}
     * @memberof CustomerWalletBalanceApiWalletBalance
     */
    readonly xRequestId?: string
}

/**
 * CustomerWalletBalanceApi - object-oriented interface
 * @export
 * @class CustomerWalletBalanceApi
 * @extends {BaseAPI}
 */
export class CustomerWalletBalanceApi extends BaseAPI {
    /**
     * This API allows you to add a wallet for a customer.
     * @summary Add Wallet
     * @param {CustomerWalletBalanceApiAddWalletRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerWalletBalanceApi
     */
    public addWallet(requestParameters: CustomerWalletBalanceApiAddWalletRequest, options?: RawAxiosRequestConfig) {
        return CustomerWalletBalanceApiFp(this.configuration).addWallet(requestParameters.clientHashId, requestParameters.customerHashId, requestParameters.addWalletRequestDTO, requestParameters.xRequestId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Fetch Wallet
     * @param {CustomerWalletBalanceApiGetWalletRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerWalletBalanceApi
     */
    public getWallet(requestParameters: CustomerWalletBalanceApiGetWalletRequest, options?: RawAxiosRequestConfig) {
        return CustomerWalletBalanceApiFp(this.configuration).getWallet(requestParameters.clientHashId, requestParameters.customerHashId, requestParameters.tagKey, requestParameters.tagValue, requestParameters.walletHashId, requestParameters.xRequestId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This API allows you to update a specific wallet.
     * @summary Update Wallet
     * @param {CustomerWalletBalanceApiUpdateWalletRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerWalletBalanceApi
     */
    public updateWallet(requestParameters: CustomerWalletBalanceApiUpdateWalletRequest, options?: RawAxiosRequestConfig) {
        return CustomerWalletBalanceApiFp(this.configuration).updateWallet(requestParameters.clientHashId, requestParameters.customerHashId, requestParameters.walletHashId, requestParameters.updateWalletRequestDTO, requestParameters.xRequestId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This API allows you to fetch balance for a specific wallet.
     * @summary Wallet Balance
     * @param {CustomerWalletBalanceApiWalletBalanceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerWalletBalanceApi
     */
    public walletBalance(requestParameters: CustomerWalletBalanceApiWalletBalanceRequest, options?: RawAxiosRequestConfig) {
        return CustomerWalletBalanceApiFp(this.configuration).walletBalance(requestParameters.clientHashId, requestParameters.customerHashId, requestParameters.walletHashId, requestParameters.xRequestId, options).then((request) => request(this.axios, this.basePath));
    }
}

