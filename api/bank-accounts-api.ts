/* tslint:disable */
/* eslint-disable */
/**
 * NIUM Platform
 * NIUM Platform
 *
 * The version of the OpenAPI document: 2024.8.20
 * Contact: experience@nium.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { BankAccountConfirmationRequest } from '../model';
// @ts-ignore
import type { BankAccountLinkRequest } from '../model';
// @ts-ignore
import type { BankAccountResponse } from '../model';
// @ts-ignore
import type { BankAccountUpdateRequest } from '../model';
// @ts-ignore
import type { ConfirmBankAccountErrorResponse } from '../model';
// @ts-ignore
import type { ExternalAccountServiceStandard401Error } from '../model';
// @ts-ignore
import type { ExternalAccountServiceStandard403Error } from '../model';
// @ts-ignore
import type { ExternalAccountServiceStandard404Error } from '../model';
// @ts-ignore
import type { ExternalAccountServiceStandard500Error } from '../model';
// @ts-ignore
import type { FetchLinkedBankAccountsErrorResponse } from '../model';
// @ts-ignore
import type { LinkBankAccountErrorResponse } from '../model';
// @ts-ignore
import type { PaginatedBankAccountResponse } from '../model';
// @ts-ignore
import type { UpdateBankAccountErrorResponse } from '../model';
/**
 * BankAccountsApi - axios parameter creator
 * @export
 */
export const BankAccountsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This API is used to confirm authentication of a linked bank account.
         * @summary Confirm linked bank account authentication
         * @param {string} clientHashId Unique identifier of the client.
         * @param {string} customerHashId Unique identifier of the customer.
         * @param {string} bankAccountId Unique identifier of the linked bank account.
         * @param {BankAccountConfirmationRequest} bankAccountConfirmationRequest Bank account confirmation request
         * @param {string} [xRequestId] Enter a unique UUID value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        confirmLinkedBankAccount: async (clientHashId: string, customerHashId: string, bankAccountId: string, bankAccountConfirmationRequest: BankAccountConfirmationRequest, xRequestId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'clientHashId' is not null or undefined
            assertParamExists('confirmLinkedBankAccount', 'clientHashId', clientHashId)
            // verify required parameter 'customerHashId' is not null or undefined
            assertParamExists('confirmLinkedBankAccount', 'customerHashId', customerHashId)
            // verify required parameter 'bankAccountId' is not null or undefined
            assertParamExists('confirmLinkedBankAccount', 'bankAccountId', bankAccountId)
            // verify required parameter 'bankAccountConfirmationRequest' is not null or undefined
            assertParamExists('confirmLinkedBankAccount', 'bankAccountConfirmationRequest', bankAccountConfirmationRequest)
            const localVarPath = `/api/v1/client/{clientHashId}/customer/{customerHashId}/bankAccounts/{bankAccountId}/confirm`
                .replace(`{${"clientHashId"}}`, encodeURIComponent(String(clientHashId)))
                .replace(`{${"customerHashId"}}`, encodeURIComponent(String(customerHashId)))
                .replace(`{${"bankAccountId"}}`, encodeURIComponent(String(bankAccountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication default required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (xRequestId != null) {
                localVarHeaderParameter['x-request-id'] = String(xRequestId);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bankAccountConfirmationRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This API is used to fetch a linked bank account.
         * @summary Fetch linked bank account
         * @param {string} clientHashId Unique identifier of the client.
         * @param {string} customerHashId Unique identifier of the customer.
         * @param {string} bankAccountId Unique identifier of the linked bank account.
         * @param {string} [xRequestId] Enter a unique UUID value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchLinkedBankAccount: async (clientHashId: string, customerHashId: string, bankAccountId: string, xRequestId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'clientHashId' is not null or undefined
            assertParamExists('fetchLinkedBankAccount', 'clientHashId', clientHashId)
            // verify required parameter 'customerHashId' is not null or undefined
            assertParamExists('fetchLinkedBankAccount', 'customerHashId', customerHashId)
            // verify required parameter 'bankAccountId' is not null or undefined
            assertParamExists('fetchLinkedBankAccount', 'bankAccountId', bankAccountId)
            const localVarPath = `/api/v1/client/{clientHashId}/customer/{customerHashId}/bankAccounts/{bankAccountId}`
                .replace(`{${"clientHashId"}}`, encodeURIComponent(String(clientHashId)))
                .replace(`{${"customerHashId"}}`, encodeURIComponent(String(customerHashId)))
                .replace(`{${"bankAccountId"}}`, encodeURIComponent(String(bankAccountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication default required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (xRequestId != null) {
                localVarHeaderParameter['x-request-id'] = String(xRequestId);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This paginated API is used to fetch linked bank accounts.
         * @summary Fetch linked bank accounts
         * @param {string} clientHashId Unique identifier of the client.
         * @param {string} customerHashId Unique identifier of the customer.
         * @param {string} [startingAfter] Used to return the &#x60;limit&#x60; number of records after (including) the given starting position.
         * @param {string} [endingBefore] Used to return the &#x60;limit&#x60; number of records up to (excluding) the given ending position. Effectively returns the previous page for a given cursor.
         * @param {number} [limit] The number of items to be returned on each page.
         * @param {string} [tagKey] The tag key used to filter the results.
         * @param {string} [tagValue] The tag value used to filter the results.
         * @param {string} [accountNumber] The account number used to filter the results.
         * @param {string} [xRequestId] Enter a unique UUID value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchLinkedBankAccounts: async (clientHashId: string, customerHashId: string, startingAfter?: string, endingBefore?: string, limit?: number, tagKey?: string, tagValue?: string, accountNumber?: string, xRequestId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'clientHashId' is not null or undefined
            assertParamExists('fetchLinkedBankAccounts', 'clientHashId', clientHashId)
            // verify required parameter 'customerHashId' is not null or undefined
            assertParamExists('fetchLinkedBankAccounts', 'customerHashId', customerHashId)
            const localVarPath = `/api/v1/client/{clientHashId}/customer/{customerHashId}/bankAccounts`
                .replace(`{${"clientHashId"}}`, encodeURIComponent(String(clientHashId)))
                .replace(`{${"customerHashId"}}`, encodeURIComponent(String(customerHashId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication default required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (startingAfter !== undefined) {
                localVarQueryParameter['startingAfter'] = startingAfter;
            }

            if (endingBefore !== undefined) {
                localVarQueryParameter['endingBefore'] = endingBefore;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (tagKey !== undefined) {
                localVarQueryParameter['tagKey'] = tagKey;
            }

            if (tagValue !== undefined) {
                localVarQueryParameter['tagValue'] = tagValue;
            }

            if (accountNumber !== undefined) {
                localVarQueryParameter['accountNumber'] = accountNumber;
            }

            if (xRequestId != null) {
                localVarHeaderParameter['x-request-id'] = String(xRequestId);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This API creates a linked bank account.
         * @summary Create a linked bank account
         * @param {string} clientHashId Unique identifier of the client.
         * @param {string} customerHashId Unique identifier of the customer.
         * @param {BankAccountLinkRequest} bankAccountLinkRequest Bank account link request
         * @param {string} [xRequestId] Enter a unique UUID value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        linkBankAccount: async (clientHashId: string, customerHashId: string, bankAccountLinkRequest: BankAccountLinkRequest, xRequestId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'clientHashId' is not null or undefined
            assertParamExists('linkBankAccount', 'clientHashId', clientHashId)
            // verify required parameter 'customerHashId' is not null or undefined
            assertParamExists('linkBankAccount', 'customerHashId', customerHashId)
            // verify required parameter 'bankAccountLinkRequest' is not null or undefined
            assertParamExists('linkBankAccount', 'bankAccountLinkRequest', bankAccountLinkRequest)
            const localVarPath = `/api/v1/client/{clientHashId}/customer/{customerHashId}/bankAccounts`
                .replace(`{${"clientHashId"}}`, encodeURIComponent(String(clientHashId)))
                .replace(`{${"customerHashId"}}`, encodeURIComponent(String(customerHashId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication default required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (xRequestId != null) {
                localVarHeaderParameter['x-request-id'] = String(xRequestId);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bankAccountLinkRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This API is used to delete a linked bank account.
         * @summary Delete linked bank account
         * @param {string} clientHashId Unique identifier of the client.
         * @param {string} customerHashId Unique identifier of the customer.
         * @param {string} bankAccountId Unique identifier of the linked bank account.
         * @param {string} [xRequestId] Enter a unique UUID value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unlinkBankAccount: async (clientHashId: string, customerHashId: string, bankAccountId: string, xRequestId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'clientHashId' is not null or undefined
            assertParamExists('unlinkBankAccount', 'clientHashId', clientHashId)
            // verify required parameter 'customerHashId' is not null or undefined
            assertParamExists('unlinkBankAccount', 'customerHashId', customerHashId)
            // verify required parameter 'bankAccountId' is not null or undefined
            assertParamExists('unlinkBankAccount', 'bankAccountId', bankAccountId)
            const localVarPath = `/api/v1/client/{clientHashId}/customer/{customerHashId}/bankAccounts/{bankAccountId}`
                .replace(`{${"clientHashId"}}`, encodeURIComponent(String(clientHashId)))
                .replace(`{${"customerHashId"}}`, encodeURIComponent(String(customerHashId)))
                .replace(`{${"bankAccountId"}}`, encodeURIComponent(String(bankAccountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication default required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (xRequestId != null) {
                localVarHeaderParameter['x-request-id'] = String(xRequestId);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This API is used to update a linked bank account.
         * @summary Update linked bank account
         * @param {string} clientHashId Unique identifier of the client.
         * @param {string} customerHashId Unique identifier of the customer.
         * @param {string} bankAccountId Unique identifier of the linked bank account.
         * @param {BankAccountUpdateRequest} bankAccountUpdateRequest Bank account update request
         * @param {string} [xRequestId] Enter a unique UUID value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLinkedBankAccount: async (clientHashId: string, customerHashId: string, bankAccountId: string, bankAccountUpdateRequest: BankAccountUpdateRequest, xRequestId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'clientHashId' is not null or undefined
            assertParamExists('updateLinkedBankAccount', 'clientHashId', clientHashId)
            // verify required parameter 'customerHashId' is not null or undefined
            assertParamExists('updateLinkedBankAccount', 'customerHashId', customerHashId)
            // verify required parameter 'bankAccountId' is not null or undefined
            assertParamExists('updateLinkedBankAccount', 'bankAccountId', bankAccountId)
            // verify required parameter 'bankAccountUpdateRequest' is not null or undefined
            assertParamExists('updateLinkedBankAccount', 'bankAccountUpdateRequest', bankAccountUpdateRequest)
            const localVarPath = `/api/v1/client/{clientHashId}/customer/{customerHashId}/bankAccounts/{bankAccountId}`
                .replace(`{${"clientHashId"}}`, encodeURIComponent(String(clientHashId)))
                .replace(`{${"customerHashId"}}`, encodeURIComponent(String(customerHashId)))
                .replace(`{${"bankAccountId"}}`, encodeURIComponent(String(bankAccountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication default required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (xRequestId != null) {
                localVarHeaderParameter['x-request-id'] = String(xRequestId);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bankAccountUpdateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BankAccountsApi - functional programming interface
 * @export
 */
export const BankAccountsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BankAccountsApiAxiosParamCreator(configuration)
    return {
        /**
         * This API is used to confirm authentication of a linked bank account.
         * @summary Confirm linked bank account authentication
         * @param {string} clientHashId Unique identifier of the client.
         * @param {string} customerHashId Unique identifier of the customer.
         * @param {string} bankAccountId Unique identifier of the linked bank account.
         * @param {BankAccountConfirmationRequest} bankAccountConfirmationRequest Bank account confirmation request
         * @param {string} [xRequestId] Enter a unique UUID value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async confirmLinkedBankAccount(clientHashId: string, customerHashId: string, bankAccountId: string, bankAccountConfirmationRequest: BankAccountConfirmationRequest, xRequestId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BankAccountResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.confirmLinkedBankAccount(clientHashId, customerHashId, bankAccountId, bankAccountConfirmationRequest, xRequestId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BankAccountsApi.confirmLinkedBankAccount']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * This API is used to fetch a linked bank account.
         * @summary Fetch linked bank account
         * @param {string} clientHashId Unique identifier of the client.
         * @param {string} customerHashId Unique identifier of the customer.
         * @param {string} bankAccountId Unique identifier of the linked bank account.
         * @param {string} [xRequestId] Enter a unique UUID value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchLinkedBankAccount(clientHashId: string, customerHashId: string, bankAccountId: string, xRequestId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BankAccountResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchLinkedBankAccount(clientHashId, customerHashId, bankAccountId, xRequestId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BankAccountsApi.fetchLinkedBankAccount']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * This paginated API is used to fetch linked bank accounts.
         * @summary Fetch linked bank accounts
         * @param {string} clientHashId Unique identifier of the client.
         * @param {string} customerHashId Unique identifier of the customer.
         * @param {string} [startingAfter] Used to return the &#x60;limit&#x60; number of records after (including) the given starting position.
         * @param {string} [endingBefore] Used to return the &#x60;limit&#x60; number of records up to (excluding) the given ending position. Effectively returns the previous page for a given cursor.
         * @param {number} [limit] The number of items to be returned on each page.
         * @param {string} [tagKey] The tag key used to filter the results.
         * @param {string} [tagValue] The tag value used to filter the results.
         * @param {string} [accountNumber] The account number used to filter the results.
         * @param {string} [xRequestId] Enter a unique UUID value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchLinkedBankAccounts(clientHashId: string, customerHashId: string, startingAfter?: string, endingBefore?: string, limit?: number, tagKey?: string, tagValue?: string, accountNumber?: string, xRequestId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedBankAccountResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchLinkedBankAccounts(clientHashId, customerHashId, startingAfter, endingBefore, limit, tagKey, tagValue, accountNumber, xRequestId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BankAccountsApi.fetchLinkedBankAccounts']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * This API creates a linked bank account.
         * @summary Create a linked bank account
         * @param {string} clientHashId Unique identifier of the client.
         * @param {string} customerHashId Unique identifier of the customer.
         * @param {BankAccountLinkRequest} bankAccountLinkRequest Bank account link request
         * @param {string} [xRequestId] Enter a unique UUID value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async linkBankAccount(clientHashId: string, customerHashId: string, bankAccountLinkRequest: BankAccountLinkRequest, xRequestId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BankAccountResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.linkBankAccount(clientHashId, customerHashId, bankAccountLinkRequest, xRequestId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BankAccountsApi.linkBankAccount']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * This API is used to delete a linked bank account.
         * @summary Delete linked bank account
         * @param {string} clientHashId Unique identifier of the client.
         * @param {string} customerHashId Unique identifier of the customer.
         * @param {string} bankAccountId Unique identifier of the linked bank account.
         * @param {string} [xRequestId] Enter a unique UUID value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async unlinkBankAccount(clientHashId: string, customerHashId: string, bankAccountId: string, xRequestId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.unlinkBankAccount(clientHashId, customerHashId, bankAccountId, xRequestId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BankAccountsApi.unlinkBankAccount']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * This API is used to update a linked bank account.
         * @summary Update linked bank account
         * @param {string} clientHashId Unique identifier of the client.
         * @param {string} customerHashId Unique identifier of the customer.
         * @param {string} bankAccountId Unique identifier of the linked bank account.
         * @param {BankAccountUpdateRequest} bankAccountUpdateRequest Bank account update request
         * @param {string} [xRequestId] Enter a unique UUID value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateLinkedBankAccount(clientHashId: string, customerHashId: string, bankAccountId: string, bankAccountUpdateRequest: BankAccountUpdateRequest, xRequestId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BankAccountResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateLinkedBankAccount(clientHashId, customerHashId, bankAccountId, bankAccountUpdateRequest, xRequestId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BankAccountsApi.updateLinkedBankAccount']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * BankAccountsApi - factory interface
 * @export
 */
export const BankAccountsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BankAccountsApiFp(configuration)
    return {
        /**
         * This API is used to confirm authentication of a linked bank account.
         * @summary Confirm linked bank account authentication
         * @param {BankAccountsApiConfirmLinkedBankAccountRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        confirmLinkedBankAccount(requestParameters: BankAccountsApiConfirmLinkedBankAccountRequest, options?: RawAxiosRequestConfig): AxiosPromise<BankAccountResponse> {
            return localVarFp.confirmLinkedBankAccount(requestParameters.clientHashId, requestParameters.customerHashId, requestParameters.bankAccountId, requestParameters.bankAccountConfirmationRequest, requestParameters.xRequestId, options).then((request) => request(axios, basePath));
        },
        /**
         * This API is used to fetch a linked bank account.
         * @summary Fetch linked bank account
         * @param {BankAccountsApiFetchLinkedBankAccountRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchLinkedBankAccount(requestParameters: BankAccountsApiFetchLinkedBankAccountRequest, options?: RawAxiosRequestConfig): AxiosPromise<BankAccountResponse> {
            return localVarFp.fetchLinkedBankAccount(requestParameters.clientHashId, requestParameters.customerHashId, requestParameters.bankAccountId, requestParameters.xRequestId, options).then((request) => request(axios, basePath));
        },
        /**
         * This paginated API is used to fetch linked bank accounts.
         * @summary Fetch linked bank accounts
         * @param {BankAccountsApiFetchLinkedBankAccountsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchLinkedBankAccounts(requestParameters: BankAccountsApiFetchLinkedBankAccountsRequest, options?: RawAxiosRequestConfig): AxiosPromise<PaginatedBankAccountResponse> {
            return localVarFp.fetchLinkedBankAccounts(requestParameters.clientHashId, requestParameters.customerHashId, requestParameters.startingAfter, requestParameters.endingBefore, requestParameters.limit, requestParameters.tagKey, requestParameters.tagValue, requestParameters.accountNumber, requestParameters.xRequestId, options).then((request) => request(axios, basePath));
        },
        /**
         * This API creates a linked bank account.
         * @summary Create a linked bank account
         * @param {BankAccountsApiLinkBankAccountRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        linkBankAccount(requestParameters: BankAccountsApiLinkBankAccountRequest, options?: RawAxiosRequestConfig): AxiosPromise<BankAccountResponse> {
            return localVarFp.linkBankAccount(requestParameters.clientHashId, requestParameters.customerHashId, requestParameters.bankAccountLinkRequest, requestParameters.xRequestId, options).then((request) => request(axios, basePath));
        },
        /**
         * This API is used to delete a linked bank account.
         * @summary Delete linked bank account
         * @param {BankAccountsApiUnlinkBankAccountRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unlinkBankAccount(requestParameters: BankAccountsApiUnlinkBankAccountRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.unlinkBankAccount(requestParameters.clientHashId, requestParameters.customerHashId, requestParameters.bankAccountId, requestParameters.xRequestId, options).then((request) => request(axios, basePath));
        },
        /**
         * This API is used to update a linked bank account.
         * @summary Update linked bank account
         * @param {BankAccountsApiUpdateLinkedBankAccountRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLinkedBankAccount(requestParameters: BankAccountsApiUpdateLinkedBankAccountRequest, options?: RawAxiosRequestConfig): AxiosPromise<BankAccountResponse> {
            return localVarFp.updateLinkedBankAccount(requestParameters.clientHashId, requestParameters.customerHashId, requestParameters.bankAccountId, requestParameters.bankAccountUpdateRequest, requestParameters.xRequestId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for confirmLinkedBankAccount operation in BankAccountsApi.
 * @export
 * @interface BankAccountsApiConfirmLinkedBankAccountRequest
 */
export interface BankAccountsApiConfirmLinkedBankAccountRequest {
    /**
     * Unique identifier of the client.
     * @type {string}
     * @memberof BankAccountsApiConfirmLinkedBankAccount
     */
    readonly clientHashId: string

    /**
     * Unique identifier of the customer.
     * @type {string}
     * @memberof BankAccountsApiConfirmLinkedBankAccount
     */
    readonly customerHashId: string

    /**
     * Unique identifier of the linked bank account.
     * @type {string}
     * @memberof BankAccountsApiConfirmLinkedBankAccount
     */
    readonly bankAccountId: string

    /**
     * Bank account confirmation request
     * @type {BankAccountConfirmationRequest}
     * @memberof BankAccountsApiConfirmLinkedBankAccount
     */
    readonly bankAccountConfirmationRequest: BankAccountConfirmationRequest

    /**
     * Enter a unique UUID value.
     * @type {string}
     * @memberof BankAccountsApiConfirmLinkedBankAccount
     */
    readonly xRequestId?: string
}

/**
 * Request parameters for fetchLinkedBankAccount operation in BankAccountsApi.
 * @export
 * @interface BankAccountsApiFetchLinkedBankAccountRequest
 */
export interface BankAccountsApiFetchLinkedBankAccountRequest {
    /**
     * Unique identifier of the client.
     * @type {string}
     * @memberof BankAccountsApiFetchLinkedBankAccount
     */
    readonly clientHashId: string

    /**
     * Unique identifier of the customer.
     * @type {string}
     * @memberof BankAccountsApiFetchLinkedBankAccount
     */
    readonly customerHashId: string

    /**
     * Unique identifier of the linked bank account.
     * @type {string}
     * @memberof BankAccountsApiFetchLinkedBankAccount
     */
    readonly bankAccountId: string

    /**
     * Enter a unique UUID value.
     * @type {string}
     * @memberof BankAccountsApiFetchLinkedBankAccount
     */
    readonly xRequestId?: string
}

/**
 * Request parameters for fetchLinkedBankAccounts operation in BankAccountsApi.
 * @export
 * @interface BankAccountsApiFetchLinkedBankAccountsRequest
 */
export interface BankAccountsApiFetchLinkedBankAccountsRequest {
    /**
     * Unique identifier of the client.
     * @type {string}
     * @memberof BankAccountsApiFetchLinkedBankAccounts
     */
    readonly clientHashId: string

    /**
     * Unique identifier of the customer.
     * @type {string}
     * @memberof BankAccountsApiFetchLinkedBankAccounts
     */
    readonly customerHashId: string

    /**
     * Used to return the &#x60;limit&#x60; number of records after (including) the given starting position.
     * @type {string}
     * @memberof BankAccountsApiFetchLinkedBankAccounts
     */
    readonly startingAfter?: string

    /**
     * Used to return the &#x60;limit&#x60; number of records up to (excluding) the given ending position. Effectively returns the previous page for a given cursor.
     * @type {string}
     * @memberof BankAccountsApiFetchLinkedBankAccounts
     */
    readonly endingBefore?: string

    /**
     * The number of items to be returned on each page.
     * @type {number}
     * @memberof BankAccountsApiFetchLinkedBankAccounts
     */
    readonly limit?: number

    /**
     * The tag key used to filter the results.
     * @type {string}
     * @memberof BankAccountsApiFetchLinkedBankAccounts
     */
    readonly tagKey?: string

    /**
     * The tag value used to filter the results.
     * @type {string}
     * @memberof BankAccountsApiFetchLinkedBankAccounts
     */
    readonly tagValue?: string

    /**
     * The account number used to filter the results.
     * @type {string}
     * @memberof BankAccountsApiFetchLinkedBankAccounts
     */
    readonly accountNumber?: string

    /**
     * Enter a unique UUID value.
     * @type {string}
     * @memberof BankAccountsApiFetchLinkedBankAccounts
     */
    readonly xRequestId?: string
}

/**
 * Request parameters for linkBankAccount operation in BankAccountsApi.
 * @export
 * @interface BankAccountsApiLinkBankAccountRequest
 */
export interface BankAccountsApiLinkBankAccountRequest {
    /**
     * Unique identifier of the client.
     * @type {string}
     * @memberof BankAccountsApiLinkBankAccount
     */
    readonly clientHashId: string

    /**
     * Unique identifier of the customer.
     * @type {string}
     * @memberof BankAccountsApiLinkBankAccount
     */
    readonly customerHashId: string

    /**
     * Bank account link request
     * @type {BankAccountLinkRequest}
     * @memberof BankAccountsApiLinkBankAccount
     */
    readonly bankAccountLinkRequest: BankAccountLinkRequest

    /**
     * Enter a unique UUID value.
     * @type {string}
     * @memberof BankAccountsApiLinkBankAccount
     */
    readonly xRequestId?: string
}

/**
 * Request parameters for unlinkBankAccount operation in BankAccountsApi.
 * @export
 * @interface BankAccountsApiUnlinkBankAccountRequest
 */
export interface BankAccountsApiUnlinkBankAccountRequest {
    /**
     * Unique identifier of the client.
     * @type {string}
     * @memberof BankAccountsApiUnlinkBankAccount
     */
    readonly clientHashId: string

    /**
     * Unique identifier of the customer.
     * @type {string}
     * @memberof BankAccountsApiUnlinkBankAccount
     */
    readonly customerHashId: string

    /**
     * Unique identifier of the linked bank account.
     * @type {string}
     * @memberof BankAccountsApiUnlinkBankAccount
     */
    readonly bankAccountId: string

    /**
     * Enter a unique UUID value.
     * @type {string}
     * @memberof BankAccountsApiUnlinkBankAccount
     */
    readonly xRequestId?: string
}

/**
 * Request parameters for updateLinkedBankAccount operation in BankAccountsApi.
 * @export
 * @interface BankAccountsApiUpdateLinkedBankAccountRequest
 */
export interface BankAccountsApiUpdateLinkedBankAccountRequest {
    /**
     * Unique identifier of the client.
     * @type {string}
     * @memberof BankAccountsApiUpdateLinkedBankAccount
     */
    readonly clientHashId: string

    /**
     * Unique identifier of the customer.
     * @type {string}
     * @memberof BankAccountsApiUpdateLinkedBankAccount
     */
    readonly customerHashId: string

    /**
     * Unique identifier of the linked bank account.
     * @type {string}
     * @memberof BankAccountsApiUpdateLinkedBankAccount
     */
    readonly bankAccountId: string

    /**
     * Bank account update request
     * @type {BankAccountUpdateRequest}
     * @memberof BankAccountsApiUpdateLinkedBankAccount
     */
    readonly bankAccountUpdateRequest: BankAccountUpdateRequest

    /**
     * Enter a unique UUID value.
     * @type {string}
     * @memberof BankAccountsApiUpdateLinkedBankAccount
     */
    readonly xRequestId?: string
}

/**
 * BankAccountsApi - object-oriented interface
 * @export
 * @class BankAccountsApi
 * @extends {BaseAPI}
 */
export class BankAccountsApi extends BaseAPI {
    /**
     * This API is used to confirm authentication of a linked bank account.
     * @summary Confirm linked bank account authentication
     * @param {BankAccountsApiConfirmLinkedBankAccountRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankAccountsApi
     */
    public confirmLinkedBankAccount(requestParameters: BankAccountsApiConfirmLinkedBankAccountRequest, options?: RawAxiosRequestConfig) {
        return BankAccountsApiFp(this.configuration).confirmLinkedBankAccount(requestParameters.clientHashId, requestParameters.customerHashId, requestParameters.bankAccountId, requestParameters.bankAccountConfirmationRequest, requestParameters.xRequestId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This API is used to fetch a linked bank account.
     * @summary Fetch linked bank account
     * @param {BankAccountsApiFetchLinkedBankAccountRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankAccountsApi
     */
    public fetchLinkedBankAccount(requestParameters: BankAccountsApiFetchLinkedBankAccountRequest, options?: RawAxiosRequestConfig) {
        return BankAccountsApiFp(this.configuration).fetchLinkedBankAccount(requestParameters.clientHashId, requestParameters.customerHashId, requestParameters.bankAccountId, requestParameters.xRequestId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This paginated API is used to fetch linked bank accounts.
     * @summary Fetch linked bank accounts
     * @param {BankAccountsApiFetchLinkedBankAccountsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankAccountsApi
     */
    public fetchLinkedBankAccounts(requestParameters: BankAccountsApiFetchLinkedBankAccountsRequest, options?: RawAxiosRequestConfig) {
        return BankAccountsApiFp(this.configuration).fetchLinkedBankAccounts(requestParameters.clientHashId, requestParameters.customerHashId, requestParameters.startingAfter, requestParameters.endingBefore, requestParameters.limit, requestParameters.tagKey, requestParameters.tagValue, requestParameters.accountNumber, requestParameters.xRequestId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This API creates a linked bank account.
     * @summary Create a linked bank account
     * @param {BankAccountsApiLinkBankAccountRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankAccountsApi
     */
    public linkBankAccount(requestParameters: BankAccountsApiLinkBankAccountRequest, options?: RawAxiosRequestConfig) {
        return BankAccountsApiFp(this.configuration).linkBankAccount(requestParameters.clientHashId, requestParameters.customerHashId, requestParameters.bankAccountLinkRequest, requestParameters.xRequestId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This API is used to delete a linked bank account.
     * @summary Delete linked bank account
     * @param {BankAccountsApiUnlinkBankAccountRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankAccountsApi
     */
    public unlinkBankAccount(requestParameters: BankAccountsApiUnlinkBankAccountRequest, options?: RawAxiosRequestConfig) {
        return BankAccountsApiFp(this.configuration).unlinkBankAccount(requestParameters.clientHashId, requestParameters.customerHashId, requestParameters.bankAccountId, requestParameters.xRequestId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This API is used to update a linked bank account.
     * @summary Update linked bank account
     * @param {BankAccountsApiUpdateLinkedBankAccountRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankAccountsApi
     */
    public updateLinkedBankAccount(requestParameters: BankAccountsApiUpdateLinkedBankAccountRequest, options?: RawAxiosRequestConfig) {
        return BankAccountsApiFp(this.configuration).updateLinkedBankAccount(requestParameters.clientHashId, requestParameters.customerHashId, requestParameters.bankAccountId, requestParameters.bankAccountUpdateRequest, requestParameters.xRequestId, options).then((request) => request(this.axios, this.basePath));
    }
}

