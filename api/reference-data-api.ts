/* tslint:disable */
/* eslint-disable */
/**
 * NIUM Platform
 * NIUM Platform
 *
 * The version of the OpenAPI document: 2023.12.12
 * Contact: experience@nium.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import { PartialSearchBankNameResponseDTO } from '../model';
// @ts-ignore
import { PartialSearchBranchNameResponseDTO } from '../model';
// @ts-ignore
import { PartialSearchDTO } from '../model';
// @ts-ignore
import { PayoutCustomerApiError } from '../model';
// @ts-ignore
import { Resource } from '../model';
// @ts-ignore
import { SupportedCorridorsResponseDTO } from '../model';
/**
 * ReferenceDataApi - axios parameter creator
 * @export
 */
export const ReferenceDataApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This API allows you to fetch the bank details against the routing information.
         * @summary Fetch Bank Details using Routing Code
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} countryCode This field accepts the [2-letter ISO-2 country code](doc:currency-and-country-codes) of a beneficiary.
         * @param {string} customerHashId This field accepts the unique customer identifier generated on customer creation.
         * @param {string} routingCodeType This field accepts the routing code type 1. The possible values are: SWIFT for all cases where SWIFT is applicable IFSC (relevant for India) ACH CODE (relevant for USA) BSB CODE (relevant for Australia) SORT CODE (relevant for the UK) LOCATION ID (relevant for Nepal) BANK CODE (relevant for few countries including Canada, Hong Kong, Sri Lanka, South Korea, Pakistan, Brazil, and some more) TRANSIT NUMBER (relevant for Canada) BRANCH CODE (relevant for Sri Lanka, Vietnam, Brazil, Uruguay, Kenya and some more) Given that the routing_code_type_1 is a PATH parameter, apply URL encoding. For example, when you want to pass ACH CODE, after URL encoding you will pass it as ACH%20CODE
         * @param {string} routingCodeValue This field accepts the routing code value 1. Refer to the [Examples of Routing Codes](/apis/docs/routing-codes#examples-of-routing-codes).
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchBankDetailsusingRoutingCode: async (clientHashId: string, countryCode: string, customerHashId: string, routingCodeType: string, routingCodeValue: string, xRequestId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'clientHashId' is not null or undefined
            assertParamExists('fetchBankDetailsusingRoutingCode', 'clientHashId', clientHashId)
            // verify required parameter 'countryCode' is not null or undefined
            assertParamExists('fetchBankDetailsusingRoutingCode', 'countryCode', countryCode)
            // verify required parameter 'customerHashId' is not null or undefined
            assertParamExists('fetchBankDetailsusingRoutingCode', 'customerHashId', customerHashId)
            // verify required parameter 'routingCodeType' is not null or undefined
            assertParamExists('fetchBankDetailsusingRoutingCode', 'routingCodeType', routingCodeType)
            // verify required parameter 'routingCodeValue' is not null or undefined
            assertParamExists('fetchBankDetailsusingRoutingCode', 'routingCodeValue', routingCodeValue)
            const localVarPath = `/api/v1/client/{clientHashId}/customer/{customerHashId}/country/{countryCode}/routingCodeType/{routingCodeType}/routingCodeValue/{routingCodeValue}/routingCode`
                .replace(`{${"clientHashId"}}`, encodeURIComponent(String(clientHashId)))
                .replace(`{${"countryCode"}}`, encodeURIComponent(String(countryCode)))
                .replace(`{${"customerHashId"}}`, encodeURIComponent(String(customerHashId)))
                .replace(`{${"routingCodeType"}}`, encodeURIComponent(String(routingCodeType)))
                .replace(`{${"routingCodeValue"}}`, encodeURIComponent(String(routingCodeValue)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication default required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (xRequestId != null) {
                localVarHeaderParameter['x-request-id'] = String(xRequestId);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This API will allow you to fetch the supported corridors for remittance with details.
         * @summary Fetch Supported Corridors
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} customerHashId Unique customer identifier generated on customer creation.
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchSupportedCorridors: async (clientHashId: string, customerHashId: string, xRequestId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'clientHashId' is not null or undefined
            assertParamExists('fetchSupportedCorridors', 'clientHashId', clientHashId)
            // verify required parameter 'customerHashId' is not null or undefined
            assertParamExists('fetchSupportedCorridors', 'customerHashId', customerHashId)
            const localVarPath = `/api/v1/client/{clientHashId}/customer/{customerHashId}/supportedCorridors`
                .replace(`{${"clientHashId"}}`, encodeURIComponent(String(clientHashId)))
                .replace(`{${"customerHashId"}}`, encodeURIComponent(String(customerHashId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication default required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (xRequestId != null) {
                localVarHeaderParameter['x-request-id'] = String(xRequestId);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This API will allow you to fetch the supported corridors for remittance with details.
         * @summary Fetch Supported Corridors V2
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} [beneficiaryAccountType] This field accepts the beneficiary account type.
         * @param {string} [clientType] This field accepts type of Client e.g. FI, NonFI, default NonFI.
         * @param {string} [customerType] This field accepts the type of customer.
         * @param {string} [destinationCountry] This field accepts the [2-letter ISO-2 destination country code](https://docs.nium.com/apis/docs/currency-and-country-codes).
         * @param {string} [destinationCurrency] This field accepts the [3-letter ISO-4217 currency code](https://docs.nium.com/apis/docs/currency-and-country-codes) which will be used to filter the user selected currency and get the payout method.
         * @param {string} [payoutMethod] This field accepts the different modes of payout.
         * @param {string} [routingCodeType] This field determines the routing code type for the currency.
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchSupportedCorridorsV2: async (clientHashId: string, beneficiaryAccountType?: string, clientType?: string, customerType?: string, destinationCountry?: string, destinationCurrency?: string, payoutMethod?: string, routingCodeType?: string, xRequestId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'clientHashId' is not null or undefined
            assertParamExists('fetchSupportedCorridorsV2', 'clientHashId', clientHashId)
            const localVarPath = `/api/v2/client/{clientHashId}/supportedCorridors`
                .replace(`{${"clientHashId"}}`, encodeURIComponent(String(clientHashId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication default required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (beneficiaryAccountType !== undefined) {
                localVarQueryParameter['beneficiaryAccountType'] = beneficiaryAccountType;
            }

            if (clientType !== undefined) {
                localVarQueryParameter['clientType'] = clientType;
            }

            if (customerType !== undefined) {
                localVarQueryParameter['customerType'] = customerType;
            }

            if (destinationCountry !== undefined) {
                localVarQueryParameter['destinationCountry'] = destinationCountry;
            }

            if (destinationCurrency !== undefined) {
                localVarQueryParameter['destinationCurrency'] = destinationCurrency;
            }

            if (payoutMethod !== undefined) {
                localVarQueryParameter['payoutMethod'] = payoutMethod;
            }

            if (routingCodeType !== undefined) {
                localVarQueryParameter['routingCodeType'] = routingCodeType;
            }

            if (xRequestId != null) {
                localVarHeaderParameter['x-request-id'] = String(xRequestId);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This API will allow you to search the routing code details using bank name.
         * @summary Search Routing Code Using Bank Name
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} countryCode This field accepts the [2-letter ISO-2 country code](doc:currency-and-country-codes) for which routing code search is initiated.
         * @param {SearchRoutingCodeUsingBankNameRoutingCodeTypeEnum} routingCodeType This field determines the routing code type for the search.
         * @param {string} searchValue This field accepts the partial or full value of the Bank Name on which the search is initiated, for example, it could be DBS.
         * @param {string} [bankCode] This field can accept the bank code of specified branch and country.
         * @param {string} [bankName] This field can accept the bank name associated with country.
         * @param {string} [currencyCode] This field accepts the [3-letter ISO-4217 currency code](doc:currency-and-country-codes) for which routing code search is to be initiated.
         * @param {string} [payoutMethod] This field can accept the different modes of payout. This field can accept one of the following values: LOCAL SWIFT WALLET CARD PROXY(upcoming feature) Default value of the parameter is LOCAL.
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchRoutingCodeUsingBankName: async (clientHashId: string, countryCode: string, routingCodeType: SearchRoutingCodeUsingBankNameRoutingCodeTypeEnum, searchValue: string, bankCode?: string, bankName?: string, currencyCode?: string, payoutMethod?: string, xRequestId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'clientHashId' is not null or undefined
            assertParamExists('searchRoutingCodeUsingBankName', 'clientHashId', clientHashId)
            // verify required parameter 'countryCode' is not null or undefined
            assertParamExists('searchRoutingCodeUsingBankName', 'countryCode', countryCode)
            // verify required parameter 'routingCodeType' is not null or undefined
            assertParamExists('searchRoutingCodeUsingBankName', 'routingCodeType', routingCodeType)
            // verify required parameter 'searchValue' is not null or undefined
            assertParamExists('searchRoutingCodeUsingBankName', 'searchValue', searchValue)
            const localVarPath = `/api/v2/client/{clientHashId}/payout/banks`
                .replace(`{${"clientHashId"}}`, encodeURIComponent(String(clientHashId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication default required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (bankCode !== undefined) {
                localVarQueryParameter['bankCode'] = bankCode;
            }

            if (bankName !== undefined) {
                localVarQueryParameter['bankName'] = bankName;
            }

            if (countryCode !== undefined) {
                localVarQueryParameter['countryCode'] = countryCode;
            }

            if (currencyCode !== undefined) {
                localVarQueryParameter['currencyCode'] = currencyCode;
            }

            if (payoutMethod !== undefined) {
                localVarQueryParameter['payoutMethod'] = payoutMethod;
            }

            if (routingCodeType !== undefined) {
                localVarQueryParameter['routingCodeType'] = routingCodeType;
            }

            if (searchValue !== undefined) {
                localVarQueryParameter['searchValue'] = searchValue;
            }

            if (xRequestId != null) {
                localVarHeaderParameter['x-request-id'] = String(xRequestId);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This API will allow you to search the routing code details using branch name.
         * @summary Search Routing Code Using Branch Name
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} countryCode This field accepts the [2-letter ISO-2 country code](doc:currency-and-country-codes) for which routing code search is initiated.
         * @param {SearchRoutingCodeUsingBranchNameRoutingCodeTypeEnum} routingCodeType This field determines the routing code type for the search.
         * @param {string} searchValue This field accepts the partial or full value of the Bank Name on which the search is initiated, for example, it could be DBS.
         * @param {string} [bankCode] This field can accept the bank code of specified branch and country.
         * @param {string} [bankName] This field can accept the bank name associated with country.
         * @param {string} [currencyCode] This field accepts the [3-letter ISO-4217 currency code](doc:currency-and-country-codes) for which routing code search is to be initiated.
         * @param {string} [payoutMethod] This field can accept the different modes of payout. This field can accept one of the following values: LOCAL SWIFT WALLET CARD PROXY(upcoming feature) Default value of the parameter is LOCAL.
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchRoutingCodeUsingBranchName: async (clientHashId: string, countryCode: string, routingCodeType: SearchRoutingCodeUsingBranchNameRoutingCodeTypeEnum, searchValue: string, bankCode?: string, bankName?: string, currencyCode?: string, payoutMethod?: string, xRequestId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'clientHashId' is not null or undefined
            assertParamExists('searchRoutingCodeUsingBranchName', 'clientHashId', clientHashId)
            // verify required parameter 'countryCode' is not null or undefined
            assertParamExists('searchRoutingCodeUsingBranchName', 'countryCode', countryCode)
            // verify required parameter 'routingCodeType' is not null or undefined
            assertParamExists('searchRoutingCodeUsingBranchName', 'routingCodeType', routingCodeType)
            // verify required parameter 'searchValue' is not null or undefined
            assertParamExists('searchRoutingCodeUsingBranchName', 'searchValue', searchValue)
            const localVarPath = `/api/v2/client/{clientHashId}/payout/branches`
                .replace(`{${"clientHashId"}}`, encodeURIComponent(String(clientHashId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication default required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (bankCode !== undefined) {
                localVarQueryParameter['bankCode'] = bankCode;
            }

            if (bankName !== undefined) {
                localVarQueryParameter['bankName'] = bankName;
            }

            if (countryCode !== undefined) {
                localVarQueryParameter['countryCode'] = countryCode;
            }

            if (currencyCode !== undefined) {
                localVarQueryParameter['currencyCode'] = currencyCode;
            }

            if (payoutMethod !== undefined) {
                localVarQueryParameter['payoutMethod'] = payoutMethod;
            }

            if (routingCodeType !== undefined) {
                localVarQueryParameter['routingCodeType'] = routingCodeType;
            }

            if (searchValue !== undefined) {
                localVarQueryParameter['searchValue'] = searchValue;
            }

            if (xRequestId != null) {
                localVarHeaderParameter['x-request-id'] = String(xRequestId);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This API will allow you to search the routing code details of a bank based on certain parameters - i.e., by using bank name or branch name. This API will help you to build a user experience where you can help your users to locate a specific routing code (that could be SWIFT, IFSC, SORT CODE, ACH CODE, etc., - see the list below) by using full or partial name search of bank name or branch name. For example, if your user is looking for SWIFT CODE for HSBC in the UK, then this API can be used to search for the SORT CODE by searching using the bank name.
         * @summary Search Routing Code (using bank name/branch name)
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} customerHashId Unique customer identifier generated on customer creation.
         * @param {PartialSearchDTO} partialSearchDTO partialSearchDTO
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchRoutingCodeusingbanknamebranchname: async (clientHashId: string, customerHashId: string, partialSearchDTO: PartialSearchDTO, xRequestId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'clientHashId' is not null or undefined
            assertParamExists('searchRoutingCodeusingbanknamebranchname', 'clientHashId', clientHashId)
            // verify required parameter 'customerHashId' is not null or undefined
            assertParamExists('searchRoutingCodeusingbanknamebranchname', 'customerHashId', customerHashId)
            // verify required parameter 'partialSearchDTO' is not null or undefined
            assertParamExists('searchRoutingCodeusingbanknamebranchname', 'partialSearchDTO', partialSearchDTO)
            const localVarPath = `/api/v1/client/{clientHashId}/customer/{customerHashId}/partialSearch`
                .replace(`{${"clientHashId"}}`, encodeURIComponent(String(clientHashId)))
                .replace(`{${"customerHashId"}}`, encodeURIComponent(String(customerHashId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication default required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (xRequestId != null) {
                localVarHeaderParameter['x-request-id'] = String(xRequestId);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(partialSearchDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ReferenceDataApi - functional programming interface
 * @export
 */
export const ReferenceDataApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ReferenceDataApiAxiosParamCreator(configuration)
    return {
        /**
         * This API allows you to fetch the bank details against the routing information.
         * @summary Fetch Bank Details using Routing Code
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} countryCode This field accepts the [2-letter ISO-2 country code](doc:currency-and-country-codes) of a beneficiary.
         * @param {string} customerHashId This field accepts the unique customer identifier generated on customer creation.
         * @param {string} routingCodeType This field accepts the routing code type 1. The possible values are: SWIFT for all cases where SWIFT is applicable IFSC (relevant for India) ACH CODE (relevant for USA) BSB CODE (relevant for Australia) SORT CODE (relevant for the UK) LOCATION ID (relevant for Nepal) BANK CODE (relevant for few countries including Canada, Hong Kong, Sri Lanka, South Korea, Pakistan, Brazil, and some more) TRANSIT NUMBER (relevant for Canada) BRANCH CODE (relevant for Sri Lanka, Vietnam, Brazil, Uruguay, Kenya and some more) Given that the routing_code_type_1 is a PATH parameter, apply URL encoding. For example, when you want to pass ACH CODE, after URL encoding you will pass it as ACH%20CODE
         * @param {string} routingCodeValue This field accepts the routing code value 1. Refer to the [Examples of Routing Codes](/apis/docs/routing-codes#examples-of-routing-codes).
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchBankDetailsusingRoutingCode(clientHashId: string, countryCode: string, customerHashId: string, routingCodeType: string, routingCodeValue: string, xRequestId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Resource>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchBankDetailsusingRoutingCode(clientHashId, countryCode, customerHashId, routingCodeType, routingCodeValue, xRequestId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ReferenceDataApi.fetchBankDetailsusingRoutingCode']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * This API will allow you to fetch the supported corridors for remittance with details.
         * @summary Fetch Supported Corridors
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} customerHashId Unique customer identifier generated on customer creation.
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchSupportedCorridors(clientHashId: string, customerHashId: string, xRequestId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Resource>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchSupportedCorridors(clientHashId, customerHashId, xRequestId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ReferenceDataApi.fetchSupportedCorridors']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * This API will allow you to fetch the supported corridors for remittance with details.
         * @summary Fetch Supported Corridors V2
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} [beneficiaryAccountType] This field accepts the beneficiary account type.
         * @param {string} [clientType] This field accepts type of Client e.g. FI, NonFI, default NonFI.
         * @param {string} [customerType] This field accepts the type of customer.
         * @param {string} [destinationCountry] This field accepts the [2-letter ISO-2 destination country code](https://docs.nium.com/apis/docs/currency-and-country-codes).
         * @param {string} [destinationCurrency] This field accepts the [3-letter ISO-4217 currency code](https://docs.nium.com/apis/docs/currency-and-country-codes) which will be used to filter the user selected currency and get the payout method.
         * @param {string} [payoutMethod] This field accepts the different modes of payout.
         * @param {string} [routingCodeType] This field determines the routing code type for the currency.
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchSupportedCorridorsV2(clientHashId: string, beneficiaryAccountType?: string, clientType?: string, customerType?: string, destinationCountry?: string, destinationCurrency?: string, payoutMethod?: string, routingCodeType?: string, xRequestId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SupportedCorridorsResponseDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchSupportedCorridorsV2(clientHashId, beneficiaryAccountType, clientType, customerType, destinationCountry, destinationCurrency, payoutMethod, routingCodeType, xRequestId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ReferenceDataApi.fetchSupportedCorridorsV2']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * This API will allow you to search the routing code details using bank name.
         * @summary Search Routing Code Using Bank Name
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} countryCode This field accepts the [2-letter ISO-2 country code](doc:currency-and-country-codes) for which routing code search is initiated.
         * @param {SearchRoutingCodeUsingBankNameRoutingCodeTypeEnum} routingCodeType This field determines the routing code type for the search.
         * @param {string} searchValue This field accepts the partial or full value of the Bank Name on which the search is initiated, for example, it could be DBS.
         * @param {string} [bankCode] This field can accept the bank code of specified branch and country.
         * @param {string} [bankName] This field can accept the bank name associated with country.
         * @param {string} [currencyCode] This field accepts the [3-letter ISO-4217 currency code](doc:currency-and-country-codes) for which routing code search is to be initiated.
         * @param {string} [payoutMethod] This field can accept the different modes of payout. This field can accept one of the following values: LOCAL SWIFT WALLET CARD PROXY(upcoming feature) Default value of the parameter is LOCAL.
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchRoutingCodeUsingBankName(clientHashId: string, countryCode: string, routingCodeType: SearchRoutingCodeUsingBankNameRoutingCodeTypeEnum, searchValue: string, bankCode?: string, bankName?: string, currencyCode?: string, payoutMethod?: string, xRequestId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PartialSearchBankNameResponseDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchRoutingCodeUsingBankName(clientHashId, countryCode, routingCodeType, searchValue, bankCode, bankName, currencyCode, payoutMethod, xRequestId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ReferenceDataApi.searchRoutingCodeUsingBankName']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * This API will allow you to search the routing code details using branch name.
         * @summary Search Routing Code Using Branch Name
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} countryCode This field accepts the [2-letter ISO-2 country code](doc:currency-and-country-codes) for which routing code search is initiated.
         * @param {SearchRoutingCodeUsingBranchNameRoutingCodeTypeEnum} routingCodeType This field determines the routing code type for the search.
         * @param {string} searchValue This field accepts the partial or full value of the Bank Name on which the search is initiated, for example, it could be DBS.
         * @param {string} [bankCode] This field can accept the bank code of specified branch and country.
         * @param {string} [bankName] This field can accept the bank name associated with country.
         * @param {string} [currencyCode] This field accepts the [3-letter ISO-4217 currency code](doc:currency-and-country-codes) for which routing code search is to be initiated.
         * @param {string} [payoutMethod] This field can accept the different modes of payout. This field can accept one of the following values: LOCAL SWIFT WALLET CARD PROXY(upcoming feature) Default value of the parameter is LOCAL.
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchRoutingCodeUsingBranchName(clientHashId: string, countryCode: string, routingCodeType: SearchRoutingCodeUsingBranchNameRoutingCodeTypeEnum, searchValue: string, bankCode?: string, bankName?: string, currencyCode?: string, payoutMethod?: string, xRequestId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PartialSearchBranchNameResponseDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchRoutingCodeUsingBranchName(clientHashId, countryCode, routingCodeType, searchValue, bankCode, bankName, currencyCode, payoutMethod, xRequestId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ReferenceDataApi.searchRoutingCodeUsingBranchName']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * This API will allow you to search the routing code details of a bank based on certain parameters - i.e., by using bank name or branch name. This API will help you to build a user experience where you can help your users to locate a specific routing code (that could be SWIFT, IFSC, SORT CODE, ACH CODE, etc., - see the list below) by using full or partial name search of bank name or branch name. For example, if your user is looking for SWIFT CODE for HSBC in the UK, then this API can be used to search for the SORT CODE by searching using the bank name.
         * @summary Search Routing Code (using bank name/branch name)
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} customerHashId Unique customer identifier generated on customer creation.
         * @param {PartialSearchDTO} partialSearchDTO partialSearchDTO
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchRoutingCodeusingbanknamebranchname(clientHashId: string, customerHashId: string, partialSearchDTO: PartialSearchDTO, xRequestId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Resource>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchRoutingCodeusingbanknamebranchname(clientHashId, customerHashId, partialSearchDTO, xRequestId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ReferenceDataApi.searchRoutingCodeusingbanknamebranchname']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ReferenceDataApi - factory interface
 * @export
 */
export const ReferenceDataApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ReferenceDataApiFp(configuration)
    return {
        /**
         * This API allows you to fetch the bank details against the routing information.
         * @summary Fetch Bank Details using Routing Code
         * @param {ReferenceDataApiFetchBankDetailsusingRoutingCodeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchBankDetailsusingRoutingCode(requestParameters: ReferenceDataApiFetchBankDetailsusingRoutingCodeRequest, options?: RawAxiosRequestConfig): AxiosPromise<Resource> {
            return localVarFp.fetchBankDetailsusingRoutingCode(requestParameters.clientHashId, requestParameters.countryCode, requestParameters.customerHashId, requestParameters.routingCodeType, requestParameters.routingCodeValue, requestParameters.xRequestId, options).then((request) => request(axios, basePath));
        },
        /**
         * This API will allow you to fetch the supported corridors for remittance with details.
         * @summary Fetch Supported Corridors
         * @param {ReferenceDataApiFetchSupportedCorridorsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchSupportedCorridors(requestParameters: ReferenceDataApiFetchSupportedCorridorsRequest, options?: RawAxiosRequestConfig): AxiosPromise<Resource> {
            return localVarFp.fetchSupportedCorridors(requestParameters.clientHashId, requestParameters.customerHashId, requestParameters.xRequestId, options).then((request) => request(axios, basePath));
        },
        /**
         * This API will allow you to fetch the supported corridors for remittance with details.
         * @summary Fetch Supported Corridors V2
         * @param {ReferenceDataApiFetchSupportedCorridorsV2Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchSupportedCorridorsV2(requestParameters: ReferenceDataApiFetchSupportedCorridorsV2Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<SupportedCorridorsResponseDTO>> {
            return localVarFp.fetchSupportedCorridorsV2(requestParameters.clientHashId, requestParameters.beneficiaryAccountType, requestParameters.clientType, requestParameters.customerType, requestParameters.destinationCountry, requestParameters.destinationCurrency, requestParameters.payoutMethod, requestParameters.routingCodeType, requestParameters.xRequestId, options).then((request) => request(axios, basePath));
        },
        /**
         * This API will allow you to search the routing code details using bank name.
         * @summary Search Routing Code Using Bank Name
         * @param {ReferenceDataApiSearchRoutingCodeUsingBankNameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchRoutingCodeUsingBankName(requestParameters: ReferenceDataApiSearchRoutingCodeUsingBankNameRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<PartialSearchBankNameResponseDTO>> {
            return localVarFp.searchRoutingCodeUsingBankName(requestParameters.clientHashId, requestParameters.countryCode, requestParameters.routingCodeType, requestParameters.searchValue, requestParameters.bankCode, requestParameters.bankName, requestParameters.currencyCode, requestParameters.payoutMethod, requestParameters.xRequestId, options).then((request) => request(axios, basePath));
        },
        /**
         * This API will allow you to search the routing code details using branch name.
         * @summary Search Routing Code Using Branch Name
         * @param {ReferenceDataApiSearchRoutingCodeUsingBranchNameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchRoutingCodeUsingBranchName(requestParameters: ReferenceDataApiSearchRoutingCodeUsingBranchNameRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<PartialSearchBranchNameResponseDTO>> {
            return localVarFp.searchRoutingCodeUsingBranchName(requestParameters.clientHashId, requestParameters.countryCode, requestParameters.routingCodeType, requestParameters.searchValue, requestParameters.bankCode, requestParameters.bankName, requestParameters.currencyCode, requestParameters.payoutMethod, requestParameters.xRequestId, options).then((request) => request(axios, basePath));
        },
        /**
         * This API will allow you to search the routing code details of a bank based on certain parameters - i.e., by using bank name or branch name. This API will help you to build a user experience where you can help your users to locate a specific routing code (that could be SWIFT, IFSC, SORT CODE, ACH CODE, etc., - see the list below) by using full or partial name search of bank name or branch name. For example, if your user is looking for SWIFT CODE for HSBC in the UK, then this API can be used to search for the SORT CODE by searching using the bank name.
         * @summary Search Routing Code (using bank name/branch name)
         * @param {ReferenceDataApiSearchRoutingCodeusingbanknamebranchnameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchRoutingCodeusingbanknamebranchname(requestParameters: ReferenceDataApiSearchRoutingCodeusingbanknamebranchnameRequest, options?: RawAxiosRequestConfig): AxiosPromise<Resource> {
            return localVarFp.searchRoutingCodeusingbanknamebranchname(requestParameters.clientHashId, requestParameters.customerHashId, requestParameters.partialSearchDTO, requestParameters.xRequestId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for fetchBankDetailsusingRoutingCode operation in ReferenceDataApi.
 * @export
 * @interface ReferenceDataApiFetchBankDetailsusingRoutingCodeRequest
 */
export interface ReferenceDataApiFetchBankDetailsusingRoutingCodeRequest {
    /**
     * Unique client identifier generated and shared before API handshake.
     * @type {string}
     * @memberof ReferenceDataApiFetchBankDetailsusingRoutingCode
     */
    readonly clientHashId: string

    /**
     * This field accepts the [2-letter ISO-2 country code](doc:currency-and-country-codes) of a beneficiary.
     * @type {string}
     * @memberof ReferenceDataApiFetchBankDetailsusingRoutingCode
     */
    readonly countryCode: string

    /**
     * This field accepts the unique customer identifier generated on customer creation.
     * @type {string}
     * @memberof ReferenceDataApiFetchBankDetailsusingRoutingCode
     */
    readonly customerHashId: string

    /**
     * This field accepts the routing code type 1. The possible values are: SWIFT for all cases where SWIFT is applicable IFSC (relevant for India) ACH CODE (relevant for USA) BSB CODE (relevant for Australia) SORT CODE (relevant for the UK) LOCATION ID (relevant for Nepal) BANK CODE (relevant for few countries including Canada, Hong Kong, Sri Lanka, South Korea, Pakistan, Brazil, and some more) TRANSIT NUMBER (relevant for Canada) BRANCH CODE (relevant for Sri Lanka, Vietnam, Brazil, Uruguay, Kenya and some more) Given that the routing_code_type_1 is a PATH parameter, apply URL encoding. For example, when you want to pass ACH CODE, after URL encoding you will pass it as ACH%20CODE
     * @type {string}
     * @memberof ReferenceDataApiFetchBankDetailsusingRoutingCode
     */
    readonly routingCodeType: string

    /**
     * This field accepts the routing code value 1. Refer to the [Examples of Routing Codes](/apis/docs/routing-codes#examples-of-routing-codes).
     * @type {string}
     * @memberof ReferenceDataApiFetchBankDetailsusingRoutingCode
     */
    readonly routingCodeValue: string

    /**
     * Enter a unique UUID value
     * @type {string}
     * @memberof ReferenceDataApiFetchBankDetailsusingRoutingCode
     */
    readonly xRequestId?: string
}

/**
 * Request parameters for fetchSupportedCorridors operation in ReferenceDataApi.
 * @export
 * @interface ReferenceDataApiFetchSupportedCorridorsRequest
 */
export interface ReferenceDataApiFetchSupportedCorridorsRequest {
    /**
     * Unique client identifier generated and shared before API handshake.
     * @type {string}
     * @memberof ReferenceDataApiFetchSupportedCorridors
     */
    readonly clientHashId: string

    /**
     * Unique customer identifier generated on customer creation.
     * @type {string}
     * @memberof ReferenceDataApiFetchSupportedCorridors
     */
    readonly customerHashId: string

    /**
     * Enter a unique UUID value
     * @type {string}
     * @memberof ReferenceDataApiFetchSupportedCorridors
     */
    readonly xRequestId?: string
}

/**
 * Request parameters for fetchSupportedCorridorsV2 operation in ReferenceDataApi.
 * @export
 * @interface ReferenceDataApiFetchSupportedCorridorsV2Request
 */
export interface ReferenceDataApiFetchSupportedCorridorsV2Request {
    /**
     * Unique client identifier generated and shared before API handshake.
     * @type {string}
     * @memberof ReferenceDataApiFetchSupportedCorridorsV2
     */
    readonly clientHashId: string

    /**
     * This field accepts the beneficiary account type.
     * @type {string}
     * @memberof ReferenceDataApiFetchSupportedCorridorsV2
     */
    readonly beneficiaryAccountType?: string

    /**
     * This field accepts type of Client e.g. FI, NonFI, default NonFI.
     * @type {string}
     * @memberof ReferenceDataApiFetchSupportedCorridorsV2
     */
    readonly clientType?: string

    /**
     * This field accepts the type of customer.
     * @type {string}
     * @memberof ReferenceDataApiFetchSupportedCorridorsV2
     */
    readonly customerType?: string

    /**
     * This field accepts the [2-letter ISO-2 destination country code](https://docs.nium.com/apis/docs/currency-and-country-codes).
     * @type {string}
     * @memberof ReferenceDataApiFetchSupportedCorridorsV2
     */
    readonly destinationCountry?: string

    /**
     * This field accepts the [3-letter ISO-4217 currency code](https://docs.nium.com/apis/docs/currency-and-country-codes) which will be used to filter the user selected currency and get the payout method.
     * @type {string}
     * @memberof ReferenceDataApiFetchSupportedCorridorsV2
     */
    readonly destinationCurrency?: string

    /**
     * This field accepts the different modes of payout.
     * @type {string}
     * @memberof ReferenceDataApiFetchSupportedCorridorsV2
     */
    readonly payoutMethod?: string

    /**
     * This field determines the routing code type for the currency.
     * @type {string}
     * @memberof ReferenceDataApiFetchSupportedCorridorsV2
     */
    readonly routingCodeType?: string

    /**
     * Enter a unique UUID value
     * @type {string}
     * @memberof ReferenceDataApiFetchSupportedCorridorsV2
     */
    readonly xRequestId?: string
}

/**
 * Request parameters for searchRoutingCodeUsingBankName operation in ReferenceDataApi.
 * @export
 * @interface ReferenceDataApiSearchRoutingCodeUsingBankNameRequest
 */
export interface ReferenceDataApiSearchRoutingCodeUsingBankNameRequest {
    /**
     * Unique client identifier generated and shared before API handshake.
     * @type {string}
     * @memberof ReferenceDataApiSearchRoutingCodeUsingBankName
     */
    readonly clientHashId: string

    /**
     * This field accepts the [2-letter ISO-2 country code](doc:currency-and-country-codes) for which routing code search is initiated.
     * @type {string}
     * @memberof ReferenceDataApiSearchRoutingCodeUsingBankName
     */
    readonly countryCode: string

    /**
     * This field determines the routing code type for the search.
     * @type {'IFSC' | 'SWIFT' | 'ACH CODE' | 'BSB CODE' | 'SORT CODE' | 'BANK CODE' | 'LOCATION ID' | 'BRANCH CODE' | 'BRANCH NAME' | 'TRANSIT NUMBER'}
     * @memberof ReferenceDataApiSearchRoutingCodeUsingBankName
     */
    readonly routingCodeType: SearchRoutingCodeUsingBankNameRoutingCodeTypeEnum

    /**
     * This field accepts the partial or full value of the Bank Name on which the search is initiated, for example, it could be DBS.
     * @type {string}
     * @memberof ReferenceDataApiSearchRoutingCodeUsingBankName
     */
    readonly searchValue: string

    /**
     * This field can accept the bank code of specified branch and country.
     * @type {string}
     * @memberof ReferenceDataApiSearchRoutingCodeUsingBankName
     */
    readonly bankCode?: string

    /**
     * This field can accept the bank name associated with country.
     * @type {string}
     * @memberof ReferenceDataApiSearchRoutingCodeUsingBankName
     */
    readonly bankName?: string

    /**
     * This field accepts the [3-letter ISO-4217 currency code](doc:currency-and-country-codes) for which routing code search is to be initiated.
     * @type {string}
     * @memberof ReferenceDataApiSearchRoutingCodeUsingBankName
     */
    readonly currencyCode?: string

    /**
     * This field can accept the different modes of payout. This field can accept one of the following values: LOCAL SWIFT WALLET CARD PROXY(upcoming feature) Default value of the parameter is LOCAL.
     * @type {string}
     * @memberof ReferenceDataApiSearchRoutingCodeUsingBankName
     */
    readonly payoutMethod?: string

    /**
     * Enter a unique UUID value
     * @type {string}
     * @memberof ReferenceDataApiSearchRoutingCodeUsingBankName
     */
    readonly xRequestId?: string
}

/**
 * Request parameters for searchRoutingCodeUsingBranchName operation in ReferenceDataApi.
 * @export
 * @interface ReferenceDataApiSearchRoutingCodeUsingBranchNameRequest
 */
export interface ReferenceDataApiSearchRoutingCodeUsingBranchNameRequest {
    /**
     * Unique client identifier generated and shared before API handshake.
     * @type {string}
     * @memberof ReferenceDataApiSearchRoutingCodeUsingBranchName
     */
    readonly clientHashId: string

    /**
     * This field accepts the [2-letter ISO-2 country code](doc:currency-and-country-codes) for which routing code search is initiated.
     * @type {string}
     * @memberof ReferenceDataApiSearchRoutingCodeUsingBranchName
     */
    readonly countryCode: string

    /**
     * This field determines the routing code type for the search.
     * @type {'IFSC' | 'SWIFT' | 'ACH CODE' | 'BSB CODE' | 'SORT CODE' | 'BANK CODE' | 'LOCATION ID' | 'BRANCH CODE' | 'BRANCH NAME' | 'TRANSIT NUMBER'}
     * @memberof ReferenceDataApiSearchRoutingCodeUsingBranchName
     */
    readonly routingCodeType: SearchRoutingCodeUsingBranchNameRoutingCodeTypeEnum

    /**
     * This field accepts the partial or full value of the Bank Name on which the search is initiated, for example, it could be DBS.
     * @type {string}
     * @memberof ReferenceDataApiSearchRoutingCodeUsingBranchName
     */
    readonly searchValue: string

    /**
     * This field can accept the bank code of specified branch and country.
     * @type {string}
     * @memberof ReferenceDataApiSearchRoutingCodeUsingBranchName
     */
    readonly bankCode?: string

    /**
     * This field can accept the bank name associated with country.
     * @type {string}
     * @memberof ReferenceDataApiSearchRoutingCodeUsingBranchName
     */
    readonly bankName?: string

    /**
     * This field accepts the [3-letter ISO-4217 currency code](doc:currency-and-country-codes) for which routing code search is to be initiated.
     * @type {string}
     * @memberof ReferenceDataApiSearchRoutingCodeUsingBranchName
     */
    readonly currencyCode?: string

    /**
     * This field can accept the different modes of payout. This field can accept one of the following values: LOCAL SWIFT WALLET CARD PROXY(upcoming feature) Default value of the parameter is LOCAL.
     * @type {string}
     * @memberof ReferenceDataApiSearchRoutingCodeUsingBranchName
     */
    readonly payoutMethod?: string

    /**
     * Enter a unique UUID value
     * @type {string}
     * @memberof ReferenceDataApiSearchRoutingCodeUsingBranchName
     */
    readonly xRequestId?: string
}

/**
 * Request parameters for searchRoutingCodeusingbanknamebranchname operation in ReferenceDataApi.
 * @export
 * @interface ReferenceDataApiSearchRoutingCodeusingbanknamebranchnameRequest
 */
export interface ReferenceDataApiSearchRoutingCodeusingbanknamebranchnameRequest {
    /**
     * Unique client identifier generated and shared before API handshake.
     * @type {string}
     * @memberof ReferenceDataApiSearchRoutingCodeusingbanknamebranchname
     */
    readonly clientHashId: string

    /**
     * Unique customer identifier generated on customer creation.
     * @type {string}
     * @memberof ReferenceDataApiSearchRoutingCodeusingbanknamebranchname
     */
    readonly customerHashId: string

    /**
     * partialSearchDTO
     * @type {PartialSearchDTO}
     * @memberof ReferenceDataApiSearchRoutingCodeusingbanknamebranchname
     */
    readonly partialSearchDTO: PartialSearchDTO

    /**
     * Enter a unique UUID value
     * @type {string}
     * @memberof ReferenceDataApiSearchRoutingCodeusingbanknamebranchname
     */
    readonly xRequestId?: string
}

/**
 * ReferenceDataApi - object-oriented interface
 * @export
 * @class ReferenceDataApi
 * @extends {BaseAPI}
 */
export class ReferenceDataApi extends BaseAPI {
    /**
     * This API allows you to fetch the bank details against the routing information.
     * @summary Fetch Bank Details using Routing Code
     * @param {ReferenceDataApiFetchBankDetailsusingRoutingCodeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReferenceDataApi
     */
    public fetchBankDetailsusingRoutingCode(requestParameters: ReferenceDataApiFetchBankDetailsusingRoutingCodeRequest, options?: RawAxiosRequestConfig) {
        return ReferenceDataApiFp(this.configuration).fetchBankDetailsusingRoutingCode(requestParameters.clientHashId, requestParameters.countryCode, requestParameters.customerHashId, requestParameters.routingCodeType, requestParameters.routingCodeValue, requestParameters.xRequestId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This API will allow you to fetch the supported corridors for remittance with details.
     * @summary Fetch Supported Corridors
     * @param {ReferenceDataApiFetchSupportedCorridorsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReferenceDataApi
     */
    public fetchSupportedCorridors(requestParameters: ReferenceDataApiFetchSupportedCorridorsRequest, options?: RawAxiosRequestConfig) {
        return ReferenceDataApiFp(this.configuration).fetchSupportedCorridors(requestParameters.clientHashId, requestParameters.customerHashId, requestParameters.xRequestId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This API will allow you to fetch the supported corridors for remittance with details.
     * @summary Fetch Supported Corridors V2
     * @param {ReferenceDataApiFetchSupportedCorridorsV2Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReferenceDataApi
     */
    public fetchSupportedCorridorsV2(requestParameters: ReferenceDataApiFetchSupportedCorridorsV2Request, options?: RawAxiosRequestConfig) {
        return ReferenceDataApiFp(this.configuration).fetchSupportedCorridorsV2(requestParameters.clientHashId, requestParameters.beneficiaryAccountType, requestParameters.clientType, requestParameters.customerType, requestParameters.destinationCountry, requestParameters.destinationCurrency, requestParameters.payoutMethod, requestParameters.routingCodeType, requestParameters.xRequestId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This API will allow you to search the routing code details using bank name.
     * @summary Search Routing Code Using Bank Name
     * @param {ReferenceDataApiSearchRoutingCodeUsingBankNameRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReferenceDataApi
     */
    public searchRoutingCodeUsingBankName(requestParameters: ReferenceDataApiSearchRoutingCodeUsingBankNameRequest, options?: RawAxiosRequestConfig) {
        return ReferenceDataApiFp(this.configuration).searchRoutingCodeUsingBankName(requestParameters.clientHashId, requestParameters.countryCode, requestParameters.routingCodeType, requestParameters.searchValue, requestParameters.bankCode, requestParameters.bankName, requestParameters.currencyCode, requestParameters.payoutMethod, requestParameters.xRequestId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This API will allow you to search the routing code details using branch name.
     * @summary Search Routing Code Using Branch Name
     * @param {ReferenceDataApiSearchRoutingCodeUsingBranchNameRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReferenceDataApi
     */
    public searchRoutingCodeUsingBranchName(requestParameters: ReferenceDataApiSearchRoutingCodeUsingBranchNameRequest, options?: RawAxiosRequestConfig) {
        return ReferenceDataApiFp(this.configuration).searchRoutingCodeUsingBranchName(requestParameters.clientHashId, requestParameters.countryCode, requestParameters.routingCodeType, requestParameters.searchValue, requestParameters.bankCode, requestParameters.bankName, requestParameters.currencyCode, requestParameters.payoutMethod, requestParameters.xRequestId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This API will allow you to search the routing code details of a bank based on certain parameters - i.e., by using bank name or branch name. This API will help you to build a user experience where you can help your users to locate a specific routing code (that could be SWIFT, IFSC, SORT CODE, ACH CODE, etc., - see the list below) by using full or partial name search of bank name or branch name. For example, if your user is looking for SWIFT CODE for HSBC in the UK, then this API can be used to search for the SORT CODE by searching using the bank name.
     * @summary Search Routing Code (using bank name/branch name)
     * @param {ReferenceDataApiSearchRoutingCodeusingbanknamebranchnameRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReferenceDataApi
     */
    public searchRoutingCodeusingbanknamebranchname(requestParameters: ReferenceDataApiSearchRoutingCodeusingbanknamebranchnameRequest, options?: RawAxiosRequestConfig) {
        return ReferenceDataApiFp(this.configuration).searchRoutingCodeusingbanknamebranchname(requestParameters.clientHashId, requestParameters.customerHashId, requestParameters.partialSearchDTO, requestParameters.xRequestId, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const SearchRoutingCodeUsingBankNameRoutingCodeTypeEnum = {
    Ifsc: 'IFSC',
    Swift: 'SWIFT',
    AchCode: 'ACH CODE',
    BsbCode: 'BSB CODE',
    SortCode: 'SORT CODE',
    BankCode: 'BANK CODE',
    LocationId: 'LOCATION ID',
    BranchCode: 'BRANCH CODE',
    BranchName: 'BRANCH NAME',
    TransitNumber: 'TRANSIT NUMBER'
} as const;
export type SearchRoutingCodeUsingBankNameRoutingCodeTypeEnum = typeof SearchRoutingCodeUsingBankNameRoutingCodeTypeEnum[keyof typeof SearchRoutingCodeUsingBankNameRoutingCodeTypeEnum];
/**
 * @export
 */
export const SearchRoutingCodeUsingBranchNameRoutingCodeTypeEnum = {
    Ifsc: 'IFSC',
    Swift: 'SWIFT',
    AchCode: 'ACH CODE',
    BsbCode: 'BSB CODE',
    SortCode: 'SORT CODE',
    BankCode: 'BANK CODE',
    LocationId: 'LOCATION ID',
    BranchCode: 'BRANCH CODE',
    BranchName: 'BRANCH NAME',
    TransitNumber: 'TRANSIT NUMBER'
} as const;
export type SearchRoutingCodeUsingBranchNameRoutingCodeTypeEnum = typeof SearchRoutingCodeUsingBranchNameRoutingCodeTypeEnum[keyof typeof SearchRoutingCodeUsingBranchNameRoutingCodeTypeEnum];
