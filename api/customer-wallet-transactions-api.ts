/* tslint:disable */
/* eslint-disable */
/**
 * NIUM Platform
 * NIUM Platform
 *
 * The version of the OpenAPI document: 2024.8.20
 * Contact: experience@nium.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { TransactionClientTagsRequestDTO } from '../model';
// @ts-ignore
import type { TransactionClientTagsResponseDTO } from '../model';
// @ts-ignore
import type { TransactionsBusinessDTO } from '../model';
// @ts-ignore
import type { TransactionsLocationDTO } from '../model';
// @ts-ignore
import type { TransactionsReceiptDTO } from '../model';
// @ts-ignore
import type { WalletTransactionsResponseDTO } from '../model';
// @ts-ignore
import type { WalletWalletApiError } from '../model';
/**
 * CustomerWalletTransactionsApi - axios parameter creator
 * @export
 */
export const CustomerWalletTransactionsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This endppint enables you to download a receipt for any transaction.
         * @summary Download Transaction Receipt
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} customerHashId Unique customer identifier generated on customer creation.
         * @param {string} transactionId Unique 36 character transaction identifier generated for each transaction.
         * @param {string} walletHashId Unique wallet identifier generated simultaneously with customer creation.
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadTransactionReceipt: async (clientHashId: string, customerHashId: string, transactionId: string, walletHashId: string, xRequestId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'clientHashId' is not null or undefined
            assertParamExists('downloadTransactionReceipt', 'clientHashId', clientHashId)
            // verify required parameter 'customerHashId' is not null or undefined
            assertParamExists('downloadTransactionReceipt', 'customerHashId', customerHashId)
            // verify required parameter 'transactionId' is not null or undefined
            assertParamExists('downloadTransactionReceipt', 'transactionId', transactionId)
            // verify required parameter 'walletHashId' is not null or undefined
            assertParamExists('downloadTransactionReceipt', 'walletHashId', walletHashId)
            const localVarPath = `/api/v1/client/{clientHashId}/customer/{customerHashId}/wallet/{walletHashId}/transactions/{transactionId}/receipt`
                .replace(`{${"clientHashId"}}`, encodeURIComponent(String(clientHashId)))
                .replace(`{${"customerHashId"}}`, encodeURIComponent(String(customerHashId)))
                .replace(`{${"transactionId"}}`, encodeURIComponent(String(transactionId)))
                .replace(`{${"walletHashId"}}`, encodeURIComponent(String(walletHashId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication default required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (xRequestId != null) {
                localVarHeaderParameter['x-request-id'] = String(xRequestId);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This API enables you to add, update, and delete transaction tags.
         * @summary Manage Transaction Tags
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} customerHashId Unique customer identifier generated on customer creation.
         * @param {string} transactionId Unique 36 character transaction identifier generated for each transaction.
         * @param {string} walletHashId Unique wallet identifier generated simultaneously with customer creation.
         * @param {TransactionClientTagsRequestDTO} transactionClientTagsRequestDTO tags
         * @param {string} [xRequestId] Enter a unique UUID value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        manageTransactionTags: async (clientHashId: string, customerHashId: string, transactionId: string, walletHashId: string, transactionClientTagsRequestDTO: TransactionClientTagsRequestDTO, xRequestId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'clientHashId' is not null or undefined
            assertParamExists('manageTransactionTags', 'clientHashId', clientHashId)
            // verify required parameter 'customerHashId' is not null or undefined
            assertParamExists('manageTransactionTags', 'customerHashId', customerHashId)
            // verify required parameter 'transactionId' is not null or undefined
            assertParamExists('manageTransactionTags', 'transactionId', transactionId)
            // verify required parameter 'walletHashId' is not null or undefined
            assertParamExists('manageTransactionTags', 'walletHashId', walletHashId)
            // verify required parameter 'transactionClientTagsRequestDTO' is not null or undefined
            assertParamExists('manageTransactionTags', 'transactionClientTagsRequestDTO', transactionClientTagsRequestDTO)
            const localVarPath = `/api/v1/client/{clientHashId}/customer/{customerHashId}/wallet/{walletHashId}/transactions/{transactionId}/tags`
                .replace(`{${"clientHashId"}}`, encodeURIComponent(String(clientHashId)))
                .replace(`{${"customerHashId"}}`, encodeURIComponent(String(customerHashId)))
                .replace(`{${"transactionId"}}`, encodeURIComponent(String(transactionId)))
                .replace(`{${"walletHashId"}}`, encodeURIComponent(String(walletHashId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication default required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (xRequestId != null) {
                localVarHeaderParameter['x-request-id'] = String(xRequestId);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(transactionClientTagsRequestDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint enables you to update transactions with the merchant\'s location.
         * @summary Transaction Geo-Tagging
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} customerHashId Unique customer identifier generated on customer creation.
         * @param {string} transactionId Unique 36 character transaction identifier generated for each transaction.
         * @param {string} walletHashId Unique wallet identifier generated simultaneously with customer creation.
         * @param {TransactionsLocationDTO} transactionsLocationDTO transactionsLocationDTO
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionGeoTagging: async (clientHashId: string, customerHashId: string, transactionId: string, walletHashId: string, transactionsLocationDTO: TransactionsLocationDTO, xRequestId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'clientHashId' is not null or undefined
            assertParamExists('transactionGeoTagging', 'clientHashId', clientHashId)
            // verify required parameter 'customerHashId' is not null or undefined
            assertParamExists('transactionGeoTagging', 'customerHashId', customerHashId)
            // verify required parameter 'transactionId' is not null or undefined
            assertParamExists('transactionGeoTagging', 'transactionId', transactionId)
            // verify required parameter 'walletHashId' is not null or undefined
            assertParamExists('transactionGeoTagging', 'walletHashId', walletHashId)
            // verify required parameter 'transactionsLocationDTO' is not null or undefined
            assertParamExists('transactionGeoTagging', 'transactionsLocationDTO', transactionsLocationDTO)
            const localVarPath = `/api/v1/client/{clientHashId}/customer/{customerHashId}/wallet/{walletHashId}/transactions/{transactionId}/location`
                .replace(`{${"clientHashId"}}`, encodeURIComponent(String(clientHashId)))
                .replace(`{${"customerHashId"}}`, encodeURIComponent(String(customerHashId)))
                .replace(`{${"transactionId"}}`, encodeURIComponent(String(transactionId)))
                .replace(`{${"walletHashId"}}`, encodeURIComponent(String(walletHashId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication default required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (xRequestId != null) {
                localVarHeaderParameter['x-request-id'] = String(xRequestId);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(transactionsLocationDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this endpoint to fetch transaction details for a customer.
         * @summary Transactions
         * @param {string} clientHashId Filter transactions based on the client\&#39;s unique &#x60;clientHashId&#x60; that was used in the transaction.
         * @param {string} customerHashId Filter transactions based on the customer\&#39;s unique &#x60;customerHashId&#x60; that was used in the transaction.
         * @param {string} walletHashId Filter transactions based on the unique wallet identifier generated during customer creation.
         * @param {string} [authCode] Filter transactions based on the authorization code. In case of fund wallet transactions you can provide the &#x60;systemReferenceNumber&#x60; as the value.
         * @param {string} [authCurrency] Filter transactions based on the authentication currency. Accepts any 3-letter [ISO-4217 transaction currency code](https://docs.nium.com/apis/docs/currency-and-country-codes).
         * @param {string} [businessTransaction] Filter for transactions where &#x60;businessTransaction&#x60; is **TRUE** or **FALSE**.
         * @param {string} [cardHashId] Filter transactions based on the unique card identifier generated during new/add-on card issuance.
         * @param {string} [childCustomerHashId] Filter transactions based on the &#x60;childCustomerHashId&#x60; used in the transactions.
         * @param {TransactionsComplianceStatusEnum} [complianceStatus] Filter transactions based on the &#x60;complianceStatus&#x60;.
         * @param {string} [endDate] End date for fetching the transaction details. The format for endDate is YYYY-MM-DD.
         * @param {string} [mcc] Filter transactions based on the 4-digit Merchant Category Code used during the transaction.
         * @param {string} [merchantCategories] Filter transactions based on the description of the merchant\&#39;s type of business product or service, also known as the Merchant Category Code (MCC) such as Airlines, Restaurants etc.
         * @param {string} [merchantCity] Filter transactions based on the merchant\&#39;s city.
         * @param {string} [merchantCountries] Filter transactions based on a comma-separated list of 2-letter ISO merchant countries.
         * @param {string} [merchantCountry] Filter transactions based on the merchant\&#39;s country field.
         * @param {string} [merchantName] Filter transactions based on the merchant\&#39;s name field.
         * @param {TransactionsOrderEnum} [order] Sort the order of the returned results.
         * @param {number} [page] In some cases, the response can return multiple pages of data. Use this parameter to page through the returned results. The default page is 0.
         * @param {string} [paymentInstrumentHashId] Filter transactions based on a list of comma-separated &#x60;paymentInstrumentHashIds&#x60;.
         * @param {string} [property] Details the response parameter used to sort the transaction list. Sorted by \&#39;createdAt\&#39; by default.
         * @param {string} [settlementDate] Filter transactions based on the settlement date of the transaction in the format yyyyMMdd.
         * @param {string} [settlementStatus] Filter transactions based on settlement the status. A list of possible values is available in the response.
         * @param {number} [size] Define how many elements get retunred per response page. Accepted values can be 1-20.
         * @param {string} [startDate] The beginning date to start fetching transaction details. The format for &#x60;startDate&#x60; is YYYY-MM-DD.
         * @param {TransactionsStatusEnum} [status] Filter transactions based on the &#x60;status&#x60;. A list of possible values is available in the response.
         * @param {string} [systemReferenceNumber] Filter transactions based on the &#x60;systemReferenceNumber&#x60;.
         * @param {string} [systemTraceAuditNumber] Flter transactions based on &#x60;systemTraceAuditNumber&#x60;.
         * @param {string} [tagKey] Filter transactions based on the exact value of tagKey defined against transactions. This can be used as an independent search parameter.
         * @param {string} [tagValue] Filter the responses based on the exact value of &#x60;tagKey&#x60;. The &#x60;tagkey&#x60; can be used also be used as an independent search parameter.
         * @param {string} [transactionCurrency] Filter trasnactions based on the 3-letter [ISO-4217 transaction currency code](https://www.iso.org/iso-4217-currency-codes.html).
         * @param {string} [transactionType] Filter transactions based the status. A detailed list of the transactions types available can be found at [Transaction Types](https://docs.nium.com/apis/docs/transaction-types).
         * @param {string} [transactionsLabelsKey] Flter transactions based on the &#x60;transactionsLabelsKey&#x60;.
         * @param {string} [transactionsLabelsValue] Filter transactions based on &#x60;transactionsLabelsValue&#x60;.
         * @param {string} [xRequestId] Filter transactions based on the unique UUID value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactions: async (clientHashId: string, customerHashId: string, walletHashId: string, authCode?: string, authCurrency?: string, businessTransaction?: string, cardHashId?: string, childCustomerHashId?: string, complianceStatus?: TransactionsComplianceStatusEnum, endDate?: string, mcc?: string, merchantCategories?: string, merchantCity?: string, merchantCountries?: string, merchantCountry?: string, merchantName?: string, order?: TransactionsOrderEnum, page?: number, paymentInstrumentHashId?: string, property?: string, settlementDate?: string, settlementStatus?: string, size?: number, startDate?: string, status?: TransactionsStatusEnum, systemReferenceNumber?: string, systemTraceAuditNumber?: string, tagKey?: string, tagValue?: string, transactionCurrency?: string, transactionType?: string, transactionsLabelsKey?: string, transactionsLabelsValue?: string, xRequestId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'clientHashId' is not null or undefined
            assertParamExists('transactions', 'clientHashId', clientHashId)
            // verify required parameter 'customerHashId' is not null or undefined
            assertParamExists('transactions', 'customerHashId', customerHashId)
            // verify required parameter 'walletHashId' is not null or undefined
            assertParamExists('transactions', 'walletHashId', walletHashId)
            const localVarPath = `/api/v1/client/{clientHashId}/customer/{customerHashId}/wallet/{walletHashId}/transactions`
                .replace(`{${"clientHashId"}}`, encodeURIComponent(String(clientHashId)))
                .replace(`{${"customerHashId"}}`, encodeURIComponent(String(customerHashId)))
                .replace(`{${"walletHashId"}}`, encodeURIComponent(String(walletHashId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication default required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (authCode !== undefined) {
                localVarQueryParameter['authCode'] = authCode;
            }

            if (authCurrency !== undefined) {
                localVarQueryParameter['authCurrency'] = authCurrency;
            }

            if (businessTransaction !== undefined) {
                localVarQueryParameter['businessTransaction'] = businessTransaction;
            }

            if (cardHashId !== undefined) {
                localVarQueryParameter['cardHashId'] = cardHashId;
            }

            if (childCustomerHashId !== undefined) {
                localVarQueryParameter['childCustomerHashId'] = childCustomerHashId;
            }

            if (complianceStatus !== undefined) {
                localVarQueryParameter['complianceStatus'] = complianceStatus;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = endDate;
            }

            if (mcc !== undefined) {
                localVarQueryParameter['mcc'] = mcc;
            }

            if (merchantCategories !== undefined) {
                localVarQueryParameter['merchantCategories'] = merchantCategories;
            }

            if (merchantCity !== undefined) {
                localVarQueryParameter['merchantCity'] = merchantCity;
            }

            if (merchantCountries !== undefined) {
                localVarQueryParameter['merchantCountries'] = merchantCountries;
            }

            if (merchantCountry !== undefined) {
                localVarQueryParameter['merchantCountry'] = merchantCountry;
            }

            if (merchantName !== undefined) {
                localVarQueryParameter['merchantName'] = merchantName;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (paymentInstrumentHashId !== undefined) {
                localVarQueryParameter['paymentInstrumentHashId'] = paymentInstrumentHashId;
            }

            if (property !== undefined) {
                localVarQueryParameter['property'] = property;
            }

            if (settlementDate !== undefined) {
                localVarQueryParameter['settlementDate'] = settlementDate;
            }

            if (settlementStatus !== undefined) {
                localVarQueryParameter['settlementStatus'] = settlementStatus;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = startDate;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (systemReferenceNumber !== undefined) {
                localVarQueryParameter['systemReferenceNumber'] = systemReferenceNumber;
            }

            if (systemTraceAuditNumber !== undefined) {
                localVarQueryParameter['systemTraceAuditNumber'] = systemTraceAuditNumber;
            }

            if (tagKey !== undefined) {
                localVarQueryParameter['tagKey'] = tagKey;
            }

            if (tagValue !== undefined) {
                localVarQueryParameter['tagValue'] = tagValue;
            }

            if (transactionCurrency !== undefined) {
                localVarQueryParameter['transactionCurrency'] = transactionCurrency;
            }

            if (transactionType !== undefined) {
                localVarQueryParameter['transactionType'] = transactionType;
            }

            if (transactionsLabelsKey !== undefined) {
                localVarQueryParameter['transactionsLabelsKey'] = transactionsLabelsKey;
            }

            if (transactionsLabelsValue !== undefined) {
                localVarQueryParameter['transactionsLabelsValue'] = transactionsLabelsValue;
            }

            if (xRequestId != null) {
                localVarHeaderParameter['x-request-id'] = String(xRequestId);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint enables you to flag transactions as business transactions.
         * @summary Update Business Transaction Flag
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} customerHashId Unique customer identifier generated on customer creation.
         * @param {string} transactionId Unique 36 character transaction identifier generated for each transaction.
         * @param {string} walletHashId Unique wallet identifier generated simultaneously with customer creation.
         * @param {TransactionsBusinessDTO} transactionsBusinessDTO transactionsBusinessDTO
         * @param {string} [xRequestId] Enter a unique UUID value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBusinessTransactionFlag: async (clientHashId: string, customerHashId: string, transactionId: string, walletHashId: string, transactionsBusinessDTO: TransactionsBusinessDTO, xRequestId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'clientHashId' is not null or undefined
            assertParamExists('updateBusinessTransactionFlag', 'clientHashId', clientHashId)
            // verify required parameter 'customerHashId' is not null or undefined
            assertParamExists('updateBusinessTransactionFlag', 'customerHashId', customerHashId)
            // verify required parameter 'transactionId' is not null or undefined
            assertParamExists('updateBusinessTransactionFlag', 'transactionId', transactionId)
            // verify required parameter 'walletHashId' is not null or undefined
            assertParamExists('updateBusinessTransactionFlag', 'walletHashId', walletHashId)
            // verify required parameter 'transactionsBusinessDTO' is not null or undefined
            assertParamExists('updateBusinessTransactionFlag', 'transactionsBusinessDTO', transactionsBusinessDTO)
            const localVarPath = `/api/v1/client/{clientHashId}/customer/{customerHashId}/wallet/{walletHashId}/transactions/{transactionId}/business`
                .replace(`{${"clientHashId"}}`, encodeURIComponent(String(clientHashId)))
                .replace(`{${"customerHashId"}}`, encodeURIComponent(String(customerHashId)))
                .replace(`{${"transactionId"}}`, encodeURIComponent(String(transactionId)))
                .replace(`{${"walletHashId"}}`, encodeURIComponent(String(walletHashId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication default required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (xRequestId != null) {
                localVarHeaderParameter['x-request-id'] = String(xRequestId);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(transactionsBusinessDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint enables you to upload a receipt for any transaction.
         * @summary Upload Transaction Receipt
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} customerHashId Unique customer identifier generated on customer creation.
         * @param {string} transactionId Unique 36 character transaction identifier generated for each transaction.
         * @param {string} walletHashId Unique wallet identifier generated simultaneously with customer creation.
         * @param {TransactionsReceiptDTO} transactionsReceiptDTO transactionReceipt
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadTransactionReceipt: async (clientHashId: string, customerHashId: string, transactionId: string, walletHashId: string, transactionsReceiptDTO: TransactionsReceiptDTO, xRequestId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'clientHashId' is not null or undefined
            assertParamExists('uploadTransactionReceipt', 'clientHashId', clientHashId)
            // verify required parameter 'customerHashId' is not null or undefined
            assertParamExists('uploadTransactionReceipt', 'customerHashId', customerHashId)
            // verify required parameter 'transactionId' is not null or undefined
            assertParamExists('uploadTransactionReceipt', 'transactionId', transactionId)
            // verify required parameter 'walletHashId' is not null or undefined
            assertParamExists('uploadTransactionReceipt', 'walletHashId', walletHashId)
            // verify required parameter 'transactionsReceiptDTO' is not null or undefined
            assertParamExists('uploadTransactionReceipt', 'transactionsReceiptDTO', transactionsReceiptDTO)
            const localVarPath = `/api/v1/client/{clientHashId}/customer/{customerHashId}/wallet/{walletHashId}/transactions/{transactionId}/receipt`
                .replace(`{${"clientHashId"}}`, encodeURIComponent(String(clientHashId)))
                .replace(`{${"customerHashId"}}`, encodeURIComponent(String(customerHashId)))
                .replace(`{${"transactionId"}}`, encodeURIComponent(String(transactionId)))
                .replace(`{${"walletHashId"}}`, encodeURIComponent(String(walletHashId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication default required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (xRequestId != null) {
                localVarHeaderParameter['x-request-id'] = String(xRequestId);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(transactionsReceiptDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CustomerWalletTransactionsApi - functional programming interface
 * @export
 */
export const CustomerWalletTransactionsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CustomerWalletTransactionsApiAxiosParamCreator(configuration)
    return {
        /**
         * This endppint enables you to download a receipt for any transaction.
         * @summary Download Transaction Receipt
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} customerHashId Unique customer identifier generated on customer creation.
         * @param {string} transactionId Unique 36 character transaction identifier generated for each transaction.
         * @param {string} walletHashId Unique wallet identifier generated simultaneously with customer creation.
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async downloadTransactionReceipt(clientHashId: string, customerHashId: string, transactionId: string, walletHashId: string, xRequestId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TransactionsReceiptDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.downloadTransactionReceipt(clientHashId, customerHashId, transactionId, walletHashId, xRequestId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CustomerWalletTransactionsApi.downloadTransactionReceipt']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * This API enables you to add, update, and delete transaction tags.
         * @summary Manage Transaction Tags
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} customerHashId Unique customer identifier generated on customer creation.
         * @param {string} transactionId Unique 36 character transaction identifier generated for each transaction.
         * @param {string} walletHashId Unique wallet identifier generated simultaneously with customer creation.
         * @param {TransactionClientTagsRequestDTO} transactionClientTagsRequestDTO tags
         * @param {string} [xRequestId] Enter a unique UUID value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async manageTransactionTags(clientHashId: string, customerHashId: string, transactionId: string, walletHashId: string, transactionClientTagsRequestDTO: TransactionClientTagsRequestDTO, xRequestId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TransactionClientTagsResponseDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.manageTransactionTags(clientHashId, customerHashId, transactionId, walletHashId, transactionClientTagsRequestDTO, xRequestId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CustomerWalletTransactionsApi.manageTransactionTags']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * This endpoint enables you to update transactions with the merchant\'s location.
         * @summary Transaction Geo-Tagging
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} customerHashId Unique customer identifier generated on customer creation.
         * @param {string} transactionId Unique 36 character transaction identifier generated for each transaction.
         * @param {string} walletHashId Unique wallet identifier generated simultaneously with customer creation.
         * @param {TransactionsLocationDTO} transactionsLocationDTO transactionsLocationDTO
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async transactionGeoTagging(clientHashId: string, customerHashId: string, transactionId: string, walletHashId: string, transactionsLocationDTO: TransactionsLocationDTO, xRequestId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WalletWalletApiError>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.transactionGeoTagging(clientHashId, customerHashId, transactionId, walletHashId, transactionsLocationDTO, xRequestId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CustomerWalletTransactionsApi.transactionGeoTagging']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Use this endpoint to fetch transaction details for a customer.
         * @summary Transactions
         * @param {string} clientHashId Filter transactions based on the client\&#39;s unique &#x60;clientHashId&#x60; that was used in the transaction.
         * @param {string} customerHashId Filter transactions based on the customer\&#39;s unique &#x60;customerHashId&#x60; that was used in the transaction.
         * @param {string} walletHashId Filter transactions based on the unique wallet identifier generated during customer creation.
         * @param {string} [authCode] Filter transactions based on the authorization code. In case of fund wallet transactions you can provide the &#x60;systemReferenceNumber&#x60; as the value.
         * @param {string} [authCurrency] Filter transactions based on the authentication currency. Accepts any 3-letter [ISO-4217 transaction currency code](https://docs.nium.com/apis/docs/currency-and-country-codes).
         * @param {string} [businessTransaction] Filter for transactions where &#x60;businessTransaction&#x60; is **TRUE** or **FALSE**.
         * @param {string} [cardHashId] Filter transactions based on the unique card identifier generated during new/add-on card issuance.
         * @param {string} [childCustomerHashId] Filter transactions based on the &#x60;childCustomerHashId&#x60; used in the transactions.
         * @param {TransactionsComplianceStatusEnum} [complianceStatus] Filter transactions based on the &#x60;complianceStatus&#x60;.
         * @param {string} [endDate] End date for fetching the transaction details. The format for endDate is YYYY-MM-DD.
         * @param {string} [mcc] Filter transactions based on the 4-digit Merchant Category Code used during the transaction.
         * @param {string} [merchantCategories] Filter transactions based on the description of the merchant\&#39;s type of business product or service, also known as the Merchant Category Code (MCC) such as Airlines, Restaurants etc.
         * @param {string} [merchantCity] Filter transactions based on the merchant\&#39;s city.
         * @param {string} [merchantCountries] Filter transactions based on a comma-separated list of 2-letter ISO merchant countries.
         * @param {string} [merchantCountry] Filter transactions based on the merchant\&#39;s country field.
         * @param {string} [merchantName] Filter transactions based on the merchant\&#39;s name field.
         * @param {TransactionsOrderEnum} [order] Sort the order of the returned results.
         * @param {number} [page] In some cases, the response can return multiple pages of data. Use this parameter to page through the returned results. The default page is 0.
         * @param {string} [paymentInstrumentHashId] Filter transactions based on a list of comma-separated &#x60;paymentInstrumentHashIds&#x60;.
         * @param {string} [property] Details the response parameter used to sort the transaction list. Sorted by \&#39;createdAt\&#39; by default.
         * @param {string} [settlementDate] Filter transactions based on the settlement date of the transaction in the format yyyyMMdd.
         * @param {string} [settlementStatus] Filter transactions based on settlement the status. A list of possible values is available in the response.
         * @param {number} [size] Define how many elements get retunred per response page. Accepted values can be 1-20.
         * @param {string} [startDate] The beginning date to start fetching transaction details. The format for &#x60;startDate&#x60; is YYYY-MM-DD.
         * @param {TransactionsStatusEnum} [status] Filter transactions based on the &#x60;status&#x60;. A list of possible values is available in the response.
         * @param {string} [systemReferenceNumber] Filter transactions based on the &#x60;systemReferenceNumber&#x60;.
         * @param {string} [systemTraceAuditNumber] Flter transactions based on &#x60;systemTraceAuditNumber&#x60;.
         * @param {string} [tagKey] Filter transactions based on the exact value of tagKey defined against transactions. This can be used as an independent search parameter.
         * @param {string} [tagValue] Filter the responses based on the exact value of &#x60;tagKey&#x60;. The &#x60;tagkey&#x60; can be used also be used as an independent search parameter.
         * @param {string} [transactionCurrency] Filter trasnactions based on the 3-letter [ISO-4217 transaction currency code](https://www.iso.org/iso-4217-currency-codes.html).
         * @param {string} [transactionType] Filter transactions based the status. A detailed list of the transactions types available can be found at [Transaction Types](https://docs.nium.com/apis/docs/transaction-types).
         * @param {string} [transactionsLabelsKey] Flter transactions based on the &#x60;transactionsLabelsKey&#x60;.
         * @param {string} [transactionsLabelsValue] Filter transactions based on &#x60;transactionsLabelsValue&#x60;.
         * @param {string} [xRequestId] Filter transactions based on the unique UUID value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async transactions(clientHashId: string, customerHashId: string, walletHashId: string, authCode?: string, authCurrency?: string, businessTransaction?: string, cardHashId?: string, childCustomerHashId?: string, complianceStatus?: TransactionsComplianceStatusEnum, endDate?: string, mcc?: string, merchantCategories?: string, merchantCity?: string, merchantCountries?: string, merchantCountry?: string, merchantName?: string, order?: TransactionsOrderEnum, page?: number, paymentInstrumentHashId?: string, property?: string, settlementDate?: string, settlementStatus?: string, size?: number, startDate?: string, status?: TransactionsStatusEnum, systemReferenceNumber?: string, systemTraceAuditNumber?: string, tagKey?: string, tagValue?: string, transactionCurrency?: string, transactionType?: string, transactionsLabelsKey?: string, transactionsLabelsValue?: string, xRequestId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WalletTransactionsResponseDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.transactions(clientHashId, customerHashId, walletHashId, authCode, authCurrency, businessTransaction, cardHashId, childCustomerHashId, complianceStatus, endDate, mcc, merchantCategories, merchantCity, merchantCountries, merchantCountry, merchantName, order, page, paymentInstrumentHashId, property, settlementDate, settlementStatus, size, startDate, status, systemReferenceNumber, systemTraceAuditNumber, tagKey, tagValue, transactionCurrency, transactionType, transactionsLabelsKey, transactionsLabelsValue, xRequestId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CustomerWalletTransactionsApi.transactions']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * This endpoint enables you to flag transactions as business transactions.
         * @summary Update Business Transaction Flag
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} customerHashId Unique customer identifier generated on customer creation.
         * @param {string} transactionId Unique 36 character transaction identifier generated for each transaction.
         * @param {string} walletHashId Unique wallet identifier generated simultaneously with customer creation.
         * @param {TransactionsBusinessDTO} transactionsBusinessDTO transactionsBusinessDTO
         * @param {string} [xRequestId] Enter a unique UUID value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateBusinessTransactionFlag(clientHashId: string, customerHashId: string, transactionId: string, walletHashId: string, transactionsBusinessDTO: TransactionsBusinessDTO, xRequestId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WalletWalletApiError>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateBusinessTransactionFlag(clientHashId, customerHashId, transactionId, walletHashId, transactionsBusinessDTO, xRequestId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CustomerWalletTransactionsApi.updateBusinessTransactionFlag']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * This endpoint enables you to upload a receipt for any transaction.
         * @summary Upload Transaction Receipt
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} customerHashId Unique customer identifier generated on customer creation.
         * @param {string} transactionId Unique 36 character transaction identifier generated for each transaction.
         * @param {string} walletHashId Unique wallet identifier generated simultaneously with customer creation.
         * @param {TransactionsReceiptDTO} transactionsReceiptDTO transactionReceipt
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uploadTransactionReceipt(clientHashId: string, customerHashId: string, transactionId: string, walletHashId: string, transactionsReceiptDTO: TransactionsReceiptDTO, xRequestId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WalletWalletApiError>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.uploadTransactionReceipt(clientHashId, customerHashId, transactionId, walletHashId, transactionsReceiptDTO, xRequestId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CustomerWalletTransactionsApi.uploadTransactionReceipt']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CustomerWalletTransactionsApi - factory interface
 * @export
 */
export const CustomerWalletTransactionsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CustomerWalletTransactionsApiFp(configuration)
    return {
        /**
         * This endppint enables you to download a receipt for any transaction.
         * @summary Download Transaction Receipt
         * @param {CustomerWalletTransactionsApiDownloadTransactionReceiptRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadTransactionReceipt(requestParameters: CustomerWalletTransactionsApiDownloadTransactionReceiptRequest, options?: RawAxiosRequestConfig): AxiosPromise<TransactionsReceiptDTO> {
            return localVarFp.downloadTransactionReceipt(requestParameters.clientHashId, requestParameters.customerHashId, requestParameters.transactionId, requestParameters.walletHashId, requestParameters.xRequestId, options).then((request) => request(axios, basePath));
        },
        /**
         * This API enables you to add, update, and delete transaction tags.
         * @summary Manage Transaction Tags
         * @param {CustomerWalletTransactionsApiManageTransactionTagsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        manageTransactionTags(requestParameters: CustomerWalletTransactionsApiManageTransactionTagsRequest, options?: RawAxiosRequestConfig): AxiosPromise<TransactionClientTagsResponseDTO> {
            return localVarFp.manageTransactionTags(requestParameters.clientHashId, requestParameters.customerHashId, requestParameters.transactionId, requestParameters.walletHashId, requestParameters.transactionClientTagsRequestDTO, requestParameters.xRequestId, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint enables you to update transactions with the merchant\'s location.
         * @summary Transaction Geo-Tagging
         * @param {CustomerWalletTransactionsApiTransactionGeoTaggingRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionGeoTagging(requestParameters: CustomerWalletTransactionsApiTransactionGeoTaggingRequest, options?: RawAxiosRequestConfig): AxiosPromise<WalletWalletApiError> {
            return localVarFp.transactionGeoTagging(requestParameters.clientHashId, requestParameters.customerHashId, requestParameters.transactionId, requestParameters.walletHashId, requestParameters.transactionsLocationDTO, requestParameters.xRequestId, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this endpoint to fetch transaction details for a customer.
         * @summary Transactions
         * @param {CustomerWalletTransactionsApiTransactionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactions(requestParameters: CustomerWalletTransactionsApiTransactionsRequest, options?: RawAxiosRequestConfig): AxiosPromise<WalletTransactionsResponseDTO> {
            return localVarFp.transactions(requestParameters.clientHashId, requestParameters.customerHashId, requestParameters.walletHashId, requestParameters.authCode, requestParameters.authCurrency, requestParameters.businessTransaction, requestParameters.cardHashId, requestParameters.childCustomerHashId, requestParameters.complianceStatus, requestParameters.endDate, requestParameters.mcc, requestParameters.merchantCategories, requestParameters.merchantCity, requestParameters.merchantCountries, requestParameters.merchantCountry, requestParameters.merchantName, requestParameters.order, requestParameters.page, requestParameters.paymentInstrumentHashId, requestParameters.property, requestParameters.settlementDate, requestParameters.settlementStatus, requestParameters.size, requestParameters.startDate, requestParameters.status, requestParameters.systemReferenceNumber, requestParameters.systemTraceAuditNumber, requestParameters.tagKey, requestParameters.tagValue, requestParameters.transactionCurrency, requestParameters.transactionType, requestParameters.transactionsLabelsKey, requestParameters.transactionsLabelsValue, requestParameters.xRequestId, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint enables you to flag transactions as business transactions.
         * @summary Update Business Transaction Flag
         * @param {CustomerWalletTransactionsApiUpdateBusinessTransactionFlagRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBusinessTransactionFlag(requestParameters: CustomerWalletTransactionsApiUpdateBusinessTransactionFlagRequest, options?: RawAxiosRequestConfig): AxiosPromise<WalletWalletApiError> {
            return localVarFp.updateBusinessTransactionFlag(requestParameters.clientHashId, requestParameters.customerHashId, requestParameters.transactionId, requestParameters.walletHashId, requestParameters.transactionsBusinessDTO, requestParameters.xRequestId, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint enables you to upload a receipt for any transaction.
         * @summary Upload Transaction Receipt
         * @param {CustomerWalletTransactionsApiUploadTransactionReceiptRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadTransactionReceipt(requestParameters: CustomerWalletTransactionsApiUploadTransactionReceiptRequest, options?: RawAxiosRequestConfig): AxiosPromise<WalletWalletApiError> {
            return localVarFp.uploadTransactionReceipt(requestParameters.clientHashId, requestParameters.customerHashId, requestParameters.transactionId, requestParameters.walletHashId, requestParameters.transactionsReceiptDTO, requestParameters.xRequestId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for downloadTransactionReceipt operation in CustomerWalletTransactionsApi.
 * @export
 * @interface CustomerWalletTransactionsApiDownloadTransactionReceiptRequest
 */
export interface CustomerWalletTransactionsApiDownloadTransactionReceiptRequest {
    /**
     * Unique client identifier generated and shared before API handshake.
     * @type {string}
     * @memberof CustomerWalletTransactionsApiDownloadTransactionReceipt
     */
    readonly clientHashId: string

    /**
     * Unique customer identifier generated on customer creation.
     * @type {string}
     * @memberof CustomerWalletTransactionsApiDownloadTransactionReceipt
     */
    readonly customerHashId: string

    /**
     * Unique 36 character transaction identifier generated for each transaction.
     * @type {string}
     * @memberof CustomerWalletTransactionsApiDownloadTransactionReceipt
     */
    readonly transactionId: string

    /**
     * Unique wallet identifier generated simultaneously with customer creation.
     * @type {string}
     * @memberof CustomerWalletTransactionsApiDownloadTransactionReceipt
     */
    readonly walletHashId: string

    /**
     * Enter a unique UUID value
     * @type {string}
     * @memberof CustomerWalletTransactionsApiDownloadTransactionReceipt
     */
    readonly xRequestId?: string
}

/**
 * Request parameters for manageTransactionTags operation in CustomerWalletTransactionsApi.
 * @export
 * @interface CustomerWalletTransactionsApiManageTransactionTagsRequest
 */
export interface CustomerWalletTransactionsApiManageTransactionTagsRequest {
    /**
     * Unique client identifier generated and shared before API handshake.
     * @type {string}
     * @memberof CustomerWalletTransactionsApiManageTransactionTags
     */
    readonly clientHashId: string

    /**
     * Unique customer identifier generated on customer creation.
     * @type {string}
     * @memberof CustomerWalletTransactionsApiManageTransactionTags
     */
    readonly customerHashId: string

    /**
     * Unique 36 character transaction identifier generated for each transaction.
     * @type {string}
     * @memberof CustomerWalletTransactionsApiManageTransactionTags
     */
    readonly transactionId: string

    /**
     * Unique wallet identifier generated simultaneously with customer creation.
     * @type {string}
     * @memberof CustomerWalletTransactionsApiManageTransactionTags
     */
    readonly walletHashId: string

    /**
     * tags
     * @type {TransactionClientTagsRequestDTO}
     * @memberof CustomerWalletTransactionsApiManageTransactionTags
     */
    readonly transactionClientTagsRequestDTO: TransactionClientTagsRequestDTO

    /**
     * Enter a unique UUID value.
     * @type {string}
     * @memberof CustomerWalletTransactionsApiManageTransactionTags
     */
    readonly xRequestId?: string
}

/**
 * Request parameters for transactionGeoTagging operation in CustomerWalletTransactionsApi.
 * @export
 * @interface CustomerWalletTransactionsApiTransactionGeoTaggingRequest
 */
export interface CustomerWalletTransactionsApiTransactionGeoTaggingRequest {
    /**
     * Unique client identifier generated and shared before API handshake.
     * @type {string}
     * @memberof CustomerWalletTransactionsApiTransactionGeoTagging
     */
    readonly clientHashId: string

    /**
     * Unique customer identifier generated on customer creation.
     * @type {string}
     * @memberof CustomerWalletTransactionsApiTransactionGeoTagging
     */
    readonly customerHashId: string

    /**
     * Unique 36 character transaction identifier generated for each transaction.
     * @type {string}
     * @memberof CustomerWalletTransactionsApiTransactionGeoTagging
     */
    readonly transactionId: string

    /**
     * Unique wallet identifier generated simultaneously with customer creation.
     * @type {string}
     * @memberof CustomerWalletTransactionsApiTransactionGeoTagging
     */
    readonly walletHashId: string

    /**
     * transactionsLocationDTO
     * @type {TransactionsLocationDTO}
     * @memberof CustomerWalletTransactionsApiTransactionGeoTagging
     */
    readonly transactionsLocationDTO: TransactionsLocationDTO

    /**
     * Enter a unique UUID value
     * @type {string}
     * @memberof CustomerWalletTransactionsApiTransactionGeoTagging
     */
    readonly xRequestId?: string
}

/**
 * Request parameters for transactions operation in CustomerWalletTransactionsApi.
 * @export
 * @interface CustomerWalletTransactionsApiTransactionsRequest
 */
export interface CustomerWalletTransactionsApiTransactionsRequest {
    /**
     * Filter transactions based on the client\&#39;s unique &#x60;clientHashId&#x60; that was used in the transaction.
     * @type {string}
     * @memberof CustomerWalletTransactionsApiTransactions
     */
    readonly clientHashId: string

    /**
     * Filter transactions based on the customer\&#39;s unique &#x60;customerHashId&#x60; that was used in the transaction.
     * @type {string}
     * @memberof CustomerWalletTransactionsApiTransactions
     */
    readonly customerHashId: string

    /**
     * Filter transactions based on the unique wallet identifier generated during customer creation.
     * @type {string}
     * @memberof CustomerWalletTransactionsApiTransactions
     */
    readonly walletHashId: string

    /**
     * Filter transactions based on the authorization code. In case of fund wallet transactions you can provide the &#x60;systemReferenceNumber&#x60; as the value.
     * @type {string}
     * @memberof CustomerWalletTransactionsApiTransactions
     */
    readonly authCode?: string

    /**
     * Filter transactions based on the authentication currency. Accepts any 3-letter [ISO-4217 transaction currency code](https://docs.nium.com/apis/docs/currency-and-country-codes).
     * @type {string}
     * @memberof CustomerWalletTransactionsApiTransactions
     */
    readonly authCurrency?: string

    /**
     * Filter for transactions where &#x60;businessTransaction&#x60; is **TRUE** or **FALSE**.
     * @type {string}
     * @memberof CustomerWalletTransactionsApiTransactions
     */
    readonly businessTransaction?: string

    /**
     * Filter transactions based on the unique card identifier generated during new/add-on card issuance.
     * @type {string}
     * @memberof CustomerWalletTransactionsApiTransactions
     */
    readonly cardHashId?: string

    /**
     * Filter transactions based on the &#x60;childCustomerHashId&#x60; used in the transactions.
     * @type {string}
     * @memberof CustomerWalletTransactionsApiTransactions
     */
    readonly childCustomerHashId?: string

    /**
     * Filter transactions based on the &#x60;complianceStatus&#x60;.
     * @type {'CLEAR' | 'PENDING' | 'RFI_REQUESTED' | 'REJECT'}
     * @memberof CustomerWalletTransactionsApiTransactions
     */
    readonly complianceStatus?: TransactionsComplianceStatusEnum

    /**
     * End date for fetching the transaction details. The format for endDate is YYYY-MM-DD.
     * @type {string}
     * @memberof CustomerWalletTransactionsApiTransactions
     */
    readonly endDate?: string

    /**
     * Filter transactions based on the 4-digit Merchant Category Code used during the transaction.
     * @type {string}
     * @memberof CustomerWalletTransactionsApiTransactions
     */
    readonly mcc?: string

    /**
     * Filter transactions based on the description of the merchant\&#39;s type of business product or service, also known as the Merchant Category Code (MCC) such as Airlines, Restaurants etc.
     * @type {string}
     * @memberof CustomerWalletTransactionsApiTransactions
     */
    readonly merchantCategories?: string

    /**
     * Filter transactions based on the merchant\&#39;s city.
     * @type {string}
     * @memberof CustomerWalletTransactionsApiTransactions
     */
    readonly merchantCity?: string

    /**
     * Filter transactions based on a comma-separated list of 2-letter ISO merchant countries.
     * @type {string}
     * @memberof CustomerWalletTransactionsApiTransactions
     */
    readonly merchantCountries?: string

    /**
     * Filter transactions based on the merchant\&#39;s country field.
     * @type {string}
     * @memberof CustomerWalletTransactionsApiTransactions
     */
    readonly merchantCountry?: string

    /**
     * Filter transactions based on the merchant\&#39;s name field.
     * @type {string}
     * @memberof CustomerWalletTransactionsApiTransactions
     */
    readonly merchantName?: string

    /**
     * Sort the order of the returned results.
     * @type {'ASC' | 'DESC'}
     * @memberof CustomerWalletTransactionsApiTransactions
     */
    readonly order?: TransactionsOrderEnum

    /**
     * In some cases, the response can return multiple pages of data. Use this parameter to page through the returned results. The default page is 0.
     * @type {number}
     * @memberof CustomerWalletTransactionsApiTransactions
     */
    readonly page?: number

    /**
     * Filter transactions based on a list of comma-separated &#x60;paymentInstrumentHashIds&#x60;.
     * @type {string}
     * @memberof CustomerWalletTransactionsApiTransactions
     */
    readonly paymentInstrumentHashId?: string

    /**
     * Details the response parameter used to sort the transaction list. Sorted by \&#39;createdAt\&#39; by default.
     * @type {string}
     * @memberof CustomerWalletTransactionsApiTransactions
     */
    readonly property?: string

    /**
     * Filter transactions based on the settlement date of the transaction in the format yyyyMMdd.
     * @type {string}
     * @memberof CustomerWalletTransactionsApiTransactions
     */
    readonly settlementDate?: string

    /**
     * Filter transactions based on settlement the status. A list of possible values is available in the response.
     * @type {string}
     * @memberof CustomerWalletTransactionsApiTransactions
     */
    readonly settlementStatus?: string

    /**
     * Define how many elements get retunred per response page. Accepted values can be 1-20.
     * @type {number}
     * @memberof CustomerWalletTransactionsApiTransactions
     */
    readonly size?: number

    /**
     * The beginning date to start fetching transaction details. The format for &#x60;startDate&#x60; is YYYY-MM-DD.
     * @type {string}
     * @memberof CustomerWalletTransactionsApiTransactions
     */
    readonly startDate?: string

    /**
     * Filter transactions based on the &#x60;status&#x60;. A list of possible values is available in the response.
     * @type {'IN_PROGRESS' | 'ACTION_REQUIRED' | 'RFI_REQUESTED' | 'RFI_RESPONDED' | 'COMPLETED' | 'ERROR' | 'REJECT' | 'EXPIRED'}
     * @memberof CustomerWalletTransactionsApiTransactions
     */
    readonly status?: TransactionsStatusEnum

    /**
     * Filter transactions based on the &#x60;systemReferenceNumber&#x60;.
     * @type {string}
     * @memberof CustomerWalletTransactionsApiTransactions
     */
    readonly systemReferenceNumber?: string

    /**
     * Flter transactions based on &#x60;systemTraceAuditNumber&#x60;.
     * @type {string}
     * @memberof CustomerWalletTransactionsApiTransactions
     */
    readonly systemTraceAuditNumber?: string

    /**
     * Filter transactions based on the exact value of tagKey defined against transactions. This can be used as an independent search parameter.
     * @type {string}
     * @memberof CustomerWalletTransactionsApiTransactions
     */
    readonly tagKey?: string

    /**
     * Filter the responses based on the exact value of &#x60;tagKey&#x60;. The &#x60;tagkey&#x60; can be used also be used as an independent search parameter.
     * @type {string}
     * @memberof CustomerWalletTransactionsApiTransactions
     */
    readonly tagValue?: string

    /**
     * Filter trasnactions based on the 3-letter [ISO-4217 transaction currency code](https://www.iso.org/iso-4217-currency-codes.html).
     * @type {string}
     * @memberof CustomerWalletTransactionsApiTransactions
     */
    readonly transactionCurrency?: string

    /**
     * Filter transactions based the status. A detailed list of the transactions types available can be found at [Transaction Types](https://docs.nium.com/apis/docs/transaction-types).
     * @type {string}
     * @memberof CustomerWalletTransactionsApiTransactions
     */
    readonly transactionType?: string

    /**
     * Flter transactions based on the &#x60;transactionsLabelsKey&#x60;.
     * @type {string}
     * @memberof CustomerWalletTransactionsApiTransactions
     */
    readonly transactionsLabelsKey?: string

    /**
     * Filter transactions based on &#x60;transactionsLabelsValue&#x60;.
     * @type {string}
     * @memberof CustomerWalletTransactionsApiTransactions
     */
    readonly transactionsLabelsValue?: string

    /**
     * Filter transactions based on the unique UUID value.
     * @type {string}
     * @memberof CustomerWalletTransactionsApiTransactions
     */
    readonly xRequestId?: string
}

/**
 * Request parameters for updateBusinessTransactionFlag operation in CustomerWalletTransactionsApi.
 * @export
 * @interface CustomerWalletTransactionsApiUpdateBusinessTransactionFlagRequest
 */
export interface CustomerWalletTransactionsApiUpdateBusinessTransactionFlagRequest {
    /**
     * Unique client identifier generated and shared before API handshake.
     * @type {string}
     * @memberof CustomerWalletTransactionsApiUpdateBusinessTransactionFlag
     */
    readonly clientHashId: string

    /**
     * Unique customer identifier generated on customer creation.
     * @type {string}
     * @memberof CustomerWalletTransactionsApiUpdateBusinessTransactionFlag
     */
    readonly customerHashId: string

    /**
     * Unique 36 character transaction identifier generated for each transaction.
     * @type {string}
     * @memberof CustomerWalletTransactionsApiUpdateBusinessTransactionFlag
     */
    readonly transactionId: string

    /**
     * Unique wallet identifier generated simultaneously with customer creation.
     * @type {string}
     * @memberof CustomerWalletTransactionsApiUpdateBusinessTransactionFlag
     */
    readonly walletHashId: string

    /**
     * transactionsBusinessDTO
     * @type {TransactionsBusinessDTO}
     * @memberof CustomerWalletTransactionsApiUpdateBusinessTransactionFlag
     */
    readonly transactionsBusinessDTO: TransactionsBusinessDTO

    /**
     * Enter a unique UUID value.
     * @type {string}
     * @memberof CustomerWalletTransactionsApiUpdateBusinessTransactionFlag
     */
    readonly xRequestId?: string
}

/**
 * Request parameters for uploadTransactionReceipt operation in CustomerWalletTransactionsApi.
 * @export
 * @interface CustomerWalletTransactionsApiUploadTransactionReceiptRequest
 */
export interface CustomerWalletTransactionsApiUploadTransactionReceiptRequest {
    /**
     * Unique client identifier generated and shared before API handshake.
     * @type {string}
     * @memberof CustomerWalletTransactionsApiUploadTransactionReceipt
     */
    readonly clientHashId: string

    /**
     * Unique customer identifier generated on customer creation.
     * @type {string}
     * @memberof CustomerWalletTransactionsApiUploadTransactionReceipt
     */
    readonly customerHashId: string

    /**
     * Unique 36 character transaction identifier generated for each transaction.
     * @type {string}
     * @memberof CustomerWalletTransactionsApiUploadTransactionReceipt
     */
    readonly transactionId: string

    /**
     * Unique wallet identifier generated simultaneously with customer creation.
     * @type {string}
     * @memberof CustomerWalletTransactionsApiUploadTransactionReceipt
     */
    readonly walletHashId: string

    /**
     * transactionReceipt
     * @type {TransactionsReceiptDTO}
     * @memberof CustomerWalletTransactionsApiUploadTransactionReceipt
     */
    readonly transactionsReceiptDTO: TransactionsReceiptDTO

    /**
     * Enter a unique UUID value
     * @type {string}
     * @memberof CustomerWalletTransactionsApiUploadTransactionReceipt
     */
    readonly xRequestId?: string
}

/**
 * CustomerWalletTransactionsApi - object-oriented interface
 * @export
 * @class CustomerWalletTransactionsApi
 * @extends {BaseAPI}
 */
export class CustomerWalletTransactionsApi extends BaseAPI {
    /**
     * This endppint enables you to download a receipt for any transaction.
     * @summary Download Transaction Receipt
     * @param {CustomerWalletTransactionsApiDownloadTransactionReceiptRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerWalletTransactionsApi
     */
    public downloadTransactionReceipt(requestParameters: CustomerWalletTransactionsApiDownloadTransactionReceiptRequest, options?: RawAxiosRequestConfig) {
        return CustomerWalletTransactionsApiFp(this.configuration).downloadTransactionReceipt(requestParameters.clientHashId, requestParameters.customerHashId, requestParameters.transactionId, requestParameters.walletHashId, requestParameters.xRequestId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This API enables you to add, update, and delete transaction tags.
     * @summary Manage Transaction Tags
     * @param {CustomerWalletTransactionsApiManageTransactionTagsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerWalletTransactionsApi
     */
    public manageTransactionTags(requestParameters: CustomerWalletTransactionsApiManageTransactionTagsRequest, options?: RawAxiosRequestConfig) {
        return CustomerWalletTransactionsApiFp(this.configuration).manageTransactionTags(requestParameters.clientHashId, requestParameters.customerHashId, requestParameters.transactionId, requestParameters.walletHashId, requestParameters.transactionClientTagsRequestDTO, requestParameters.xRequestId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint enables you to update transactions with the merchant\'s location.
     * @summary Transaction Geo-Tagging
     * @param {CustomerWalletTransactionsApiTransactionGeoTaggingRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerWalletTransactionsApi
     */
    public transactionGeoTagging(requestParameters: CustomerWalletTransactionsApiTransactionGeoTaggingRequest, options?: RawAxiosRequestConfig) {
        return CustomerWalletTransactionsApiFp(this.configuration).transactionGeoTagging(requestParameters.clientHashId, requestParameters.customerHashId, requestParameters.transactionId, requestParameters.walletHashId, requestParameters.transactionsLocationDTO, requestParameters.xRequestId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this endpoint to fetch transaction details for a customer.
     * @summary Transactions
     * @param {CustomerWalletTransactionsApiTransactionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerWalletTransactionsApi
     */
    public transactions(requestParameters: CustomerWalletTransactionsApiTransactionsRequest, options?: RawAxiosRequestConfig) {
        return CustomerWalletTransactionsApiFp(this.configuration).transactions(requestParameters.clientHashId, requestParameters.customerHashId, requestParameters.walletHashId, requestParameters.authCode, requestParameters.authCurrency, requestParameters.businessTransaction, requestParameters.cardHashId, requestParameters.childCustomerHashId, requestParameters.complianceStatus, requestParameters.endDate, requestParameters.mcc, requestParameters.merchantCategories, requestParameters.merchantCity, requestParameters.merchantCountries, requestParameters.merchantCountry, requestParameters.merchantName, requestParameters.order, requestParameters.page, requestParameters.paymentInstrumentHashId, requestParameters.property, requestParameters.settlementDate, requestParameters.settlementStatus, requestParameters.size, requestParameters.startDate, requestParameters.status, requestParameters.systemReferenceNumber, requestParameters.systemTraceAuditNumber, requestParameters.tagKey, requestParameters.tagValue, requestParameters.transactionCurrency, requestParameters.transactionType, requestParameters.transactionsLabelsKey, requestParameters.transactionsLabelsValue, requestParameters.xRequestId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint enables you to flag transactions as business transactions.
     * @summary Update Business Transaction Flag
     * @param {CustomerWalletTransactionsApiUpdateBusinessTransactionFlagRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerWalletTransactionsApi
     */
    public updateBusinessTransactionFlag(requestParameters: CustomerWalletTransactionsApiUpdateBusinessTransactionFlagRequest, options?: RawAxiosRequestConfig) {
        return CustomerWalletTransactionsApiFp(this.configuration).updateBusinessTransactionFlag(requestParameters.clientHashId, requestParameters.customerHashId, requestParameters.transactionId, requestParameters.walletHashId, requestParameters.transactionsBusinessDTO, requestParameters.xRequestId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint enables you to upload a receipt for any transaction.
     * @summary Upload Transaction Receipt
     * @param {CustomerWalletTransactionsApiUploadTransactionReceiptRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerWalletTransactionsApi
     */
    public uploadTransactionReceipt(requestParameters: CustomerWalletTransactionsApiUploadTransactionReceiptRequest, options?: RawAxiosRequestConfig) {
        return CustomerWalletTransactionsApiFp(this.configuration).uploadTransactionReceipt(requestParameters.clientHashId, requestParameters.customerHashId, requestParameters.transactionId, requestParameters.walletHashId, requestParameters.transactionsReceiptDTO, requestParameters.xRequestId, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const TransactionsComplianceStatusEnum = {
    Clear: 'CLEAR',
    Pending: 'PENDING',
    RfiRequested: 'RFI_REQUESTED',
    Reject: 'REJECT'
} as const;
export type TransactionsComplianceStatusEnum = typeof TransactionsComplianceStatusEnum[keyof typeof TransactionsComplianceStatusEnum];
/**
 * @export
 */
export const TransactionsOrderEnum = {
    Asc: 'ASC',
    Desc: 'DESC'
} as const;
export type TransactionsOrderEnum = typeof TransactionsOrderEnum[keyof typeof TransactionsOrderEnum];
/**
 * @export
 */
export const TransactionsStatusEnum = {
    InProgress: 'IN_PROGRESS',
    ActionRequired: 'ACTION_REQUIRED',
    RfiRequested: 'RFI_REQUESTED',
    RfiResponded: 'RFI_RESPONDED',
    Completed: 'COMPLETED',
    Error: 'ERROR',
    Reject: 'REJECT',
    Expired: 'EXPIRED'
} as const;
export type TransactionsStatusEnum = typeof TransactionsStatusEnum[keyof typeof TransactionsStatusEnum];
