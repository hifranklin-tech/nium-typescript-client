/* tslint:disable */
/* eslint-disable */
/**
 * NIUM Platform
 * NIUM Platform
 *
 * The version of the OpenAPI document: 2023.12.12
 * Contact: experience@nium.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import { TransactionClientTagsRequestDTO } from '../model';
// @ts-ignore
import { TransactionClientTagsResponseDTO } from '../model';
// @ts-ignore
import { TransactionsBusinessDTO } from '../model';
// @ts-ignore
import { TransactionsLocationDTO } from '../model';
// @ts-ignore
import { TransactionsReceiptDTO } from '../model';
// @ts-ignore
import { WalletApiError } from '../model';
// @ts-ignore
import { WalletTransactionsResponseDTO } from '../model';
/**
 * CustomerWalletTransactionsApi - axios parameter creator
 * @export
 */
export const CustomerWalletTransactionsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This API allows you to download a receipt against each transaction.
         * @summary Download Transaction Receipt
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} customerHashId Unique customer identifier generated on customer creation.
         * @param {string} transactionId Transaction Id is NIUM generated 36 character UUID which is unique, per transaction.
         * @param {string} walletHashId Unique wallet identifier generated simultaneously with customer creation.
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadTransactionReceipt: async (clientHashId: string, customerHashId: string, transactionId: string, walletHashId: string, xRequestId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'clientHashId' is not null or undefined
            assertParamExists('downloadTransactionReceipt', 'clientHashId', clientHashId)
            // verify required parameter 'customerHashId' is not null or undefined
            assertParamExists('downloadTransactionReceipt', 'customerHashId', customerHashId)
            // verify required parameter 'transactionId' is not null or undefined
            assertParamExists('downloadTransactionReceipt', 'transactionId', transactionId)
            // verify required parameter 'walletHashId' is not null or undefined
            assertParamExists('downloadTransactionReceipt', 'walletHashId', walletHashId)
            const localVarPath = `/api/v1/client/{clientHashId}/customer/{customerHashId}/wallet/{walletHashId}/transactions/{transactionId}/receipt`
                .replace(`{${"clientHashId"}}`, encodeURIComponent(String(clientHashId)))
                .replace(`{${"customerHashId"}}`, encodeURIComponent(String(customerHashId)))
                .replace(`{${"transactionId"}}`, encodeURIComponent(String(transactionId)))
                .replace(`{${"walletHashId"}}`, encodeURIComponent(String(walletHashId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication default required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (xRequestId != null) {
                localVarHeaderParameter['x-request-id'] = String(xRequestId);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This API allows you to add, update, and delete transaction tags.
         * @summary Manage Transaction Tags
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} customerHashId Unique customer identifier generated on customer creation.
         * @param {string} transactionId Unique transaction Identifier generated and shared before API handshake.
         * @param {string} walletHashId Unique wallet identifier generated simultaneously with customer creation.
         * @param {TransactionClientTagsRequestDTO} transactionClientTagsRequestDTO tags
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        manageTransactionTags: async (clientHashId: string, customerHashId: string, transactionId: string, walletHashId: string, transactionClientTagsRequestDTO: TransactionClientTagsRequestDTO, xRequestId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'clientHashId' is not null or undefined
            assertParamExists('manageTransactionTags', 'clientHashId', clientHashId)
            // verify required parameter 'customerHashId' is not null or undefined
            assertParamExists('manageTransactionTags', 'customerHashId', customerHashId)
            // verify required parameter 'transactionId' is not null or undefined
            assertParamExists('manageTransactionTags', 'transactionId', transactionId)
            // verify required parameter 'walletHashId' is not null or undefined
            assertParamExists('manageTransactionTags', 'walletHashId', walletHashId)
            // verify required parameter 'transactionClientTagsRequestDTO' is not null or undefined
            assertParamExists('manageTransactionTags', 'transactionClientTagsRequestDTO', transactionClientTagsRequestDTO)
            const localVarPath = `/api/v1/client/{clientHashId}/customer/{customerHashId}/wallet/{walletHashId}/transactions/{transactionId}/tags`
                .replace(`{${"clientHashId"}}`, encodeURIComponent(String(clientHashId)))
                .replace(`{${"customerHashId"}}`, encodeURIComponent(String(customerHashId)))
                .replace(`{${"transactionId"}}`, encodeURIComponent(String(transactionId)))
                .replace(`{${"walletHashId"}}`, encodeURIComponent(String(walletHashId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication default required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (xRequestId != null) {
                localVarHeaderParameter['x-request-id'] = String(xRequestId);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(transactionClientTagsRequestDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This API allows you to update a transaction with merchant location.
         * @summary Transaction Geo-Tagging
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} customerHashId Unique customer identifier generated on customer creation.
         * @param {string} transactionId Transaction Id is NIUM generated 36 character UUID which is unique, per transaction.
         * @param {string} walletHashId Unique wallet identifier generated simultaneously with customer creation.
         * @param {TransactionsLocationDTO} transactionsLocationDTO transactionsLocationDTO
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionGeoTagging: async (clientHashId: string, customerHashId: string, transactionId: string, walletHashId: string, transactionsLocationDTO: TransactionsLocationDTO, xRequestId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'clientHashId' is not null or undefined
            assertParamExists('transactionGeoTagging', 'clientHashId', clientHashId)
            // verify required parameter 'customerHashId' is not null or undefined
            assertParamExists('transactionGeoTagging', 'customerHashId', customerHashId)
            // verify required parameter 'transactionId' is not null or undefined
            assertParamExists('transactionGeoTagging', 'transactionId', transactionId)
            // verify required parameter 'walletHashId' is not null or undefined
            assertParamExists('transactionGeoTagging', 'walletHashId', walletHashId)
            // verify required parameter 'transactionsLocationDTO' is not null or undefined
            assertParamExists('transactionGeoTagging', 'transactionsLocationDTO', transactionsLocationDTO)
            const localVarPath = `/api/v1/client/{clientHashId}/customer/{customerHashId}/wallet/{walletHashId}/transactions/{transactionId}/location`
                .replace(`{${"clientHashId"}}`, encodeURIComponent(String(clientHashId)))
                .replace(`{${"customerHashId"}}`, encodeURIComponent(String(customerHashId)))
                .replace(`{${"transactionId"}}`, encodeURIComponent(String(transactionId)))
                .replace(`{${"walletHashId"}}`, encodeURIComponent(String(walletHashId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication default required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (xRequestId != null) {
                localVarHeaderParameter['x-request-id'] = String(xRequestId);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(transactionsLocationDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This API allows you to fetch transaction details for a customer.
         * @summary Transactions
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} customerHashId Unique customer identifier generated on customer creation.
         * @param {string} walletHashId Unique wallet identifier generated simultaneously with customer creation.
         * @param {string} [authCode] This parameter can be used to filter the transactions based on the authorization code. In case of fund wallet transactions you can provide the systemReferenceNumber as value.
         * @param {string} [authCurrency] This parameter can filter the transactions based on auth currency and accepts 3-letter [ISO-4217 transaction currency code](https://docs.nium.com/apis/docs/currency-and-country-codes).
         * @param {string} [businessTransaction] This parameter can filter the transactions based on businessTransaction flag.
         * @param {string} [cardHashId] This field can apply the filter based on the unique card identifier generated during new/add-on card issuance.
         * @param {string} [childCustomerHashId] This field contains the unique child customer identifier generated when new child customer created.
         * @param {string} [endDate] End date for fetching the transaction details. The format for endDate is YYYY-MM-DD.
         * @param {string} [mcc] This parameter can filter the transactions based on 4-digit Merchant Category Codes.
         * @param {string} [merchantCategories] This parameter describes the merchant\&#39;s type of business product or service, also known as the Merchant Category Code (MCC) such as Airlines, Restaurants etc.
         * @param {string} [merchantCity] This parameter can filter the transactions based on the merchant city field.
         * @param {string} [merchantCountries] This parameter can filter the transactions based on comma-separated list of 2-letter ISO merchant countries.
         * @param {string} [merchantCountry] This parameter can filter the transactions based on the merchant country field.
         * @param {string} [merchantName] This parameter can filter the transactions based on the merchant name field.
         * @param {TransactionsOrderEnum} [order] The sort order for the results.
         * @param {number} [page] This API may have lot of data in response and supports pagination. Entire response data is divided into pages with size as the upper limit on the number of data. Integer values from 0 onwards are acceptable. Default page is 0.
         * @param {string} [paymentInstrumentHashId] This parameter can filter the transactions based on comma-separated paymentInstrumentHashId.
         * @param {string} [property] The field indicates the response parameter used to sort paginated data, with \&#39;createdAt\&#39; as the default parameter.
         * @param {string} [settlementDate] This parameter can filter the transactions based on the settlement date of the transaction in format yyyyMMdd.
         * @param {string} [settlementStatus] This parameter can filter the transactions based on settlement status. The detailed list of possible values is available in the response of this API.
         * @param {number} [size] This will decide the number of elements per page. Typical values can be 1-20.
         * @param {string} [startDate] From date for fetching the transaction details. The format for startDate is YYYY-MM-DD.
         * @param {TransactionsStatusEnum} [status] This parameter can filter the transactions based on status. The detailed list of possible values is available in the response of this API.
         * @param {string} [systemReferenceNumber] This parameter can be used to filter the transactions based on the systemReferenceNumber.
         * @param {string} [systemTraceAuditNumber] This parameter can filter the transactions based on systemTraceAuditNumber.
         * @param {string} [tagKey] This parameter can filter the transactions, based on the exact value of tagKey defined against transactions. This can be used as an independent search parameter.
         * @param {string} [tagValue] This parameter can filter the transactions, based on the approximating value of tagValue(that may be mapped for a tagKey defined against transactions). This can be used as an independent search parameter.
         * @param {string} [transactionCurrency] This field contains the 3-letter [ISO-4217 transaction currency code](https://www.iso.org/iso-4217-currency-codes.html).
         * @param {string} [transactionType] This field contains the transaction can be one of the complete list of transactions mentioned in [Glossary of Transaction Types](https://docs.nium.com/baas/get-transactions#glossary-of-transaction-types).
         * @param {string} [transactionsLabelsKey] This parameter can filter the transactions based on transactionsLabelsKey.
         * @param {string} [transactionsLabelsValue] This parameter can filter the transactions based on transactionsLabelsValue.
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactions: async (clientHashId: string, customerHashId: string, walletHashId: string, authCode?: string, authCurrency?: string, businessTransaction?: string, cardHashId?: string, childCustomerHashId?: string, endDate?: string, mcc?: string, merchantCategories?: string, merchantCity?: string, merchantCountries?: string, merchantCountry?: string, merchantName?: string, order?: TransactionsOrderEnum, page?: number, paymentInstrumentHashId?: string, property?: string, settlementDate?: string, settlementStatus?: string, size?: number, startDate?: string, status?: TransactionsStatusEnum, systemReferenceNumber?: string, systemTraceAuditNumber?: string, tagKey?: string, tagValue?: string, transactionCurrency?: string, transactionType?: string, transactionsLabelsKey?: string, transactionsLabelsValue?: string, xRequestId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'clientHashId' is not null or undefined
            assertParamExists('transactions', 'clientHashId', clientHashId)
            // verify required parameter 'customerHashId' is not null or undefined
            assertParamExists('transactions', 'customerHashId', customerHashId)
            // verify required parameter 'walletHashId' is not null or undefined
            assertParamExists('transactions', 'walletHashId', walletHashId)
            const localVarPath = `/api/v1/client/{clientHashId}/customer/{customerHashId}/wallet/{walletHashId}/transactions`
                .replace(`{${"clientHashId"}}`, encodeURIComponent(String(clientHashId)))
                .replace(`{${"customerHashId"}}`, encodeURIComponent(String(customerHashId)))
                .replace(`{${"walletHashId"}}`, encodeURIComponent(String(walletHashId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication default required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (authCode !== undefined) {
                localVarQueryParameter['authCode'] = authCode;
            }

            if (authCurrency !== undefined) {
                localVarQueryParameter['authCurrency'] = authCurrency;
            }

            if (businessTransaction !== undefined) {
                localVarQueryParameter['businessTransaction'] = businessTransaction;
            }

            if (cardHashId !== undefined) {
                localVarQueryParameter['cardHashId'] = cardHashId;
            }

            if (childCustomerHashId !== undefined) {
                localVarQueryParameter['childCustomerHashId'] = childCustomerHashId;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = endDate;
            }

            if (mcc !== undefined) {
                localVarQueryParameter['mcc'] = mcc;
            }

            if (merchantCategories !== undefined) {
                localVarQueryParameter['merchantCategories'] = merchantCategories;
            }

            if (merchantCity !== undefined) {
                localVarQueryParameter['merchantCity'] = merchantCity;
            }

            if (merchantCountries !== undefined) {
                localVarQueryParameter['merchantCountries'] = merchantCountries;
            }

            if (merchantCountry !== undefined) {
                localVarQueryParameter['merchantCountry'] = merchantCountry;
            }

            if (merchantName !== undefined) {
                localVarQueryParameter['merchantName'] = merchantName;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (paymentInstrumentHashId !== undefined) {
                localVarQueryParameter['paymentInstrumentHashId'] = paymentInstrumentHashId;
            }

            if (property !== undefined) {
                localVarQueryParameter['property'] = property;
            }

            if (settlementDate !== undefined) {
                localVarQueryParameter['settlementDate'] = settlementDate;
            }

            if (settlementStatus !== undefined) {
                localVarQueryParameter['settlementStatus'] = settlementStatus;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = startDate;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (systemReferenceNumber !== undefined) {
                localVarQueryParameter['systemReferenceNumber'] = systemReferenceNumber;
            }

            if (systemTraceAuditNumber !== undefined) {
                localVarQueryParameter['systemTraceAuditNumber'] = systemTraceAuditNumber;
            }

            if (tagKey !== undefined) {
                localVarQueryParameter['tagKey'] = tagKey;
            }

            if (tagValue !== undefined) {
                localVarQueryParameter['tagValue'] = tagValue;
            }

            if (transactionCurrency !== undefined) {
                localVarQueryParameter['transactionCurrency'] = transactionCurrency;
            }

            if (transactionType !== undefined) {
                localVarQueryParameter['transactionType'] = transactionType;
            }

            if (transactionsLabelsKey !== undefined) {
                localVarQueryParameter['transactionsLabelsKey'] = transactionsLabelsKey;
            }

            if (transactionsLabelsValue !== undefined) {
                localVarQueryParameter['transactionsLabelsValue'] = transactionsLabelsValue;
            }

            if (xRequestId != null) {
                localVarHeaderParameter['x-request-id'] = String(xRequestId);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This API allows you to update a flag against each transaction signifying that the transaction is a business transaction.
         * @summary Update Business Transaction Flag
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} customerHashId Unique customer identifier generated on customer creation.
         * @param {string} transactionId Transaction Id is NIUM generated 36 character UUID which is unique, per transaction.
         * @param {string} walletHashId Unique wallet identifier generated simultaneously with customer creation.
         * @param {TransactionsBusinessDTO} transactionsBusinessDTO transactionsBusinessDTO
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBusinessTransactionFlag: async (clientHashId: string, customerHashId: string, transactionId: string, walletHashId: string, transactionsBusinessDTO: TransactionsBusinessDTO, xRequestId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'clientHashId' is not null or undefined
            assertParamExists('updateBusinessTransactionFlag', 'clientHashId', clientHashId)
            // verify required parameter 'customerHashId' is not null or undefined
            assertParamExists('updateBusinessTransactionFlag', 'customerHashId', customerHashId)
            // verify required parameter 'transactionId' is not null or undefined
            assertParamExists('updateBusinessTransactionFlag', 'transactionId', transactionId)
            // verify required parameter 'walletHashId' is not null or undefined
            assertParamExists('updateBusinessTransactionFlag', 'walletHashId', walletHashId)
            // verify required parameter 'transactionsBusinessDTO' is not null or undefined
            assertParamExists('updateBusinessTransactionFlag', 'transactionsBusinessDTO', transactionsBusinessDTO)
            const localVarPath = `/api/v1/client/{clientHashId}/customer/{customerHashId}/wallet/{walletHashId}/transactions/{transactionId}/business`
                .replace(`{${"clientHashId"}}`, encodeURIComponent(String(clientHashId)))
                .replace(`{${"customerHashId"}}`, encodeURIComponent(String(customerHashId)))
                .replace(`{${"transactionId"}}`, encodeURIComponent(String(transactionId)))
                .replace(`{${"walletHashId"}}`, encodeURIComponent(String(walletHashId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication default required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (xRequestId != null) {
                localVarHeaderParameter['x-request-id'] = String(xRequestId);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(transactionsBusinessDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This API allows you to upload a receipt against each transaction.
         * @summary Upload Transaction Receipt
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} customerHashId Unique customer identifier generated on customer creation.
         * @param {string} transactionId Transaction Id is NIUM generated 36 character UUID which is unique, per transaction.
         * @param {string} walletHashId Unique wallet identifier generated simultaneously with customer creation.
         * @param {TransactionsReceiptDTO} transactionsReceiptDTO transactionReceipt
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadTransactionReceipt: async (clientHashId: string, customerHashId: string, transactionId: string, walletHashId: string, transactionsReceiptDTO: TransactionsReceiptDTO, xRequestId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'clientHashId' is not null or undefined
            assertParamExists('uploadTransactionReceipt', 'clientHashId', clientHashId)
            // verify required parameter 'customerHashId' is not null or undefined
            assertParamExists('uploadTransactionReceipt', 'customerHashId', customerHashId)
            // verify required parameter 'transactionId' is not null or undefined
            assertParamExists('uploadTransactionReceipt', 'transactionId', transactionId)
            // verify required parameter 'walletHashId' is not null or undefined
            assertParamExists('uploadTransactionReceipt', 'walletHashId', walletHashId)
            // verify required parameter 'transactionsReceiptDTO' is not null or undefined
            assertParamExists('uploadTransactionReceipt', 'transactionsReceiptDTO', transactionsReceiptDTO)
            const localVarPath = `/api/v1/client/{clientHashId}/customer/{customerHashId}/wallet/{walletHashId}/transactions/{transactionId}/receipt`
                .replace(`{${"clientHashId"}}`, encodeURIComponent(String(clientHashId)))
                .replace(`{${"customerHashId"}}`, encodeURIComponent(String(customerHashId)))
                .replace(`{${"transactionId"}}`, encodeURIComponent(String(transactionId)))
                .replace(`{${"walletHashId"}}`, encodeURIComponent(String(walletHashId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication default required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (xRequestId != null) {
                localVarHeaderParameter['x-request-id'] = String(xRequestId);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(transactionsReceiptDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CustomerWalletTransactionsApi - functional programming interface
 * @export
 */
export const CustomerWalletTransactionsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CustomerWalletTransactionsApiAxiosParamCreator(configuration)
    return {
        /**
         * This API allows you to download a receipt against each transaction.
         * @summary Download Transaction Receipt
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} customerHashId Unique customer identifier generated on customer creation.
         * @param {string} transactionId Transaction Id is NIUM generated 36 character UUID which is unique, per transaction.
         * @param {string} walletHashId Unique wallet identifier generated simultaneously with customer creation.
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async downloadTransactionReceipt(clientHashId: string, customerHashId: string, transactionId: string, walletHashId: string, xRequestId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TransactionsReceiptDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.downloadTransactionReceipt(clientHashId, customerHashId, transactionId, walletHashId, xRequestId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CustomerWalletTransactionsApi.downloadTransactionReceipt']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * This API allows you to add, update, and delete transaction tags.
         * @summary Manage Transaction Tags
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} customerHashId Unique customer identifier generated on customer creation.
         * @param {string} transactionId Unique transaction Identifier generated and shared before API handshake.
         * @param {string} walletHashId Unique wallet identifier generated simultaneously with customer creation.
         * @param {TransactionClientTagsRequestDTO} transactionClientTagsRequestDTO tags
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async manageTransactionTags(clientHashId: string, customerHashId: string, transactionId: string, walletHashId: string, transactionClientTagsRequestDTO: TransactionClientTagsRequestDTO, xRequestId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TransactionClientTagsResponseDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.manageTransactionTags(clientHashId, customerHashId, transactionId, walletHashId, transactionClientTagsRequestDTO, xRequestId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CustomerWalletTransactionsApi.manageTransactionTags']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * This API allows you to update a transaction with merchant location.
         * @summary Transaction Geo-Tagging
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} customerHashId Unique customer identifier generated on customer creation.
         * @param {string} transactionId Transaction Id is NIUM generated 36 character UUID which is unique, per transaction.
         * @param {string} walletHashId Unique wallet identifier generated simultaneously with customer creation.
         * @param {TransactionsLocationDTO} transactionsLocationDTO transactionsLocationDTO
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async transactionGeoTagging(clientHashId: string, customerHashId: string, transactionId: string, walletHashId: string, transactionsLocationDTO: TransactionsLocationDTO, xRequestId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WalletApiError>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.transactionGeoTagging(clientHashId, customerHashId, transactionId, walletHashId, transactionsLocationDTO, xRequestId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CustomerWalletTransactionsApi.transactionGeoTagging']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * This API allows you to fetch transaction details for a customer.
         * @summary Transactions
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} customerHashId Unique customer identifier generated on customer creation.
         * @param {string} walletHashId Unique wallet identifier generated simultaneously with customer creation.
         * @param {string} [authCode] This parameter can be used to filter the transactions based on the authorization code. In case of fund wallet transactions you can provide the systemReferenceNumber as value.
         * @param {string} [authCurrency] This parameter can filter the transactions based on auth currency and accepts 3-letter [ISO-4217 transaction currency code](https://docs.nium.com/apis/docs/currency-and-country-codes).
         * @param {string} [businessTransaction] This parameter can filter the transactions based on businessTransaction flag.
         * @param {string} [cardHashId] This field can apply the filter based on the unique card identifier generated during new/add-on card issuance.
         * @param {string} [childCustomerHashId] This field contains the unique child customer identifier generated when new child customer created.
         * @param {string} [endDate] End date for fetching the transaction details. The format for endDate is YYYY-MM-DD.
         * @param {string} [mcc] This parameter can filter the transactions based on 4-digit Merchant Category Codes.
         * @param {string} [merchantCategories] This parameter describes the merchant\&#39;s type of business product or service, also known as the Merchant Category Code (MCC) such as Airlines, Restaurants etc.
         * @param {string} [merchantCity] This parameter can filter the transactions based on the merchant city field.
         * @param {string} [merchantCountries] This parameter can filter the transactions based on comma-separated list of 2-letter ISO merchant countries.
         * @param {string} [merchantCountry] This parameter can filter the transactions based on the merchant country field.
         * @param {string} [merchantName] This parameter can filter the transactions based on the merchant name field.
         * @param {TransactionsOrderEnum} [order] The sort order for the results.
         * @param {number} [page] This API may have lot of data in response and supports pagination. Entire response data is divided into pages with size as the upper limit on the number of data. Integer values from 0 onwards are acceptable. Default page is 0.
         * @param {string} [paymentInstrumentHashId] This parameter can filter the transactions based on comma-separated paymentInstrumentHashId.
         * @param {string} [property] The field indicates the response parameter used to sort paginated data, with \&#39;createdAt\&#39; as the default parameter.
         * @param {string} [settlementDate] This parameter can filter the transactions based on the settlement date of the transaction in format yyyyMMdd.
         * @param {string} [settlementStatus] This parameter can filter the transactions based on settlement status. The detailed list of possible values is available in the response of this API.
         * @param {number} [size] This will decide the number of elements per page. Typical values can be 1-20.
         * @param {string} [startDate] From date for fetching the transaction details. The format for startDate is YYYY-MM-DD.
         * @param {TransactionsStatusEnum} [status] This parameter can filter the transactions based on status. The detailed list of possible values is available in the response of this API.
         * @param {string} [systemReferenceNumber] This parameter can be used to filter the transactions based on the systemReferenceNumber.
         * @param {string} [systemTraceAuditNumber] This parameter can filter the transactions based on systemTraceAuditNumber.
         * @param {string} [tagKey] This parameter can filter the transactions, based on the exact value of tagKey defined against transactions. This can be used as an independent search parameter.
         * @param {string} [tagValue] This parameter can filter the transactions, based on the approximating value of tagValue(that may be mapped for a tagKey defined against transactions). This can be used as an independent search parameter.
         * @param {string} [transactionCurrency] This field contains the 3-letter [ISO-4217 transaction currency code](https://www.iso.org/iso-4217-currency-codes.html).
         * @param {string} [transactionType] This field contains the transaction can be one of the complete list of transactions mentioned in [Glossary of Transaction Types](https://docs.nium.com/baas/get-transactions#glossary-of-transaction-types).
         * @param {string} [transactionsLabelsKey] This parameter can filter the transactions based on transactionsLabelsKey.
         * @param {string} [transactionsLabelsValue] This parameter can filter the transactions based on transactionsLabelsValue.
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async transactions(clientHashId: string, customerHashId: string, walletHashId: string, authCode?: string, authCurrency?: string, businessTransaction?: string, cardHashId?: string, childCustomerHashId?: string, endDate?: string, mcc?: string, merchantCategories?: string, merchantCity?: string, merchantCountries?: string, merchantCountry?: string, merchantName?: string, order?: TransactionsOrderEnum, page?: number, paymentInstrumentHashId?: string, property?: string, settlementDate?: string, settlementStatus?: string, size?: number, startDate?: string, status?: TransactionsStatusEnum, systemReferenceNumber?: string, systemTraceAuditNumber?: string, tagKey?: string, tagValue?: string, transactionCurrency?: string, transactionType?: string, transactionsLabelsKey?: string, transactionsLabelsValue?: string, xRequestId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WalletTransactionsResponseDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.transactions(clientHashId, customerHashId, walletHashId, authCode, authCurrency, businessTransaction, cardHashId, childCustomerHashId, endDate, mcc, merchantCategories, merchantCity, merchantCountries, merchantCountry, merchantName, order, page, paymentInstrumentHashId, property, settlementDate, settlementStatus, size, startDate, status, systemReferenceNumber, systemTraceAuditNumber, tagKey, tagValue, transactionCurrency, transactionType, transactionsLabelsKey, transactionsLabelsValue, xRequestId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CustomerWalletTransactionsApi.transactions']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * This API allows you to update a flag against each transaction signifying that the transaction is a business transaction.
         * @summary Update Business Transaction Flag
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} customerHashId Unique customer identifier generated on customer creation.
         * @param {string} transactionId Transaction Id is NIUM generated 36 character UUID which is unique, per transaction.
         * @param {string} walletHashId Unique wallet identifier generated simultaneously with customer creation.
         * @param {TransactionsBusinessDTO} transactionsBusinessDTO transactionsBusinessDTO
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateBusinessTransactionFlag(clientHashId: string, customerHashId: string, transactionId: string, walletHashId: string, transactionsBusinessDTO: TransactionsBusinessDTO, xRequestId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WalletApiError>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateBusinessTransactionFlag(clientHashId, customerHashId, transactionId, walletHashId, transactionsBusinessDTO, xRequestId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CustomerWalletTransactionsApi.updateBusinessTransactionFlag']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * This API allows you to upload a receipt against each transaction.
         * @summary Upload Transaction Receipt
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} customerHashId Unique customer identifier generated on customer creation.
         * @param {string} transactionId Transaction Id is NIUM generated 36 character UUID which is unique, per transaction.
         * @param {string} walletHashId Unique wallet identifier generated simultaneously with customer creation.
         * @param {TransactionsReceiptDTO} transactionsReceiptDTO transactionReceipt
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uploadTransactionReceipt(clientHashId: string, customerHashId: string, transactionId: string, walletHashId: string, transactionsReceiptDTO: TransactionsReceiptDTO, xRequestId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WalletApiError>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.uploadTransactionReceipt(clientHashId, customerHashId, transactionId, walletHashId, transactionsReceiptDTO, xRequestId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CustomerWalletTransactionsApi.uploadTransactionReceipt']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CustomerWalletTransactionsApi - factory interface
 * @export
 */
export const CustomerWalletTransactionsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CustomerWalletTransactionsApiFp(configuration)
    return {
        /**
         * This API allows you to download a receipt against each transaction.
         * @summary Download Transaction Receipt
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} customerHashId Unique customer identifier generated on customer creation.
         * @param {string} transactionId Transaction Id is NIUM generated 36 character UUID which is unique, per transaction.
         * @param {string} walletHashId Unique wallet identifier generated simultaneously with customer creation.
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadTransactionReceipt(clientHashId: string, customerHashId: string, transactionId: string, walletHashId: string, xRequestId?: string, options?: any): AxiosPromise<TransactionsReceiptDTO> {
            return localVarFp.downloadTransactionReceipt(clientHashId, customerHashId, transactionId, walletHashId, xRequestId, options).then((request) => request(axios, basePath));
        },
        /**
         * This API allows you to add, update, and delete transaction tags.
         * @summary Manage Transaction Tags
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} customerHashId Unique customer identifier generated on customer creation.
         * @param {string} transactionId Unique transaction Identifier generated and shared before API handshake.
         * @param {string} walletHashId Unique wallet identifier generated simultaneously with customer creation.
         * @param {TransactionClientTagsRequestDTO} transactionClientTagsRequestDTO tags
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        manageTransactionTags(clientHashId: string, customerHashId: string, transactionId: string, walletHashId: string, transactionClientTagsRequestDTO: TransactionClientTagsRequestDTO, xRequestId?: string, options?: any): AxiosPromise<TransactionClientTagsResponseDTO> {
            return localVarFp.manageTransactionTags(clientHashId, customerHashId, transactionId, walletHashId, transactionClientTagsRequestDTO, xRequestId, options).then((request) => request(axios, basePath));
        },
        /**
         * This API allows you to update a transaction with merchant location.
         * @summary Transaction Geo-Tagging
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} customerHashId Unique customer identifier generated on customer creation.
         * @param {string} transactionId Transaction Id is NIUM generated 36 character UUID which is unique, per transaction.
         * @param {string} walletHashId Unique wallet identifier generated simultaneously with customer creation.
         * @param {TransactionsLocationDTO} transactionsLocationDTO transactionsLocationDTO
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionGeoTagging(clientHashId: string, customerHashId: string, transactionId: string, walletHashId: string, transactionsLocationDTO: TransactionsLocationDTO, xRequestId?: string, options?: any): AxiosPromise<WalletApiError> {
            return localVarFp.transactionGeoTagging(clientHashId, customerHashId, transactionId, walletHashId, transactionsLocationDTO, xRequestId, options).then((request) => request(axios, basePath));
        },
        /**
         * This API allows you to fetch transaction details for a customer.
         * @summary Transactions
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} customerHashId Unique customer identifier generated on customer creation.
         * @param {string} walletHashId Unique wallet identifier generated simultaneously with customer creation.
         * @param {string} [authCode] This parameter can be used to filter the transactions based on the authorization code. In case of fund wallet transactions you can provide the systemReferenceNumber as value.
         * @param {string} [authCurrency] This parameter can filter the transactions based on auth currency and accepts 3-letter [ISO-4217 transaction currency code](https://docs.nium.com/apis/docs/currency-and-country-codes).
         * @param {string} [businessTransaction] This parameter can filter the transactions based on businessTransaction flag.
         * @param {string} [cardHashId] This field can apply the filter based on the unique card identifier generated during new/add-on card issuance.
         * @param {string} [childCustomerHashId] This field contains the unique child customer identifier generated when new child customer created.
         * @param {string} [endDate] End date for fetching the transaction details. The format for endDate is YYYY-MM-DD.
         * @param {string} [mcc] This parameter can filter the transactions based on 4-digit Merchant Category Codes.
         * @param {string} [merchantCategories] This parameter describes the merchant\&#39;s type of business product or service, also known as the Merchant Category Code (MCC) such as Airlines, Restaurants etc.
         * @param {string} [merchantCity] This parameter can filter the transactions based on the merchant city field.
         * @param {string} [merchantCountries] This parameter can filter the transactions based on comma-separated list of 2-letter ISO merchant countries.
         * @param {string} [merchantCountry] This parameter can filter the transactions based on the merchant country field.
         * @param {string} [merchantName] This parameter can filter the transactions based on the merchant name field.
         * @param {TransactionsOrderEnum} [order] The sort order for the results.
         * @param {number} [page] This API may have lot of data in response and supports pagination. Entire response data is divided into pages with size as the upper limit on the number of data. Integer values from 0 onwards are acceptable. Default page is 0.
         * @param {string} [paymentInstrumentHashId] This parameter can filter the transactions based on comma-separated paymentInstrumentHashId.
         * @param {string} [property] The field indicates the response parameter used to sort paginated data, with \&#39;createdAt\&#39; as the default parameter.
         * @param {string} [settlementDate] This parameter can filter the transactions based on the settlement date of the transaction in format yyyyMMdd.
         * @param {string} [settlementStatus] This parameter can filter the transactions based on settlement status. The detailed list of possible values is available in the response of this API.
         * @param {number} [size] This will decide the number of elements per page. Typical values can be 1-20.
         * @param {string} [startDate] From date for fetching the transaction details. The format for startDate is YYYY-MM-DD.
         * @param {TransactionsStatusEnum} [status] This parameter can filter the transactions based on status. The detailed list of possible values is available in the response of this API.
         * @param {string} [systemReferenceNumber] This parameter can be used to filter the transactions based on the systemReferenceNumber.
         * @param {string} [systemTraceAuditNumber] This parameter can filter the transactions based on systemTraceAuditNumber.
         * @param {string} [tagKey] This parameter can filter the transactions, based on the exact value of tagKey defined against transactions. This can be used as an independent search parameter.
         * @param {string} [tagValue] This parameter can filter the transactions, based on the approximating value of tagValue(that may be mapped for a tagKey defined against transactions). This can be used as an independent search parameter.
         * @param {string} [transactionCurrency] This field contains the 3-letter [ISO-4217 transaction currency code](https://www.iso.org/iso-4217-currency-codes.html).
         * @param {string} [transactionType] This field contains the transaction can be one of the complete list of transactions mentioned in [Glossary of Transaction Types](https://docs.nium.com/baas/get-transactions#glossary-of-transaction-types).
         * @param {string} [transactionsLabelsKey] This parameter can filter the transactions based on transactionsLabelsKey.
         * @param {string} [transactionsLabelsValue] This parameter can filter the transactions based on transactionsLabelsValue.
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactions(clientHashId: string, customerHashId: string, walletHashId: string, authCode?: string, authCurrency?: string, businessTransaction?: string, cardHashId?: string, childCustomerHashId?: string, endDate?: string, mcc?: string, merchantCategories?: string, merchantCity?: string, merchantCountries?: string, merchantCountry?: string, merchantName?: string, order?: TransactionsOrderEnum, page?: number, paymentInstrumentHashId?: string, property?: string, settlementDate?: string, settlementStatus?: string, size?: number, startDate?: string, status?: TransactionsStatusEnum, systemReferenceNumber?: string, systemTraceAuditNumber?: string, tagKey?: string, tagValue?: string, transactionCurrency?: string, transactionType?: string, transactionsLabelsKey?: string, transactionsLabelsValue?: string, xRequestId?: string, options?: any): AxiosPromise<WalletTransactionsResponseDTO> {
            return localVarFp.transactions(clientHashId, customerHashId, walletHashId, authCode, authCurrency, businessTransaction, cardHashId, childCustomerHashId, endDate, mcc, merchantCategories, merchantCity, merchantCountries, merchantCountry, merchantName, order, page, paymentInstrumentHashId, property, settlementDate, settlementStatus, size, startDate, status, systemReferenceNumber, systemTraceAuditNumber, tagKey, tagValue, transactionCurrency, transactionType, transactionsLabelsKey, transactionsLabelsValue, xRequestId, options).then((request) => request(axios, basePath));
        },
        /**
         * This API allows you to update a flag against each transaction signifying that the transaction is a business transaction.
         * @summary Update Business Transaction Flag
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} customerHashId Unique customer identifier generated on customer creation.
         * @param {string} transactionId Transaction Id is NIUM generated 36 character UUID which is unique, per transaction.
         * @param {string} walletHashId Unique wallet identifier generated simultaneously with customer creation.
         * @param {TransactionsBusinessDTO} transactionsBusinessDTO transactionsBusinessDTO
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBusinessTransactionFlag(clientHashId: string, customerHashId: string, transactionId: string, walletHashId: string, transactionsBusinessDTO: TransactionsBusinessDTO, xRequestId?: string, options?: any): AxiosPromise<WalletApiError> {
            return localVarFp.updateBusinessTransactionFlag(clientHashId, customerHashId, transactionId, walletHashId, transactionsBusinessDTO, xRequestId, options).then((request) => request(axios, basePath));
        },
        /**
         * This API allows you to upload a receipt against each transaction.
         * @summary Upload Transaction Receipt
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} customerHashId Unique customer identifier generated on customer creation.
         * @param {string} transactionId Transaction Id is NIUM generated 36 character UUID which is unique, per transaction.
         * @param {string} walletHashId Unique wallet identifier generated simultaneously with customer creation.
         * @param {TransactionsReceiptDTO} transactionsReceiptDTO transactionReceipt
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadTransactionReceipt(clientHashId: string, customerHashId: string, transactionId: string, walletHashId: string, transactionsReceiptDTO: TransactionsReceiptDTO, xRequestId?: string, options?: any): AxiosPromise<WalletApiError> {
            return localVarFp.uploadTransactionReceipt(clientHashId, customerHashId, transactionId, walletHashId, transactionsReceiptDTO, xRequestId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CustomerWalletTransactionsApi - object-oriented interface
 * @export
 * @class CustomerWalletTransactionsApi
 * @extends {BaseAPI}
 */
export class CustomerWalletTransactionsApi extends BaseAPI {
    /**
     * This API allows you to download a receipt against each transaction.
     * @summary Download Transaction Receipt
     * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
     * @param {string} customerHashId Unique customer identifier generated on customer creation.
     * @param {string} transactionId Transaction Id is NIUM generated 36 character UUID which is unique, per transaction.
     * @param {string} walletHashId Unique wallet identifier generated simultaneously with customer creation.
     * @param {string} [xRequestId] Enter a unique UUID value
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerWalletTransactionsApi
     */
    public downloadTransactionReceipt(clientHashId: string, customerHashId: string, transactionId: string, walletHashId: string, xRequestId?: string, options?: RawAxiosRequestConfig) {
        return CustomerWalletTransactionsApiFp(this.configuration).downloadTransactionReceipt(clientHashId, customerHashId, transactionId, walletHashId, xRequestId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This API allows you to add, update, and delete transaction tags.
     * @summary Manage Transaction Tags
     * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
     * @param {string} customerHashId Unique customer identifier generated on customer creation.
     * @param {string} transactionId Unique transaction Identifier generated and shared before API handshake.
     * @param {string} walletHashId Unique wallet identifier generated simultaneously with customer creation.
     * @param {TransactionClientTagsRequestDTO} transactionClientTagsRequestDTO tags
     * @param {string} [xRequestId] Enter a unique UUID value
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerWalletTransactionsApi
     */
    public manageTransactionTags(clientHashId: string, customerHashId: string, transactionId: string, walletHashId: string, transactionClientTagsRequestDTO: TransactionClientTagsRequestDTO, xRequestId?: string, options?: RawAxiosRequestConfig) {
        return CustomerWalletTransactionsApiFp(this.configuration).manageTransactionTags(clientHashId, customerHashId, transactionId, walletHashId, transactionClientTagsRequestDTO, xRequestId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This API allows you to update a transaction with merchant location.
     * @summary Transaction Geo-Tagging
     * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
     * @param {string} customerHashId Unique customer identifier generated on customer creation.
     * @param {string} transactionId Transaction Id is NIUM generated 36 character UUID which is unique, per transaction.
     * @param {string} walletHashId Unique wallet identifier generated simultaneously with customer creation.
     * @param {TransactionsLocationDTO} transactionsLocationDTO transactionsLocationDTO
     * @param {string} [xRequestId] Enter a unique UUID value
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerWalletTransactionsApi
     */
    public transactionGeoTagging(clientHashId: string, customerHashId: string, transactionId: string, walletHashId: string, transactionsLocationDTO: TransactionsLocationDTO, xRequestId?: string, options?: RawAxiosRequestConfig) {
        return CustomerWalletTransactionsApiFp(this.configuration).transactionGeoTagging(clientHashId, customerHashId, transactionId, walletHashId, transactionsLocationDTO, xRequestId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This API allows you to fetch transaction details for a customer.
     * @summary Transactions
     * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
     * @param {string} customerHashId Unique customer identifier generated on customer creation.
     * @param {string} walletHashId Unique wallet identifier generated simultaneously with customer creation.
     * @param {string} [authCode] This parameter can be used to filter the transactions based on the authorization code. In case of fund wallet transactions you can provide the systemReferenceNumber as value.
     * @param {string} [authCurrency] This parameter can filter the transactions based on auth currency and accepts 3-letter [ISO-4217 transaction currency code](https://docs.nium.com/apis/docs/currency-and-country-codes).
     * @param {string} [businessTransaction] This parameter can filter the transactions based on businessTransaction flag.
     * @param {string} [cardHashId] This field can apply the filter based on the unique card identifier generated during new/add-on card issuance.
     * @param {string} [childCustomerHashId] This field contains the unique child customer identifier generated when new child customer created.
     * @param {string} [endDate] End date for fetching the transaction details. The format for endDate is YYYY-MM-DD.
     * @param {string} [mcc] This parameter can filter the transactions based on 4-digit Merchant Category Codes.
     * @param {string} [merchantCategories] This parameter describes the merchant\&#39;s type of business product or service, also known as the Merchant Category Code (MCC) such as Airlines, Restaurants etc.
     * @param {string} [merchantCity] This parameter can filter the transactions based on the merchant city field.
     * @param {string} [merchantCountries] This parameter can filter the transactions based on comma-separated list of 2-letter ISO merchant countries.
     * @param {string} [merchantCountry] This parameter can filter the transactions based on the merchant country field.
     * @param {string} [merchantName] This parameter can filter the transactions based on the merchant name field.
     * @param {TransactionsOrderEnum} [order] The sort order for the results.
     * @param {number} [page] This API may have lot of data in response and supports pagination. Entire response data is divided into pages with size as the upper limit on the number of data. Integer values from 0 onwards are acceptable. Default page is 0.
     * @param {string} [paymentInstrumentHashId] This parameter can filter the transactions based on comma-separated paymentInstrumentHashId.
     * @param {string} [property] The field indicates the response parameter used to sort paginated data, with \&#39;createdAt\&#39; as the default parameter.
     * @param {string} [settlementDate] This parameter can filter the transactions based on the settlement date of the transaction in format yyyyMMdd.
     * @param {string} [settlementStatus] This parameter can filter the transactions based on settlement status. The detailed list of possible values is available in the response of this API.
     * @param {number} [size] This will decide the number of elements per page. Typical values can be 1-20.
     * @param {string} [startDate] From date for fetching the transaction details. The format for startDate is YYYY-MM-DD.
     * @param {TransactionsStatusEnum} [status] This parameter can filter the transactions based on status. The detailed list of possible values is available in the response of this API.
     * @param {string} [systemReferenceNumber] This parameter can be used to filter the transactions based on the systemReferenceNumber.
     * @param {string} [systemTraceAuditNumber] This parameter can filter the transactions based on systemTraceAuditNumber.
     * @param {string} [tagKey] This parameter can filter the transactions, based on the exact value of tagKey defined against transactions. This can be used as an independent search parameter.
     * @param {string} [tagValue] This parameter can filter the transactions, based on the approximating value of tagValue(that may be mapped for a tagKey defined against transactions). This can be used as an independent search parameter.
     * @param {string} [transactionCurrency] This field contains the 3-letter [ISO-4217 transaction currency code](https://www.iso.org/iso-4217-currency-codes.html).
     * @param {string} [transactionType] This field contains the transaction can be one of the complete list of transactions mentioned in [Glossary of Transaction Types](https://docs.nium.com/baas/get-transactions#glossary-of-transaction-types).
     * @param {string} [transactionsLabelsKey] This parameter can filter the transactions based on transactionsLabelsKey.
     * @param {string} [transactionsLabelsValue] This parameter can filter the transactions based on transactionsLabelsValue.
     * @param {string} [xRequestId] Enter a unique UUID value
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerWalletTransactionsApi
     */
    public transactions(clientHashId: string, customerHashId: string, walletHashId: string, authCode?: string, authCurrency?: string, businessTransaction?: string, cardHashId?: string, childCustomerHashId?: string, endDate?: string, mcc?: string, merchantCategories?: string, merchantCity?: string, merchantCountries?: string, merchantCountry?: string, merchantName?: string, order?: TransactionsOrderEnum, page?: number, paymentInstrumentHashId?: string, property?: string, settlementDate?: string, settlementStatus?: string, size?: number, startDate?: string, status?: TransactionsStatusEnum, systemReferenceNumber?: string, systemTraceAuditNumber?: string, tagKey?: string, tagValue?: string, transactionCurrency?: string, transactionType?: string, transactionsLabelsKey?: string, transactionsLabelsValue?: string, xRequestId?: string, options?: RawAxiosRequestConfig) {
        return CustomerWalletTransactionsApiFp(this.configuration).transactions(clientHashId, customerHashId, walletHashId, authCode, authCurrency, businessTransaction, cardHashId, childCustomerHashId, endDate, mcc, merchantCategories, merchantCity, merchantCountries, merchantCountry, merchantName, order, page, paymentInstrumentHashId, property, settlementDate, settlementStatus, size, startDate, status, systemReferenceNumber, systemTraceAuditNumber, tagKey, tagValue, transactionCurrency, transactionType, transactionsLabelsKey, transactionsLabelsValue, xRequestId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This API allows you to update a flag against each transaction signifying that the transaction is a business transaction.
     * @summary Update Business Transaction Flag
     * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
     * @param {string} customerHashId Unique customer identifier generated on customer creation.
     * @param {string} transactionId Transaction Id is NIUM generated 36 character UUID which is unique, per transaction.
     * @param {string} walletHashId Unique wallet identifier generated simultaneously with customer creation.
     * @param {TransactionsBusinessDTO} transactionsBusinessDTO transactionsBusinessDTO
     * @param {string} [xRequestId] Enter a unique UUID value
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerWalletTransactionsApi
     */
    public updateBusinessTransactionFlag(clientHashId: string, customerHashId: string, transactionId: string, walletHashId: string, transactionsBusinessDTO: TransactionsBusinessDTO, xRequestId?: string, options?: RawAxiosRequestConfig) {
        return CustomerWalletTransactionsApiFp(this.configuration).updateBusinessTransactionFlag(clientHashId, customerHashId, transactionId, walletHashId, transactionsBusinessDTO, xRequestId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This API allows you to upload a receipt against each transaction.
     * @summary Upload Transaction Receipt
     * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
     * @param {string} customerHashId Unique customer identifier generated on customer creation.
     * @param {string} transactionId Transaction Id is NIUM generated 36 character UUID which is unique, per transaction.
     * @param {string} walletHashId Unique wallet identifier generated simultaneously with customer creation.
     * @param {TransactionsReceiptDTO} transactionsReceiptDTO transactionReceipt
     * @param {string} [xRequestId] Enter a unique UUID value
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerWalletTransactionsApi
     */
    public uploadTransactionReceipt(clientHashId: string, customerHashId: string, transactionId: string, walletHashId: string, transactionsReceiptDTO: TransactionsReceiptDTO, xRequestId?: string, options?: RawAxiosRequestConfig) {
        return CustomerWalletTransactionsApiFp(this.configuration).uploadTransactionReceipt(clientHashId, customerHashId, transactionId, walletHashId, transactionsReceiptDTO, xRequestId, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const TransactionsOrderEnum = {
    Asc: 'ASC',
    Desc: 'DESC'
} as const;
export type TransactionsOrderEnum = typeof TransactionsOrderEnum[keyof typeof TransactionsOrderEnum];
/**
 * @export
 */
export const TransactionsStatusEnum = {
    Null: 'NULL',
    InProgress: 'IN_PROGRESS',
    ActionRequired: 'ACTION_REQUIRED',
    RfiRequested: 'RFI_REQUESTED',
    RfiResponded: 'RFI_RESPONDED',
    Completed: 'COMPLETED',
    Error: 'ERROR',
    Reject: 'REJECT',
    Expired: 'EXPIRED'
} as const;
export type TransactionsStatusEnum = typeof TransactionsStatusEnum[keyof typeof TransactionsStatusEnum];
