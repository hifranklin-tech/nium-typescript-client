/* tslint:disable */
/* eslint-disable */
/**
 * NIUM Platform
 * NIUM Platform
 *
 * The version of the OpenAPI document: 2023.12.12
 * Contact: experience@nium.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import { ApiResponseOfTransactionChannelsResponseDTO } from '../model';
// @ts-ignore
import { ChannelActionRequestDTO } from '../model';
// @ts-ignore
import { MCCRestrictionDTO } from '../model';
// @ts-ignore
import { TransactionLimitsDTO } from '../model';
// @ts-ignore
import { TransactionWalletLimitsDTO } from '../model';
// @ts-ignore
import { WalletApiError } from '../model';
// @ts-ignore
import { WalletApiResponse2 } from '../model';
// @ts-ignore
import { WalletApiResponseOfstring } from '../model';
/**
 * ControlsApi - axios parameter creator
 * @export
 */
export const ControlsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This API allows you to fetch card limits.
         * @summary Fetch Card Limits
         * @param {string} cardHashId Unique card identifier generated while new/add-on card issuance.
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} customerHashId Unique customer identifier generated on customer creation.
         * @param {string} walletHashId Unique wallet identifier generated simultaneously with customer creation.
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCardLimits: async (cardHashId: string, clientHashId: string, customerHashId: string, walletHashId: string, xRequestId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cardHashId' is not null or undefined
            assertParamExists('getCardLimits', 'cardHashId', cardHashId)
            // verify required parameter 'clientHashId' is not null or undefined
            assertParamExists('getCardLimits', 'clientHashId', clientHashId)
            // verify required parameter 'customerHashId' is not null or undefined
            assertParamExists('getCardLimits', 'customerHashId', customerHashId)
            // verify required parameter 'walletHashId' is not null or undefined
            assertParamExists('getCardLimits', 'walletHashId', walletHashId)
            const localVarPath = `/api/v1/client/{clientHashId}/customer/{customerHashId}/wallet/{walletHashId}/card/{cardHashId}/limits`
                .replace(`{${"cardHashId"}}`, encodeURIComponent(String(cardHashId)))
                .replace(`{${"clientHashId"}}`, encodeURIComponent(String(clientHashId)))
                .replace(`{${"customerHashId"}}`, encodeURIComponent(String(customerHashId)))
                .replace(`{${"walletHashId"}}`, encodeURIComponent(String(walletHashId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication default required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (xRequestId != null) {
                localVarHeaderParameter['x-request-id'] = String(xRequestId);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This API will get the restriction set at card level for all the channels, for example, instore, online, ATM, cross border, and magnetic stripe.
         * @summary Get Channel Restriction
         * @param {string} cardHashId Unique card identifier generated while new/add-on card issuance.
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} customerHashId Unique customer identifier generated on customer creation.
         * @param {string} walletHashId Unique wallet identifier generated simultaneously with customer creation.
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChannelRestriction: async (cardHashId: string, clientHashId: string, customerHashId: string, walletHashId: string, xRequestId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cardHashId' is not null or undefined
            assertParamExists('getChannelRestriction', 'cardHashId', cardHashId)
            // verify required parameter 'clientHashId' is not null or undefined
            assertParamExists('getChannelRestriction', 'clientHashId', clientHashId)
            // verify required parameter 'customerHashId' is not null or undefined
            assertParamExists('getChannelRestriction', 'customerHashId', customerHashId)
            // verify required parameter 'walletHashId' is not null or undefined
            assertParamExists('getChannelRestriction', 'walletHashId', walletHashId)
            const localVarPath = `/api/v1/client/{clientHashId}/customer/{customerHashId}/wallet/{walletHashId}/card/{cardHashId}/channels`
                .replace(`{${"cardHashId"}}`, encodeURIComponent(String(cardHashId)))
                .replace(`{${"clientHashId"}}`, encodeURIComponent(String(clientHashId)))
                .replace(`{${"customerHashId"}}`, encodeURIComponent(String(customerHashId)))
                .replace(`{${"walletHashId"}}`, encodeURIComponent(String(walletHashId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication default required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (xRequestId != null) {
                localVarHeaderParameter['x-request-id'] = String(xRequestId);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This API allows you to fetch MCC based channel restrictions at the card level.
         * @summary Get MCC Channel Restrictions
         * @param {string} cardHashId Unique card identifier generated while new/add-on card issuance.
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} customerHashId Unique customer identifier generated on customer creation.
         * @param {string} walletHashId Unique wallet identifier generated simultaneously with customer creation.
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMCCChannelRestrictions: async (cardHashId: string, clientHashId: string, customerHashId: string, walletHashId: string, xRequestId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cardHashId' is not null or undefined
            assertParamExists('getMCCChannelRestrictions', 'cardHashId', cardHashId)
            // verify required parameter 'clientHashId' is not null or undefined
            assertParamExists('getMCCChannelRestrictions', 'clientHashId', clientHashId)
            // verify required parameter 'customerHashId' is not null or undefined
            assertParamExists('getMCCChannelRestrictions', 'customerHashId', customerHashId)
            // verify required parameter 'walletHashId' is not null or undefined
            assertParamExists('getMCCChannelRestrictions', 'walletHashId', walletHashId)
            const localVarPath = `/api/v1/client/{clientHashId}/customer/{customerHashId}/wallet/{walletHashId}/card/{cardHashId}/channels/mcc`
                .replace(`{${"cardHashId"}}`, encodeURIComponent(String(cardHashId)))
                .replace(`{${"clientHashId"}}`, encodeURIComponent(String(clientHashId)))
                .replace(`{${"customerHashId"}}`, encodeURIComponent(String(customerHashId)))
                .replace(`{${"walletHashId"}}`, encodeURIComponent(String(walletHashId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication default required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (xRequestId != null) {
                localVarHeaderParameter['x-request-id'] = String(xRequestId);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This API allows you to fetch card level limits for all cards belonging to a customer.
         * @summary Limits For All Cards For A Customer
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} customerHashId Unique customer identifier generated on customer creation.
         * @param {string} walletHashId Unique wallet identifier generated simultaneously with customer creation.
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        limitsForAllCardsForACustomer: async (clientHashId: string, customerHashId: string, walletHashId: string, xRequestId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'clientHashId' is not null or undefined
            assertParamExists('limitsForAllCardsForACustomer', 'clientHashId', clientHashId)
            // verify required parameter 'customerHashId' is not null or undefined
            assertParamExists('limitsForAllCardsForACustomer', 'customerHashId', customerHashId)
            // verify required parameter 'walletHashId' is not null or undefined
            assertParamExists('limitsForAllCardsForACustomer', 'walletHashId', walletHashId)
            const localVarPath = `/api/v1/client/{clientHashId}/customer/{customerHashId}/wallet/{walletHashId}/limits`
                .replace(`{${"clientHashId"}}`, encodeURIComponent(String(clientHashId)))
                .replace(`{${"customerHashId"}}`, encodeURIComponent(String(customerHashId)))
                .replace(`{${"walletHashId"}}`, encodeURIComponent(String(walletHashId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication default required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (xRequestId != null) {
                localVarHeaderParameter['x-request-id'] = String(xRequestId);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This API allows you to set card limits.
         * @summary Card Limits
         * @param {string} cardHashId Unique card identifier generated while new/add-on card issuance.
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} customerHashId Unique customer identifier generated on customer creation.
         * @param {string} walletHashId Unique wallet identifier generated simultaneously with customer creation.
         * @param {TransactionLimitsDTO} transactionLimitsDTO transactionLimitsDTO
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setCardLimits: async (cardHashId: string, clientHashId: string, customerHashId: string, walletHashId: string, transactionLimitsDTO: TransactionLimitsDTO, xRequestId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cardHashId' is not null or undefined
            assertParamExists('setCardLimits', 'cardHashId', cardHashId)
            // verify required parameter 'clientHashId' is not null or undefined
            assertParamExists('setCardLimits', 'clientHashId', clientHashId)
            // verify required parameter 'customerHashId' is not null or undefined
            assertParamExists('setCardLimits', 'customerHashId', customerHashId)
            // verify required parameter 'walletHashId' is not null or undefined
            assertParamExists('setCardLimits', 'walletHashId', walletHashId)
            // verify required parameter 'transactionLimitsDTO' is not null or undefined
            assertParamExists('setCardLimits', 'transactionLimitsDTO', transactionLimitsDTO)
            const localVarPath = `/api/v1/client/{clientHashId}/customer/{customerHashId}/wallet/{walletHashId}/card/{cardHashId}/limits`
                .replace(`{${"cardHashId"}}`, encodeURIComponent(String(cardHashId)))
                .replace(`{${"clientHashId"}}`, encodeURIComponent(String(clientHashId)))
                .replace(`{${"customerHashId"}}`, encodeURIComponent(String(customerHashId)))
                .replace(`{${"walletHashId"}}`, encodeURIComponent(String(walletHashId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication default required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (xRequestId != null) {
                localVarHeaderParameter['x-request-id'] = String(xRequestId);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(transactionLimitsDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This API will restrict transaction at card level for a given channel, for example, in instore, online, ATM, cross border and magnetic stripe.
         * @summary Update Channel Restriction
         * @param {string} cardHashId Unique card identifier generated while new/add-on card issuance.
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} customerHashId Unique customer identifier generated on customer creation.
         * @param {string} walletHashId Unique wallet identifier generated simultaneously with customer creation.
         * @param {ChannelActionRequestDTO} channelActionRequestDTO channelActionRequestDTO
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateChannelRestriction: async (cardHashId: string, clientHashId: string, customerHashId: string, walletHashId: string, channelActionRequestDTO: ChannelActionRequestDTO, xRequestId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cardHashId' is not null or undefined
            assertParamExists('updateChannelRestriction', 'cardHashId', cardHashId)
            // verify required parameter 'clientHashId' is not null or undefined
            assertParamExists('updateChannelRestriction', 'clientHashId', clientHashId)
            // verify required parameter 'customerHashId' is not null or undefined
            assertParamExists('updateChannelRestriction', 'customerHashId', customerHashId)
            // verify required parameter 'walletHashId' is not null or undefined
            assertParamExists('updateChannelRestriction', 'walletHashId', walletHashId)
            // verify required parameter 'channelActionRequestDTO' is not null or undefined
            assertParamExists('updateChannelRestriction', 'channelActionRequestDTO', channelActionRequestDTO)
            const localVarPath = `/api/v1/client/{clientHashId}/customer/{customerHashId}/wallet/{walletHashId}/card/{cardHashId}/channels`
                .replace(`{${"cardHashId"}}`, encodeURIComponent(String(cardHashId)))
                .replace(`{${"clientHashId"}}`, encodeURIComponent(String(clientHashId)))
                .replace(`{${"customerHashId"}}`, encodeURIComponent(String(customerHashId)))
                .replace(`{${"walletHashId"}}`, encodeURIComponent(String(walletHashId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication default required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (xRequestId != null) {
                localVarHeaderParameter['x-request-id'] = String(xRequestId);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(channelActionRequestDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This API allows you to create MCC based channel restrictions at the card level.
         * @summary Update MCC Channel Restrictions
         * @param {string} cardHashId Unique card identifier generated while new/add-on card issuance.
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} customerHashId Unique customer identifier generated on customer creation.
         * @param {string} walletHashId Unique wallet identifier generated simultaneously with customer creation.
         * @param {MCCRestrictionDTO} mCCRestrictionDTO The API will work as below: • If the status is Active and channelStrategy is WHITE_LIST, then the MCC in the list only gets processed and the rest will be blocked • If the status is Inactive then the MCC whitelist restriction will be Inactive. • If the status is Active and channelStrategy is BLACK_LIST then only the MCC in the list will get blocked and the rest will be allowed. • If the status is Inactive then the MCC blacklist restriction will be Inactive • Either blacklist or whitelist can be enabled at one point in time.
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMCCChannelRestrictions: async (cardHashId: string, clientHashId: string, customerHashId: string, walletHashId: string, mCCRestrictionDTO: MCCRestrictionDTO, xRequestId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cardHashId' is not null or undefined
            assertParamExists('updateMCCChannelRestrictions', 'cardHashId', cardHashId)
            // verify required parameter 'clientHashId' is not null or undefined
            assertParamExists('updateMCCChannelRestrictions', 'clientHashId', clientHashId)
            // verify required parameter 'customerHashId' is not null or undefined
            assertParamExists('updateMCCChannelRestrictions', 'customerHashId', customerHashId)
            // verify required parameter 'walletHashId' is not null or undefined
            assertParamExists('updateMCCChannelRestrictions', 'walletHashId', walletHashId)
            // verify required parameter 'mCCRestrictionDTO' is not null or undefined
            assertParamExists('updateMCCChannelRestrictions', 'mCCRestrictionDTO', mCCRestrictionDTO)
            const localVarPath = `/api/v1/client/{clientHashId}/customer/{customerHashId}/wallet/{walletHashId}/card/{cardHashId}/channels/mcc`
                .replace(`{${"cardHashId"}}`, encodeURIComponent(String(cardHashId)))
                .replace(`{${"clientHashId"}}`, encodeURIComponent(String(clientHashId)))
                .replace(`{${"customerHashId"}}`, encodeURIComponent(String(customerHashId)))
                .replace(`{${"walletHashId"}}`, encodeURIComponent(String(walletHashId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication default required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (xRequestId != null) {
                localVarHeaderParameter['x-request-id'] = String(xRequestId);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(mCCRestrictionDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ControlsApi - functional programming interface
 * @export
 */
export const ControlsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ControlsApiAxiosParamCreator(configuration)
    return {
        /**
         * This API allows you to fetch card limits.
         * @summary Fetch Card Limits
         * @param {string} cardHashId Unique card identifier generated while new/add-on card issuance.
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} customerHashId Unique customer identifier generated on customer creation.
         * @param {string} walletHashId Unique wallet identifier generated simultaneously with customer creation.
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCardLimits(cardHashId: string, clientHashId: string, customerHashId: string, walletHashId: string, xRequestId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TransactionLimitsDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCardLimits(cardHashId, clientHashId, customerHashId, walletHashId, xRequestId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ControlsApi.getCardLimits']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * This API will get the restriction set at card level for all the channels, for example, instore, online, ATM, cross border, and magnetic stripe.
         * @summary Get Channel Restriction
         * @param {string} cardHashId Unique card identifier generated while new/add-on card issuance.
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} customerHashId Unique customer identifier generated on customer creation.
         * @param {string} walletHashId Unique wallet identifier generated simultaneously with customer creation.
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getChannelRestriction(cardHashId: string, clientHashId: string, customerHashId: string, walletHashId: string, xRequestId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseOfTransactionChannelsResponseDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getChannelRestriction(cardHashId, clientHashId, customerHashId, walletHashId, xRequestId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ControlsApi.getChannelRestriction']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * This API allows you to fetch MCC based channel restrictions at the card level.
         * @summary Get MCC Channel Restrictions
         * @param {string} cardHashId Unique card identifier generated while new/add-on card issuance.
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} customerHashId Unique customer identifier generated on customer creation.
         * @param {string} walletHashId Unique wallet identifier generated simultaneously with customer creation.
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMCCChannelRestrictions(cardHashId: string, clientHashId: string, customerHashId: string, walletHashId: string, xRequestId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MCCRestrictionDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMCCChannelRestrictions(cardHashId, clientHashId, customerHashId, walletHashId, xRequestId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ControlsApi.getMCCChannelRestrictions']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * This API allows you to fetch card level limits for all cards belonging to a customer.
         * @summary Limits For All Cards For A Customer
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} customerHashId Unique customer identifier generated on customer creation.
         * @param {string} walletHashId Unique wallet identifier generated simultaneously with customer creation.
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async limitsForAllCardsForACustomer(clientHashId: string, customerHashId: string, walletHashId: string, xRequestId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TransactionWalletLimitsDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.limitsForAllCardsForACustomer(clientHashId, customerHashId, walletHashId, xRequestId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ControlsApi.limitsForAllCardsForACustomer']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * This API allows you to set card limits.
         * @summary Card Limits
         * @param {string} cardHashId Unique card identifier generated while new/add-on card issuance.
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} customerHashId Unique customer identifier generated on customer creation.
         * @param {string} walletHashId Unique wallet identifier generated simultaneously with customer creation.
         * @param {TransactionLimitsDTO} transactionLimitsDTO transactionLimitsDTO
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setCardLimits(cardHashId: string, clientHashId: string, customerHashId: string, walletHashId: string, transactionLimitsDTO: TransactionLimitsDTO, xRequestId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WalletApiResponse2>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.setCardLimits(cardHashId, clientHashId, customerHashId, walletHashId, transactionLimitsDTO, xRequestId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ControlsApi.setCardLimits']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * This API will restrict transaction at card level for a given channel, for example, in instore, online, ATM, cross border and magnetic stripe.
         * @summary Update Channel Restriction
         * @param {string} cardHashId Unique card identifier generated while new/add-on card issuance.
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} customerHashId Unique customer identifier generated on customer creation.
         * @param {string} walletHashId Unique wallet identifier generated simultaneously with customer creation.
         * @param {ChannelActionRequestDTO} channelActionRequestDTO channelActionRequestDTO
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateChannelRestriction(cardHashId: string, clientHashId: string, customerHashId: string, walletHashId: string, channelActionRequestDTO: ChannelActionRequestDTO, xRequestId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WalletApiResponseOfstring>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateChannelRestriction(cardHashId, clientHashId, customerHashId, walletHashId, channelActionRequestDTO, xRequestId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ControlsApi.updateChannelRestriction']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * This API allows you to create MCC based channel restrictions at the card level.
         * @summary Update MCC Channel Restrictions
         * @param {string} cardHashId Unique card identifier generated while new/add-on card issuance.
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} customerHashId Unique customer identifier generated on customer creation.
         * @param {string} walletHashId Unique wallet identifier generated simultaneously with customer creation.
         * @param {MCCRestrictionDTO} mCCRestrictionDTO The API will work as below: • If the status is Active and channelStrategy is WHITE_LIST, then the MCC in the list only gets processed and the rest will be blocked • If the status is Inactive then the MCC whitelist restriction will be Inactive. • If the status is Active and channelStrategy is BLACK_LIST then only the MCC in the list will get blocked and the rest will be allowed. • If the status is Inactive then the MCC blacklist restriction will be Inactive • Either blacklist or whitelist can be enabled at one point in time.
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateMCCChannelRestrictions(cardHashId: string, clientHashId: string, customerHashId: string, walletHashId: string, mCCRestrictionDTO: MCCRestrictionDTO, xRequestId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WalletApiResponse2>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateMCCChannelRestrictions(cardHashId, clientHashId, customerHashId, walletHashId, mCCRestrictionDTO, xRequestId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ControlsApi.updateMCCChannelRestrictions']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ControlsApi - factory interface
 * @export
 */
export const ControlsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ControlsApiFp(configuration)
    return {
        /**
         * This API allows you to fetch card limits.
         * @summary Fetch Card Limits
         * @param {string} cardHashId Unique card identifier generated while new/add-on card issuance.
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} customerHashId Unique customer identifier generated on customer creation.
         * @param {string} walletHashId Unique wallet identifier generated simultaneously with customer creation.
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCardLimits(cardHashId: string, clientHashId: string, customerHashId: string, walletHashId: string, xRequestId?: string, options?: any): AxiosPromise<TransactionLimitsDTO> {
            return localVarFp.getCardLimits(cardHashId, clientHashId, customerHashId, walletHashId, xRequestId, options).then((request) => request(axios, basePath));
        },
        /**
         * This API will get the restriction set at card level for all the channels, for example, instore, online, ATM, cross border, and magnetic stripe.
         * @summary Get Channel Restriction
         * @param {string} cardHashId Unique card identifier generated while new/add-on card issuance.
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} customerHashId Unique customer identifier generated on customer creation.
         * @param {string} walletHashId Unique wallet identifier generated simultaneously with customer creation.
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChannelRestriction(cardHashId: string, clientHashId: string, customerHashId: string, walletHashId: string, xRequestId?: string, options?: any): AxiosPromise<ApiResponseOfTransactionChannelsResponseDTO> {
            return localVarFp.getChannelRestriction(cardHashId, clientHashId, customerHashId, walletHashId, xRequestId, options).then((request) => request(axios, basePath));
        },
        /**
         * This API allows you to fetch MCC based channel restrictions at the card level.
         * @summary Get MCC Channel Restrictions
         * @param {string} cardHashId Unique card identifier generated while new/add-on card issuance.
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} customerHashId Unique customer identifier generated on customer creation.
         * @param {string} walletHashId Unique wallet identifier generated simultaneously with customer creation.
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMCCChannelRestrictions(cardHashId: string, clientHashId: string, customerHashId: string, walletHashId: string, xRequestId?: string, options?: any): AxiosPromise<MCCRestrictionDTO> {
            return localVarFp.getMCCChannelRestrictions(cardHashId, clientHashId, customerHashId, walletHashId, xRequestId, options).then((request) => request(axios, basePath));
        },
        /**
         * This API allows you to fetch card level limits for all cards belonging to a customer.
         * @summary Limits For All Cards For A Customer
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} customerHashId Unique customer identifier generated on customer creation.
         * @param {string} walletHashId Unique wallet identifier generated simultaneously with customer creation.
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        limitsForAllCardsForACustomer(clientHashId: string, customerHashId: string, walletHashId: string, xRequestId?: string, options?: any): AxiosPromise<TransactionWalletLimitsDTO> {
            return localVarFp.limitsForAllCardsForACustomer(clientHashId, customerHashId, walletHashId, xRequestId, options).then((request) => request(axios, basePath));
        },
        /**
         * This API allows you to set card limits.
         * @summary Card Limits
         * @param {string} cardHashId Unique card identifier generated while new/add-on card issuance.
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} customerHashId Unique customer identifier generated on customer creation.
         * @param {string} walletHashId Unique wallet identifier generated simultaneously with customer creation.
         * @param {TransactionLimitsDTO} transactionLimitsDTO transactionLimitsDTO
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setCardLimits(cardHashId: string, clientHashId: string, customerHashId: string, walletHashId: string, transactionLimitsDTO: TransactionLimitsDTO, xRequestId?: string, options?: any): AxiosPromise<WalletApiResponse2> {
            return localVarFp.setCardLimits(cardHashId, clientHashId, customerHashId, walletHashId, transactionLimitsDTO, xRequestId, options).then((request) => request(axios, basePath));
        },
        /**
         * This API will restrict transaction at card level for a given channel, for example, in instore, online, ATM, cross border and magnetic stripe.
         * @summary Update Channel Restriction
         * @param {string} cardHashId Unique card identifier generated while new/add-on card issuance.
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} customerHashId Unique customer identifier generated on customer creation.
         * @param {string} walletHashId Unique wallet identifier generated simultaneously with customer creation.
         * @param {ChannelActionRequestDTO} channelActionRequestDTO channelActionRequestDTO
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateChannelRestriction(cardHashId: string, clientHashId: string, customerHashId: string, walletHashId: string, channelActionRequestDTO: ChannelActionRequestDTO, xRequestId?: string, options?: any): AxiosPromise<WalletApiResponseOfstring> {
            return localVarFp.updateChannelRestriction(cardHashId, clientHashId, customerHashId, walletHashId, channelActionRequestDTO, xRequestId, options).then((request) => request(axios, basePath));
        },
        /**
         * This API allows you to create MCC based channel restrictions at the card level.
         * @summary Update MCC Channel Restrictions
         * @param {string} cardHashId Unique card identifier generated while new/add-on card issuance.
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} customerHashId Unique customer identifier generated on customer creation.
         * @param {string} walletHashId Unique wallet identifier generated simultaneously with customer creation.
         * @param {MCCRestrictionDTO} mCCRestrictionDTO The API will work as below: • If the status is Active and channelStrategy is WHITE_LIST, then the MCC in the list only gets processed and the rest will be blocked • If the status is Inactive then the MCC whitelist restriction will be Inactive. • If the status is Active and channelStrategy is BLACK_LIST then only the MCC in the list will get blocked and the rest will be allowed. • If the status is Inactive then the MCC blacklist restriction will be Inactive • Either blacklist or whitelist can be enabled at one point in time.
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMCCChannelRestrictions(cardHashId: string, clientHashId: string, customerHashId: string, walletHashId: string, mCCRestrictionDTO: MCCRestrictionDTO, xRequestId?: string, options?: any): AxiosPromise<WalletApiResponse2> {
            return localVarFp.updateMCCChannelRestrictions(cardHashId, clientHashId, customerHashId, walletHashId, mCCRestrictionDTO, xRequestId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ControlsApi - object-oriented interface
 * @export
 * @class ControlsApi
 * @extends {BaseAPI}
 */
export class ControlsApi extends BaseAPI {
    /**
     * This API allows you to fetch card limits.
     * @summary Fetch Card Limits
     * @param {string} cardHashId Unique card identifier generated while new/add-on card issuance.
     * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
     * @param {string} customerHashId Unique customer identifier generated on customer creation.
     * @param {string} walletHashId Unique wallet identifier generated simultaneously with customer creation.
     * @param {string} [xRequestId] Enter a unique UUID value
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControlsApi
     */
    public getCardLimits(cardHashId: string, clientHashId: string, customerHashId: string, walletHashId: string, xRequestId?: string, options?: RawAxiosRequestConfig) {
        return ControlsApiFp(this.configuration).getCardLimits(cardHashId, clientHashId, customerHashId, walletHashId, xRequestId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This API will get the restriction set at card level for all the channels, for example, instore, online, ATM, cross border, and magnetic stripe.
     * @summary Get Channel Restriction
     * @param {string} cardHashId Unique card identifier generated while new/add-on card issuance.
     * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
     * @param {string} customerHashId Unique customer identifier generated on customer creation.
     * @param {string} walletHashId Unique wallet identifier generated simultaneously with customer creation.
     * @param {string} [xRequestId] Enter a unique UUID value
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControlsApi
     */
    public getChannelRestriction(cardHashId: string, clientHashId: string, customerHashId: string, walletHashId: string, xRequestId?: string, options?: RawAxiosRequestConfig) {
        return ControlsApiFp(this.configuration).getChannelRestriction(cardHashId, clientHashId, customerHashId, walletHashId, xRequestId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This API allows you to fetch MCC based channel restrictions at the card level.
     * @summary Get MCC Channel Restrictions
     * @param {string} cardHashId Unique card identifier generated while new/add-on card issuance.
     * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
     * @param {string} customerHashId Unique customer identifier generated on customer creation.
     * @param {string} walletHashId Unique wallet identifier generated simultaneously with customer creation.
     * @param {string} [xRequestId] Enter a unique UUID value
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControlsApi
     */
    public getMCCChannelRestrictions(cardHashId: string, clientHashId: string, customerHashId: string, walletHashId: string, xRequestId?: string, options?: RawAxiosRequestConfig) {
        return ControlsApiFp(this.configuration).getMCCChannelRestrictions(cardHashId, clientHashId, customerHashId, walletHashId, xRequestId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This API allows you to fetch card level limits for all cards belonging to a customer.
     * @summary Limits For All Cards For A Customer
     * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
     * @param {string} customerHashId Unique customer identifier generated on customer creation.
     * @param {string} walletHashId Unique wallet identifier generated simultaneously with customer creation.
     * @param {string} [xRequestId] Enter a unique UUID value
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControlsApi
     */
    public limitsForAllCardsForACustomer(clientHashId: string, customerHashId: string, walletHashId: string, xRequestId?: string, options?: RawAxiosRequestConfig) {
        return ControlsApiFp(this.configuration).limitsForAllCardsForACustomer(clientHashId, customerHashId, walletHashId, xRequestId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This API allows you to set card limits.
     * @summary Card Limits
     * @param {string} cardHashId Unique card identifier generated while new/add-on card issuance.
     * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
     * @param {string} customerHashId Unique customer identifier generated on customer creation.
     * @param {string} walletHashId Unique wallet identifier generated simultaneously with customer creation.
     * @param {TransactionLimitsDTO} transactionLimitsDTO transactionLimitsDTO
     * @param {string} [xRequestId] Enter a unique UUID value
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControlsApi
     */
    public setCardLimits(cardHashId: string, clientHashId: string, customerHashId: string, walletHashId: string, transactionLimitsDTO: TransactionLimitsDTO, xRequestId?: string, options?: RawAxiosRequestConfig) {
        return ControlsApiFp(this.configuration).setCardLimits(cardHashId, clientHashId, customerHashId, walletHashId, transactionLimitsDTO, xRequestId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This API will restrict transaction at card level for a given channel, for example, in instore, online, ATM, cross border and magnetic stripe.
     * @summary Update Channel Restriction
     * @param {string} cardHashId Unique card identifier generated while new/add-on card issuance.
     * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
     * @param {string} customerHashId Unique customer identifier generated on customer creation.
     * @param {string} walletHashId Unique wallet identifier generated simultaneously with customer creation.
     * @param {ChannelActionRequestDTO} channelActionRequestDTO channelActionRequestDTO
     * @param {string} [xRequestId] Enter a unique UUID value
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControlsApi
     */
    public updateChannelRestriction(cardHashId: string, clientHashId: string, customerHashId: string, walletHashId: string, channelActionRequestDTO: ChannelActionRequestDTO, xRequestId?: string, options?: RawAxiosRequestConfig) {
        return ControlsApiFp(this.configuration).updateChannelRestriction(cardHashId, clientHashId, customerHashId, walletHashId, channelActionRequestDTO, xRequestId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This API allows you to create MCC based channel restrictions at the card level.
     * @summary Update MCC Channel Restrictions
     * @param {string} cardHashId Unique card identifier generated while new/add-on card issuance.
     * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
     * @param {string} customerHashId Unique customer identifier generated on customer creation.
     * @param {string} walletHashId Unique wallet identifier generated simultaneously with customer creation.
     * @param {MCCRestrictionDTO} mCCRestrictionDTO The API will work as below: • If the status is Active and channelStrategy is WHITE_LIST, then the MCC in the list only gets processed and the rest will be blocked • If the status is Inactive then the MCC whitelist restriction will be Inactive. • If the status is Active and channelStrategy is BLACK_LIST then only the MCC in the list will get blocked and the rest will be allowed. • If the status is Inactive then the MCC blacklist restriction will be Inactive • Either blacklist or whitelist can be enabled at one point in time.
     * @param {string} [xRequestId] Enter a unique UUID value
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControlsApi
     */
    public updateMCCChannelRestrictions(cardHashId: string, clientHashId: string, customerHashId: string, walletHashId: string, mCCRestrictionDTO: MCCRestrictionDTO, xRequestId?: string, options?: RawAxiosRequestConfig) {
        return ControlsApiFp(this.configuration).updateMCCChannelRestrictions(cardHashId, clientHashId, customerHashId, walletHashId, mCCRestrictionDTO, xRequestId, options).then((request) => request(this.axios, this.basePath));
    }
}

