/* tslint:disable */
/* eslint-disable */
/**
 * NIUM Platform
 * NIUM Platform
 *
 * The version of the OpenAPI document: 2023.12.12
 * Contact: experience@nium.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import { ApiError } from '../model';
// @ts-ignore
import { CvvResponseDTO } from '../model';
// @ts-ignore
import { FetchPinResponseDTO } from '../model';
// @ts-ignore
import { FetchPinStatusResponseDTO } from '../model';
// @ts-ignore
import { PinUpdateRequestDTO } from '../model';
// @ts-ignore
import { PinUpdateResponseDTO } from '../model';
// @ts-ignore
import { RetrieveCardDetailsResponseDTO } from '../model';
// @ts-ignore
import { UnmaskCardResponseDTO } from '../model';
/**
 * SecurityApi - axios parameter creator
 * @export
 */
export const SecurityApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This API allows you to fetch the base-64 encoded ATM PIN for physical cards and virtual upgrade to physical in the production environment. This API does not work for virtual cards. This is allowed only for the EU and UK cards.
         * @summary Fetch ATM Pin
         * @param {string} clientHashId The unique client identifier generated and shared before the API handshake.
         * @param {string} customerHashId The unique customer identifier generated on customer creation.
         * @param {string} walletHashId The unique wallet identifier generated simultaneously with customer creation.
         * @param {string} cardHashId The unique card identifier generated while new/add-on card issuance.
         * @param {string} [xRequestId] Enter a unique UUID value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchATMPin: async (clientHashId: string, customerHashId: string, walletHashId: string, cardHashId: string, xRequestId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'clientHashId' is not null or undefined
            assertParamExists('fetchATMPin', 'clientHashId', clientHashId)
            // verify required parameter 'customerHashId' is not null or undefined
            assertParamExists('fetchATMPin', 'customerHashId', customerHashId)
            // verify required parameter 'walletHashId' is not null or undefined
            assertParamExists('fetchATMPin', 'walletHashId', walletHashId)
            // verify required parameter 'cardHashId' is not null or undefined
            assertParamExists('fetchATMPin', 'cardHashId', cardHashId)
            const localVarPath = `/api/v1/client/{clientHashId}/customer/{customerHashId}/wallet/{walletHashId}/card/{cardHashId}/pin`
                .replace(`{${"clientHashId"}}`, encodeURIComponent(String(clientHashId)))
                .replace(`{${"customerHashId"}}`, encodeURIComponent(String(customerHashId)))
                .replace(`{${"walletHashId"}}`, encodeURIComponent(String(walletHashId)))
                .replace(`{${"cardHashId"}}`, encodeURIComponent(String(cardHashId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication default required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (xRequestId != null) {
                localVarHeaderParameter['x-request-id'] = String(xRequestId);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This API allows you to fetch the base-64 encoded CVV2 and expiry for a card.   >⚠️ WARNING   >This API version is deprecated. Eventually, a deprecated API version becomes unsupported. [Fetch Card Data Encrypted](ref:fetchcarddataencryptedv2) is the latest version of this API.
         * @summary Fetch CVV2
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} customerHashId Unique customer identifier generated on customer creation.
         * @param {string} walletHashId Unique wallet identifier generated simultaneously with customer creation.
         * @param {string} cardHashId Unique card identifier generated while new/add-on card issuance.
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchCVV2: async (clientHashId: string, customerHashId: string, walletHashId: string, cardHashId: string, xRequestId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'clientHashId' is not null or undefined
            assertParamExists('fetchCVV2', 'clientHashId', clientHashId)
            // verify required parameter 'customerHashId' is not null or undefined
            assertParamExists('fetchCVV2', 'customerHashId', customerHashId)
            // verify required parameter 'walletHashId' is not null or undefined
            assertParamExists('fetchCVV2', 'walletHashId', walletHashId)
            // verify required parameter 'cardHashId' is not null or undefined
            assertParamExists('fetchCVV2', 'cardHashId', cardHashId)
            const localVarPath = `/api/v1/client/{clientHashId}/customer/{customerHashId}/wallet/{walletHashId}/card/{cardHashId}/cvv`
                .replace(`{${"clientHashId"}}`, encodeURIComponent(String(clientHashId)))
                .replace(`{${"customerHashId"}}`, encodeURIComponent(String(customerHashId)))
                .replace(`{${"walletHashId"}}`, encodeURIComponent(String(walletHashId)))
                .replace(`{${"cardHashId"}}`, encodeURIComponent(String(cardHashId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication default required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (xRequestId != null) {
                localVarHeaderParameter['x-request-id'] = String(xRequestId);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This API allows you to fetch the unmasked card number, CVV2 and expiry (encrypted) for a card
         * @summary Fetch card data encrypted
         * @param {string} clientHashId The unique client identifier generated and shared before the API handshake.
         * @param {string} customerHashId The unique customer identifier generated on customer creation.
         * @param {string} walletHashId The unique wallet identifier generated simultaneously with customer creation.
         * @param {string} cardHashId The unique card identifier generated while new/add-on card issuance.
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchCardDataEncryptedV2: async (clientHashId: string, customerHashId: string, walletHashId: string, cardHashId: string, xRequestId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'clientHashId' is not null or undefined
            assertParamExists('fetchCardDataEncryptedV2', 'clientHashId', clientHashId)
            // verify required parameter 'customerHashId' is not null or undefined
            assertParamExists('fetchCardDataEncryptedV2', 'customerHashId', customerHashId)
            // verify required parameter 'walletHashId' is not null or undefined
            assertParamExists('fetchCardDataEncryptedV2', 'walletHashId', walletHashId)
            // verify required parameter 'cardHashId' is not null or undefined
            assertParamExists('fetchCardDataEncryptedV2', 'cardHashId', cardHashId)
            const localVarPath = `/api/v2/client/{clientHashId}/customer/{customerHashId}/wallet/{walletHashId}/card/{cardHashId}/retrieve`
                .replace(`{${"clientHashId"}}`, encodeURIComponent(String(clientHashId)))
                .replace(`{${"customerHashId"}}`, encodeURIComponent(String(customerHashId)))
                .replace(`{${"walletHashId"}}`, encodeURIComponent(String(walletHashId)))
                .replace(`{${"cardHashId"}}`, encodeURIComponent(String(cardHashId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication default required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (xRequestId != null) {
                localVarHeaderParameter['x-request-id'] = String(xRequestId);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This API allows you to fetch the PIN status of an active card.
         * @summary Fetch Pin Status
         * @param {string} clientHashId The unique client identifier generated and shared before the API handshake.
         * @param {string} customerHashId The unique customer identifier generated on customer creation.
         * @param {string} walletHashId The unique wallet identifier generated simultaneously with customer creation.
         * @param {string} cardHashId The unique card identifier generated while new/add-on card issuance.
         * @param {string} [xRequestId] Enter a unique UUID value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchPinStatus: async (clientHashId: string, customerHashId: string, walletHashId: string, cardHashId: string, xRequestId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'clientHashId' is not null or undefined
            assertParamExists('fetchPinStatus', 'clientHashId', clientHashId)
            // verify required parameter 'customerHashId' is not null or undefined
            assertParamExists('fetchPinStatus', 'customerHashId', customerHashId)
            // verify required parameter 'walletHashId' is not null or undefined
            assertParamExists('fetchPinStatus', 'walletHashId', walletHashId)
            // verify required parameter 'cardHashId' is not null or undefined
            assertParamExists('fetchPinStatus', 'cardHashId', cardHashId)
            const localVarPath = `/api/v1/client/{clientHashId}/customer/{customerHashId}/wallet/{walletHashId}/card/{cardHashId}/pin/status`
                .replace(`{${"clientHashId"}}`, encodeURIComponent(String(clientHashId)))
                .replace(`{${"customerHashId"}}`, encodeURIComponent(String(customerHashId)))
                .replace(`{${"walletHashId"}}`, encodeURIComponent(String(walletHashId)))
                .replace(`{${"cardHashId"}}`, encodeURIComponent(String(cardHashId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication default required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (xRequestId != null) {
                localVarHeaderParameter['x-request-id'] = String(xRequestId);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This API allows you to set a new PIN or change the PIN for a card in the production environment. This API only applies to a physical card or a virtual card upgraded to a physical card. This is allowed only for cards issued in APAC, not for EU/UK cards.
         * @summary Set/Reset PIN
         * @param {string} clientHashId The unique client identifier generated and shared before the API handshake.
         * @param {string} customerHashId The unique customer identifier generated on customer creation.
         * @param {string} walletHashId The unique wallet identifier generated simultaneously with customer creation.
         * @param {string} cardHashId The unique card identifier generated while new/add-on card issuance.
         * @param {PinUpdateRequestDTO} pinUpdateRequestDTO pinUpdate
         * @param {string} [xRequestId] Enter a unique UUID value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setResetPIN: async (clientHashId: string, customerHashId: string, walletHashId: string, cardHashId: string, pinUpdateRequestDTO: PinUpdateRequestDTO, xRequestId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'clientHashId' is not null or undefined
            assertParamExists('setResetPIN', 'clientHashId', clientHashId)
            // verify required parameter 'customerHashId' is not null or undefined
            assertParamExists('setResetPIN', 'customerHashId', customerHashId)
            // verify required parameter 'walletHashId' is not null or undefined
            assertParamExists('setResetPIN', 'walletHashId', walletHashId)
            // verify required parameter 'cardHashId' is not null or undefined
            assertParamExists('setResetPIN', 'cardHashId', cardHashId)
            // verify required parameter 'pinUpdateRequestDTO' is not null or undefined
            assertParamExists('setResetPIN', 'pinUpdateRequestDTO', pinUpdateRequestDTO)
            const localVarPath = `/api/v1/client/{clientHashId}/customer/{customerHashId}/wallet/{walletHashId}/card/{cardHashId}/pin`
                .replace(`{${"clientHashId"}}`, encodeURIComponent(String(clientHashId)))
                .replace(`{${"customerHashId"}}`, encodeURIComponent(String(customerHashId)))
                .replace(`{${"walletHashId"}}`, encodeURIComponent(String(walletHashId)))
                .replace(`{${"cardHashId"}}`, encodeURIComponent(String(cardHashId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication default required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (xRequestId != null) {
                localVarHeaderParameter['x-request-id'] = String(xRequestId);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(pinUpdateRequestDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This API allows you to unblock PIN and reset retry count for a card. This API is only applicable for the APAC region.
         * @summary Unblock PIN
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} customerHashId Unique customer identifier generated on customer creation.
         * @param {string} walletHashId Unique wallet identifier generated simultaneously with customer creation.
         * @param {string} cardHashId Unique card identifier generated while new/add-on card issuance.
         * @param {string} [xRequestId] Please enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unblockCardPIN: async (clientHashId: string, customerHashId: string, walletHashId: string, cardHashId: string, xRequestId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'clientHashId' is not null or undefined
            assertParamExists('unblockCardPIN', 'clientHashId', clientHashId)
            // verify required parameter 'customerHashId' is not null or undefined
            assertParamExists('unblockCardPIN', 'customerHashId', customerHashId)
            // verify required parameter 'walletHashId' is not null or undefined
            assertParamExists('unblockCardPIN', 'walletHashId', walletHashId)
            // verify required parameter 'cardHashId' is not null or undefined
            assertParamExists('unblockCardPIN', 'cardHashId', cardHashId)
            const localVarPath = `/api/v1/client/{clientHashId}/customer/{customerHashId}/wallet/{walletHashId}/card/{cardHashId}/pin/unblock`
                .replace(`{${"clientHashId"}}`, encodeURIComponent(String(clientHashId)))
                .replace(`{${"customerHashId"}}`, encodeURIComponent(String(customerHashId)))
                .replace(`{${"walletHashId"}}`, encodeURIComponent(String(walletHashId)))
                .replace(`{${"cardHashId"}}`, encodeURIComponent(String(cardHashId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication default required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (xRequestId != null) {
                localVarHeaderParameter['x-request-id'] = String(xRequestId);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This API allows you to unmask a card number before using it for an e-commerce transaction.   >⚠️ WARNING   >This API version is deprecated. Eventually, a deprecated API version becomes unsupported. [Fetch Card Data Encrypted](ref:fetchcarddataencryptedv2) is the latest version of this API.
         * @summary Unmask Card
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} customerHashId Unique customer identifier generated on customer creation.
         * @param {string} walletHashId Unique wallet identifier generated simultaneously with customer creation.
         * @param {string} cardHashId Unique card identifier generated while new/add-on card issuance.
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unmaskCard: async (clientHashId: string, customerHashId: string, walletHashId: string, cardHashId: string, xRequestId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'clientHashId' is not null or undefined
            assertParamExists('unmaskCard', 'clientHashId', clientHashId)
            // verify required parameter 'customerHashId' is not null or undefined
            assertParamExists('unmaskCard', 'customerHashId', customerHashId)
            // verify required parameter 'walletHashId' is not null or undefined
            assertParamExists('unmaskCard', 'walletHashId', walletHashId)
            // verify required parameter 'cardHashId' is not null or undefined
            assertParamExists('unmaskCard', 'cardHashId', cardHashId)
            const localVarPath = `/api/v1/client/{clientHashId}/customer/{customerHashId}/wallet/{walletHashId}/card/{cardHashId}/unmask`
                .replace(`{${"clientHashId"}}`, encodeURIComponent(String(clientHashId)))
                .replace(`{${"customerHashId"}}`, encodeURIComponent(String(customerHashId)))
                .replace(`{${"walletHashId"}}`, encodeURIComponent(String(walletHashId)))
                .replace(`{${"cardHashId"}}`, encodeURIComponent(String(cardHashId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication default required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (xRequestId != null) {
                localVarHeaderParameter['x-request-id'] = String(xRequestId);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SecurityApi - functional programming interface
 * @export
 */
export const SecurityApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SecurityApiAxiosParamCreator(configuration)
    return {
        /**
         * This API allows you to fetch the base-64 encoded ATM PIN for physical cards and virtual upgrade to physical in the production environment. This API does not work for virtual cards. This is allowed only for the EU and UK cards.
         * @summary Fetch ATM Pin
         * @param {string} clientHashId The unique client identifier generated and shared before the API handshake.
         * @param {string} customerHashId The unique customer identifier generated on customer creation.
         * @param {string} walletHashId The unique wallet identifier generated simultaneously with customer creation.
         * @param {string} cardHashId The unique card identifier generated while new/add-on card issuance.
         * @param {string} [xRequestId] Enter a unique UUID value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchATMPin(clientHashId: string, customerHashId: string, walletHashId: string, cardHashId: string, xRequestId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FetchPinResponseDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchATMPin(clientHashId, customerHashId, walletHashId, cardHashId, xRequestId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SecurityApi.fetchATMPin']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * This API allows you to fetch the base-64 encoded CVV2 and expiry for a card.   >⚠️ WARNING   >This API version is deprecated. Eventually, a deprecated API version becomes unsupported. [Fetch Card Data Encrypted](ref:fetchcarddataencryptedv2) is the latest version of this API.
         * @summary Fetch CVV2
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} customerHashId Unique customer identifier generated on customer creation.
         * @param {string} walletHashId Unique wallet identifier generated simultaneously with customer creation.
         * @param {string} cardHashId Unique card identifier generated while new/add-on card issuance.
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchCVV2(clientHashId: string, customerHashId: string, walletHashId: string, cardHashId: string, xRequestId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CvvResponseDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchCVV2(clientHashId, customerHashId, walletHashId, cardHashId, xRequestId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SecurityApi.fetchCVV2']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * This API allows you to fetch the unmasked card number, CVV2 and expiry (encrypted) for a card
         * @summary Fetch card data encrypted
         * @param {string} clientHashId The unique client identifier generated and shared before the API handshake.
         * @param {string} customerHashId The unique customer identifier generated on customer creation.
         * @param {string} walletHashId The unique wallet identifier generated simultaneously with customer creation.
         * @param {string} cardHashId The unique card identifier generated while new/add-on card issuance.
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchCardDataEncryptedV2(clientHashId: string, customerHashId: string, walletHashId: string, cardHashId: string, xRequestId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RetrieveCardDetailsResponseDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchCardDataEncryptedV2(clientHashId, customerHashId, walletHashId, cardHashId, xRequestId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SecurityApi.fetchCardDataEncryptedV2']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * This API allows you to fetch the PIN status of an active card.
         * @summary Fetch Pin Status
         * @param {string} clientHashId The unique client identifier generated and shared before the API handshake.
         * @param {string} customerHashId The unique customer identifier generated on customer creation.
         * @param {string} walletHashId The unique wallet identifier generated simultaneously with customer creation.
         * @param {string} cardHashId The unique card identifier generated while new/add-on card issuance.
         * @param {string} [xRequestId] Enter a unique UUID value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchPinStatus(clientHashId: string, customerHashId: string, walletHashId: string, cardHashId: string, xRequestId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FetchPinStatusResponseDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchPinStatus(clientHashId, customerHashId, walletHashId, cardHashId, xRequestId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SecurityApi.fetchPinStatus']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * This API allows you to set a new PIN or change the PIN for a card in the production environment. This API only applies to a physical card or a virtual card upgraded to a physical card. This is allowed only for cards issued in APAC, not for EU/UK cards.
         * @summary Set/Reset PIN
         * @param {string} clientHashId The unique client identifier generated and shared before the API handshake.
         * @param {string} customerHashId The unique customer identifier generated on customer creation.
         * @param {string} walletHashId The unique wallet identifier generated simultaneously with customer creation.
         * @param {string} cardHashId The unique card identifier generated while new/add-on card issuance.
         * @param {PinUpdateRequestDTO} pinUpdateRequestDTO pinUpdate
         * @param {string} [xRequestId] Enter a unique UUID value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setResetPIN(clientHashId: string, customerHashId: string, walletHashId: string, cardHashId: string, pinUpdateRequestDTO: PinUpdateRequestDTO, xRequestId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PinUpdateResponseDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.setResetPIN(clientHashId, customerHashId, walletHashId, cardHashId, pinUpdateRequestDTO, xRequestId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SecurityApi.setResetPIN']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * This API allows you to unblock PIN and reset retry count for a card. This API is only applicable for the APAC region.
         * @summary Unblock PIN
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} customerHashId Unique customer identifier generated on customer creation.
         * @param {string} walletHashId Unique wallet identifier generated simultaneously with customer creation.
         * @param {string} cardHashId Unique card identifier generated while new/add-on card issuance.
         * @param {string} [xRequestId] Please enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async unblockCardPIN(clientHashId: string, customerHashId: string, walletHashId: string, cardHashId: string, xRequestId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PinUpdateResponseDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.unblockCardPIN(clientHashId, customerHashId, walletHashId, cardHashId, xRequestId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SecurityApi.unblockCardPIN']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * This API allows you to unmask a card number before using it for an e-commerce transaction.   >⚠️ WARNING   >This API version is deprecated. Eventually, a deprecated API version becomes unsupported. [Fetch Card Data Encrypted](ref:fetchcarddataencryptedv2) is the latest version of this API.
         * @summary Unmask Card
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} customerHashId Unique customer identifier generated on customer creation.
         * @param {string} walletHashId Unique wallet identifier generated simultaneously with customer creation.
         * @param {string} cardHashId Unique card identifier generated while new/add-on card issuance.
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async unmaskCard(clientHashId: string, customerHashId: string, walletHashId: string, cardHashId: string, xRequestId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UnmaskCardResponseDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.unmaskCard(clientHashId, customerHashId, walletHashId, cardHashId, xRequestId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SecurityApi.unmaskCard']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SecurityApi - factory interface
 * @export
 */
export const SecurityApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SecurityApiFp(configuration)
    return {
        /**
         * This API allows you to fetch the base-64 encoded ATM PIN for physical cards and virtual upgrade to physical in the production environment. This API does not work for virtual cards. This is allowed only for the EU and UK cards.
         * @summary Fetch ATM Pin
         * @param {string} clientHashId The unique client identifier generated and shared before the API handshake.
         * @param {string} customerHashId The unique customer identifier generated on customer creation.
         * @param {string} walletHashId The unique wallet identifier generated simultaneously with customer creation.
         * @param {string} cardHashId The unique card identifier generated while new/add-on card issuance.
         * @param {string} [xRequestId] Enter a unique UUID value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchATMPin(clientHashId: string, customerHashId: string, walletHashId: string, cardHashId: string, xRequestId?: string, options?: any): AxiosPromise<FetchPinResponseDTO> {
            return localVarFp.fetchATMPin(clientHashId, customerHashId, walletHashId, cardHashId, xRequestId, options).then((request) => request(axios, basePath));
        },
        /**
         * This API allows you to fetch the base-64 encoded CVV2 and expiry for a card.   >⚠️ WARNING   >This API version is deprecated. Eventually, a deprecated API version becomes unsupported. [Fetch Card Data Encrypted](ref:fetchcarddataencryptedv2) is the latest version of this API.
         * @summary Fetch CVV2
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} customerHashId Unique customer identifier generated on customer creation.
         * @param {string} walletHashId Unique wallet identifier generated simultaneously with customer creation.
         * @param {string} cardHashId Unique card identifier generated while new/add-on card issuance.
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchCVV2(clientHashId: string, customerHashId: string, walletHashId: string, cardHashId: string, xRequestId?: string, options?: any): AxiosPromise<CvvResponseDTO> {
            return localVarFp.fetchCVV2(clientHashId, customerHashId, walletHashId, cardHashId, xRequestId, options).then((request) => request(axios, basePath));
        },
        /**
         * This API allows you to fetch the unmasked card number, CVV2 and expiry (encrypted) for a card
         * @summary Fetch card data encrypted
         * @param {string} clientHashId The unique client identifier generated and shared before the API handshake.
         * @param {string} customerHashId The unique customer identifier generated on customer creation.
         * @param {string} walletHashId The unique wallet identifier generated simultaneously with customer creation.
         * @param {string} cardHashId The unique card identifier generated while new/add-on card issuance.
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchCardDataEncryptedV2(clientHashId: string, customerHashId: string, walletHashId: string, cardHashId: string, xRequestId?: string, options?: any): AxiosPromise<RetrieveCardDetailsResponseDTO> {
            return localVarFp.fetchCardDataEncryptedV2(clientHashId, customerHashId, walletHashId, cardHashId, xRequestId, options).then((request) => request(axios, basePath));
        },
        /**
         * This API allows you to fetch the PIN status of an active card.
         * @summary Fetch Pin Status
         * @param {string} clientHashId The unique client identifier generated and shared before the API handshake.
         * @param {string} customerHashId The unique customer identifier generated on customer creation.
         * @param {string} walletHashId The unique wallet identifier generated simultaneously with customer creation.
         * @param {string} cardHashId The unique card identifier generated while new/add-on card issuance.
         * @param {string} [xRequestId] Enter a unique UUID value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchPinStatus(clientHashId: string, customerHashId: string, walletHashId: string, cardHashId: string, xRequestId?: string, options?: any): AxiosPromise<FetchPinStatusResponseDTO> {
            return localVarFp.fetchPinStatus(clientHashId, customerHashId, walletHashId, cardHashId, xRequestId, options).then((request) => request(axios, basePath));
        },
        /**
         * This API allows you to set a new PIN or change the PIN for a card in the production environment. This API only applies to a physical card or a virtual card upgraded to a physical card. This is allowed only for cards issued in APAC, not for EU/UK cards.
         * @summary Set/Reset PIN
         * @param {string} clientHashId The unique client identifier generated and shared before the API handshake.
         * @param {string} customerHashId The unique customer identifier generated on customer creation.
         * @param {string} walletHashId The unique wallet identifier generated simultaneously with customer creation.
         * @param {string} cardHashId The unique card identifier generated while new/add-on card issuance.
         * @param {PinUpdateRequestDTO} pinUpdateRequestDTO pinUpdate
         * @param {string} [xRequestId] Enter a unique UUID value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setResetPIN(clientHashId: string, customerHashId: string, walletHashId: string, cardHashId: string, pinUpdateRequestDTO: PinUpdateRequestDTO, xRequestId?: string, options?: any): AxiosPromise<PinUpdateResponseDTO> {
            return localVarFp.setResetPIN(clientHashId, customerHashId, walletHashId, cardHashId, pinUpdateRequestDTO, xRequestId, options).then((request) => request(axios, basePath));
        },
        /**
         * This API allows you to unblock PIN and reset retry count for a card. This API is only applicable for the APAC region.
         * @summary Unblock PIN
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} customerHashId Unique customer identifier generated on customer creation.
         * @param {string} walletHashId Unique wallet identifier generated simultaneously with customer creation.
         * @param {string} cardHashId Unique card identifier generated while new/add-on card issuance.
         * @param {string} [xRequestId] Please enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unblockCardPIN(clientHashId: string, customerHashId: string, walletHashId: string, cardHashId: string, xRequestId?: string, options?: any): AxiosPromise<PinUpdateResponseDTO> {
            return localVarFp.unblockCardPIN(clientHashId, customerHashId, walletHashId, cardHashId, xRequestId, options).then((request) => request(axios, basePath));
        },
        /**
         * This API allows you to unmask a card number before using it for an e-commerce transaction.   >⚠️ WARNING   >This API version is deprecated. Eventually, a deprecated API version becomes unsupported. [Fetch Card Data Encrypted](ref:fetchcarddataencryptedv2) is the latest version of this API.
         * @summary Unmask Card
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} customerHashId Unique customer identifier generated on customer creation.
         * @param {string} walletHashId Unique wallet identifier generated simultaneously with customer creation.
         * @param {string} cardHashId Unique card identifier generated while new/add-on card issuance.
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unmaskCard(clientHashId: string, customerHashId: string, walletHashId: string, cardHashId: string, xRequestId?: string, options?: any): AxiosPromise<UnmaskCardResponseDTO> {
            return localVarFp.unmaskCard(clientHashId, customerHashId, walletHashId, cardHashId, xRequestId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SecurityApi - object-oriented interface
 * @export
 * @class SecurityApi
 * @extends {BaseAPI}
 */
export class SecurityApi extends BaseAPI {
    /**
     * This API allows you to fetch the base-64 encoded ATM PIN for physical cards and virtual upgrade to physical in the production environment. This API does not work for virtual cards. This is allowed only for the EU and UK cards.
     * @summary Fetch ATM Pin
     * @param {string} clientHashId The unique client identifier generated and shared before the API handshake.
     * @param {string} customerHashId The unique customer identifier generated on customer creation.
     * @param {string} walletHashId The unique wallet identifier generated simultaneously with customer creation.
     * @param {string} cardHashId The unique card identifier generated while new/add-on card issuance.
     * @param {string} [xRequestId] Enter a unique UUID value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecurityApi
     */
    public fetchATMPin(clientHashId: string, customerHashId: string, walletHashId: string, cardHashId: string, xRequestId?: string, options?: RawAxiosRequestConfig) {
        return SecurityApiFp(this.configuration).fetchATMPin(clientHashId, customerHashId, walletHashId, cardHashId, xRequestId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This API allows you to fetch the base-64 encoded CVV2 and expiry for a card.   >⚠️ WARNING   >This API version is deprecated. Eventually, a deprecated API version becomes unsupported. [Fetch Card Data Encrypted](ref:fetchcarddataencryptedv2) is the latest version of this API.
     * @summary Fetch CVV2
     * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
     * @param {string} customerHashId Unique customer identifier generated on customer creation.
     * @param {string} walletHashId Unique wallet identifier generated simultaneously with customer creation.
     * @param {string} cardHashId Unique card identifier generated while new/add-on card issuance.
     * @param {string} [xRequestId] Enter a unique UUID value
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecurityApi
     */
    public fetchCVV2(clientHashId: string, customerHashId: string, walletHashId: string, cardHashId: string, xRequestId?: string, options?: RawAxiosRequestConfig) {
        return SecurityApiFp(this.configuration).fetchCVV2(clientHashId, customerHashId, walletHashId, cardHashId, xRequestId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This API allows you to fetch the unmasked card number, CVV2 and expiry (encrypted) for a card
     * @summary Fetch card data encrypted
     * @param {string} clientHashId The unique client identifier generated and shared before the API handshake.
     * @param {string} customerHashId The unique customer identifier generated on customer creation.
     * @param {string} walletHashId The unique wallet identifier generated simultaneously with customer creation.
     * @param {string} cardHashId The unique card identifier generated while new/add-on card issuance.
     * @param {string} [xRequestId] Enter a unique UUID value
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecurityApi
     */
    public fetchCardDataEncryptedV2(clientHashId: string, customerHashId: string, walletHashId: string, cardHashId: string, xRequestId?: string, options?: RawAxiosRequestConfig) {
        return SecurityApiFp(this.configuration).fetchCardDataEncryptedV2(clientHashId, customerHashId, walletHashId, cardHashId, xRequestId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This API allows you to fetch the PIN status of an active card.
     * @summary Fetch Pin Status
     * @param {string} clientHashId The unique client identifier generated and shared before the API handshake.
     * @param {string} customerHashId The unique customer identifier generated on customer creation.
     * @param {string} walletHashId The unique wallet identifier generated simultaneously with customer creation.
     * @param {string} cardHashId The unique card identifier generated while new/add-on card issuance.
     * @param {string} [xRequestId] Enter a unique UUID value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecurityApi
     */
    public fetchPinStatus(clientHashId: string, customerHashId: string, walletHashId: string, cardHashId: string, xRequestId?: string, options?: RawAxiosRequestConfig) {
        return SecurityApiFp(this.configuration).fetchPinStatus(clientHashId, customerHashId, walletHashId, cardHashId, xRequestId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This API allows you to set a new PIN or change the PIN for a card in the production environment. This API only applies to a physical card or a virtual card upgraded to a physical card. This is allowed only for cards issued in APAC, not for EU/UK cards.
     * @summary Set/Reset PIN
     * @param {string} clientHashId The unique client identifier generated and shared before the API handshake.
     * @param {string} customerHashId The unique customer identifier generated on customer creation.
     * @param {string} walletHashId The unique wallet identifier generated simultaneously with customer creation.
     * @param {string} cardHashId The unique card identifier generated while new/add-on card issuance.
     * @param {PinUpdateRequestDTO} pinUpdateRequestDTO pinUpdate
     * @param {string} [xRequestId] Enter a unique UUID value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecurityApi
     */
    public setResetPIN(clientHashId: string, customerHashId: string, walletHashId: string, cardHashId: string, pinUpdateRequestDTO: PinUpdateRequestDTO, xRequestId?: string, options?: RawAxiosRequestConfig) {
        return SecurityApiFp(this.configuration).setResetPIN(clientHashId, customerHashId, walletHashId, cardHashId, pinUpdateRequestDTO, xRequestId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This API allows you to unblock PIN and reset retry count for a card. This API is only applicable for the APAC region.
     * @summary Unblock PIN
     * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
     * @param {string} customerHashId Unique customer identifier generated on customer creation.
     * @param {string} walletHashId Unique wallet identifier generated simultaneously with customer creation.
     * @param {string} cardHashId Unique card identifier generated while new/add-on card issuance.
     * @param {string} [xRequestId] Please enter a unique UUID value
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecurityApi
     */
    public unblockCardPIN(clientHashId: string, customerHashId: string, walletHashId: string, cardHashId: string, xRequestId?: string, options?: RawAxiosRequestConfig) {
        return SecurityApiFp(this.configuration).unblockCardPIN(clientHashId, customerHashId, walletHashId, cardHashId, xRequestId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This API allows you to unmask a card number before using it for an e-commerce transaction.   >⚠️ WARNING   >This API version is deprecated. Eventually, a deprecated API version becomes unsupported. [Fetch Card Data Encrypted](ref:fetchcarddataencryptedv2) is the latest version of this API.
     * @summary Unmask Card
     * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
     * @param {string} customerHashId Unique customer identifier generated on customer creation.
     * @param {string} walletHashId Unique wallet identifier generated simultaneously with customer creation.
     * @param {string} cardHashId Unique card identifier generated while new/add-on card issuance.
     * @param {string} [xRequestId] Enter a unique UUID value
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecurityApi
     */
    public unmaskCard(clientHashId: string, customerHashId: string, walletHashId: string, cardHashId: string, xRequestId?: string, options?: RawAxiosRequestConfig) {
        return SecurityApiFp(this.configuration).unmaskCard(clientHashId, customerHashId, walletHashId, cardHashId, xRequestId, options).then((request) => request(this.axios, this.basePath));
    }
}

