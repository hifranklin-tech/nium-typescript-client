/* tslint:disable */
/* eslint-disable */
/**
 * NIUM Platform
 * NIUM Platform
 *
 * The version of the OpenAPI document: 2023.12.12
 * Contact: experience@nium.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import { WalletTransferDto } from '../model';
// @ts-ignore
import { WalletTransferResponseDto } from '../model';
/**
 * ConversionsPreviousVersionApi - axios parameter creator
 * @export
 */
export const ConversionsPreviousVersionApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This API allows you to transfer the balance from one currency to another within the same customer wallet.
         * @summary Balance Transfer within Wallet
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} customerHashId Unique customer identifier generated on customer creation.
         * @param {string} walletHashId Unique wallet identifier generated simultaneously with customer creation.
         * @param {WalletTransferDto} walletTransferDto 
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        balanceTransferwithinWallet: async (clientHashId: string, customerHashId: string, walletHashId: string, walletTransferDto: WalletTransferDto, xRequestId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'clientHashId' is not null or undefined
            assertParamExists('balanceTransferwithinWallet', 'clientHashId', clientHashId)
            // verify required parameter 'customerHashId' is not null or undefined
            assertParamExists('balanceTransferwithinWallet', 'customerHashId', customerHashId)
            // verify required parameter 'walletHashId' is not null or undefined
            assertParamExists('balanceTransferwithinWallet', 'walletHashId', walletHashId)
            // verify required parameter 'walletTransferDto' is not null or undefined
            assertParamExists('balanceTransferwithinWallet', 'walletTransferDto', walletTransferDto)
            const localVarPath = `/api/v1/client/{clientHashId}/customer/{customerHashId}/wallet/{walletHashId}/transfer`
                .replace(`{${"clientHashId"}}`, encodeURIComponent(String(clientHashId)))
                .replace(`{${"customerHashId"}}`, encodeURIComponent(String(customerHashId)))
                .replace(`{${"walletHashId"}}`, encodeURIComponent(String(walletHashId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication default required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (xRequestId != null) {
                localVarHeaderParameter['x-request-id'] = String(xRequestId);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(walletTransferDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ConversionsPreviousVersionApi - functional programming interface
 * @export
 */
export const ConversionsPreviousVersionApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ConversionsPreviousVersionApiAxiosParamCreator(configuration)
    return {
        /**
         * This API allows you to transfer the balance from one currency to another within the same customer wallet.
         * @summary Balance Transfer within Wallet
         * @param {string} clientHashId Unique client identifier generated and shared before API handshake.
         * @param {string} customerHashId Unique customer identifier generated on customer creation.
         * @param {string} walletHashId Unique wallet identifier generated simultaneously with customer creation.
         * @param {WalletTransferDto} walletTransferDto 
         * @param {string} [xRequestId] Enter a unique UUID value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async balanceTransferwithinWallet(clientHashId: string, customerHashId: string, walletHashId: string, walletTransferDto: WalletTransferDto, xRequestId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WalletTransferResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.balanceTransferwithinWallet(clientHashId, customerHashId, walletHashId, walletTransferDto, xRequestId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ConversionsPreviousVersionApi.balanceTransferwithinWallet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ConversionsPreviousVersionApi - factory interface
 * @export
 */
export const ConversionsPreviousVersionApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ConversionsPreviousVersionApiFp(configuration)
    return {
        /**
         * This API allows you to transfer the balance from one currency to another within the same customer wallet.
         * @summary Balance Transfer within Wallet
         * @param {ConversionsPreviousVersionApiBalanceTransferwithinWalletRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        balanceTransferwithinWallet(requestParameters: ConversionsPreviousVersionApiBalanceTransferwithinWalletRequest, options?: RawAxiosRequestConfig): AxiosPromise<WalletTransferResponseDto> {
            return localVarFp.balanceTransferwithinWallet(requestParameters.clientHashId, requestParameters.customerHashId, requestParameters.walletHashId, requestParameters.walletTransferDto, requestParameters.xRequestId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for balanceTransferwithinWallet operation in ConversionsPreviousVersionApi.
 * @export
 * @interface ConversionsPreviousVersionApiBalanceTransferwithinWalletRequest
 */
export interface ConversionsPreviousVersionApiBalanceTransferwithinWalletRequest {
    /**
     * Unique client identifier generated and shared before API handshake.
     * @type {string}
     * @memberof ConversionsPreviousVersionApiBalanceTransferwithinWallet
     */
    readonly clientHashId: string

    /**
     * Unique customer identifier generated on customer creation.
     * @type {string}
     * @memberof ConversionsPreviousVersionApiBalanceTransferwithinWallet
     */
    readonly customerHashId: string

    /**
     * Unique wallet identifier generated simultaneously with customer creation.
     * @type {string}
     * @memberof ConversionsPreviousVersionApiBalanceTransferwithinWallet
     */
    readonly walletHashId: string

    /**
     * 
     * @type {WalletTransferDto}
     * @memberof ConversionsPreviousVersionApiBalanceTransferwithinWallet
     */
    readonly walletTransferDto: WalletTransferDto

    /**
     * Enter a unique UUID value
     * @type {string}
     * @memberof ConversionsPreviousVersionApiBalanceTransferwithinWallet
     */
    readonly xRequestId?: string
}

/**
 * ConversionsPreviousVersionApi - object-oriented interface
 * @export
 * @class ConversionsPreviousVersionApi
 * @extends {BaseAPI}
 */
export class ConversionsPreviousVersionApi extends BaseAPI {
    /**
     * This API allows you to transfer the balance from one currency to another within the same customer wallet.
     * @summary Balance Transfer within Wallet
     * @param {ConversionsPreviousVersionApiBalanceTransferwithinWalletRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversionsPreviousVersionApi
     */
    public balanceTransferwithinWallet(requestParameters: ConversionsPreviousVersionApiBalanceTransferwithinWalletRequest, options?: RawAxiosRequestConfig) {
        return ConversionsPreviousVersionApiFp(this.configuration).balanceTransferwithinWallet(requestParameters.clientHashId, requestParameters.customerHashId, requestParameters.walletHashId, requestParameters.walletTransferDto, requestParameters.xRequestId, options).then((request) => request(this.axios, this.basePath));
    }
}

