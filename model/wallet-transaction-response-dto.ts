/* tslint:disable */
/* eslint-disable */
/**
 * NIUM Platform
 * NIUM Platform
 *
 * The version of the OpenAPI document: 2024.8.20
 * Contact: experience@nium.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


// May contain unused imports in some cases
// @ts-ignore
import type { WalletTransactionRfiDetailsResponse } from './wallet-transaction-rfi-details-response';

/**
 * 
 * @export
 * @interface WalletTransactionResponseDTO
 */
export interface WalletTransactionResponseDTO {
    /**
     * Contains the user defined key-value pairs provided by the client.
     * @type {{ [key: string]: string; }}
     * @memberof WalletTransactionResponseDTO
     */
    'tags'?: { [key: string]: string; };
    /**
     * The country code of the acquirer.
     * @type {string}
     * @memberof WalletTransactionResponseDTO
     */
    'acquirerCountryCode'?: string;
    /**
     * The acquiring institution code that identifies the financial institution acting as the acquirer of the transaction.
     * @type {string}
     * @memberof WalletTransactionResponseDTO
     */
    'acquiringInstitutionCode'?: string;
    /**
     * The authorization amount of the transaction.
     * @type {number}
     * @memberof WalletTransactionResponseDTO
     */
    'authAmount'?: number;
    /**
     * The authorization code of the transaction.
     * @type {string}
     * @memberof WalletTransactionResponseDTO
     */
    'authCode'?: string;
    /**
     * The 3-letter [ISO-4217 currency code](doc:currency-and-country-codes) of the auth currency, the currency in which amount is deducted from wallet.
     * @type {string}
     * @memberof WalletTransactionResponseDTO
     */
    'authCurrencyCode'?: string;
    /**
     * The equivalent transaction amount in base currency.
     * @type {number}
     * @memberof WalletTransactionResponseDTO
     */
    'billingAmount'?: number;
    /**
     * The conversion rate of transaction currency to billing currency; included with all card transactions.
     * @type {string}
     * @memberof WalletTransactionResponseDTO
     */
    'billingConversionRate'?: string;
    /**
     * The 3-letter [ISO-4217 currency code](doc:currency-and-country-codes) for the billing currency or base currency.
     * @type {string}
     * @memberof WalletTransactionResponseDTO
     */
    'billingCurrencyCode'?: string;
    /**
     * The corrected amount of a transaction in a partial reversal. This is defined by ISO-8583 as a fixed length field with four subfields, but only the first subfield is used. A 12 position field for the corrected, billing amount of a customer\'s transaction, in the billing currency. The field is right justified, with lead zero fill.
     * @type {number}
     * @memberof WalletTransactionResponseDTO
     */
    'billingReplacementAmount'?: number;
    /**
     * Mark or unmark a transaction as a business transaction.
     * @type {boolean}
     * @memberof WalletTransactionResponseDTO
     */
    'businessTransaction'?: boolean;
    /**
     * The unique card identifier generated while new/add-on card issuance.
     * @type {string}
     * @memberof WalletTransactionResponseDTO
     */
    'cardHashID'?: string;
    /**
     * The amount of a card transaction.
     * @type {number}
     * @memberof WalletTransactionResponseDTO
     */
    'cardTransactionAmount'?: number;
    /**
     * This field refers to a unique identifier, known as customerHashId, assigned to an individual customer who is associated with a corporate customer at the parent level. This ID helps distinguish and track the child-level customer within a given client\'s program. Using this ID, you can link the child customer and their parent corporate customer, ensuring accurate management of customer data.
     * @type {string}
     * @memberof WalletTransactionResponseDTO
     */
    'childCustomerHashId'?: string;
    /**
     * Unique client identifier generated and shared before API handshake.
     * @type {string}
     * @memberof WalletTransactionResponseDTO
     */
    'clientHashId'?: string;
    /**
     * Auto-generated comments with details on the transactions such as the reason for a decline.
     * @type {string}
     * @memberof WalletTransactionResponseDTO
     */
    'comments'?: string;
    /**
     * This field contains the compliance status of the transaction. Available values include: NULL IN_PROGRESS ACTION_REQUIRED RFI_REQUESTED RFI_RESPONDED COMPLETED ERROR REJECT EXPIRED
     * @type {string}
     * @memberof WalletTransactionResponseDTO
     */
    'complianceStatus'?: WalletTransactionResponseDTOComplianceStatusEnum;
    /**
     * The date and time of when the transaction was created in UTC.
     * @type {string}
     * @memberof WalletTransactionResponseDTO
     */
    'createdAt'?: string;
    /**
     * This field will be deprecated in the future.
     * @type {number}
     * @memberof WalletTransactionResponseDTO
     */
    'currentWithHoldingBalance'?: number;
    /**
     * Unique customer identifier generated on customer creation.
     * @type {string}
     * @memberof WalletTransactionResponseDTO
     */
    'customerHashId'?: string;
    /**
     * The date when the transaction occurred in yyyy-MM-dd format.
     * @type {string}
     * @memberof WalletTransactionResponseDTO
     */
    'dateOfTransaction'?: string;
    /**
     * Details if the transaction is a debit transaction.
     * @type {boolean}
     * @memberof WalletTransactionResponseDTO
     */
    'debit'?: boolean;
    /**
     * The effective authorization amount which includes fees, markup, etc.
     * @type {number}
     * @memberof WalletTransactionResponseDTO
     */
    'effectiveAuthAmount'?: number;
    /**
     * This object will contain different key-value pairs depending on the type of transaction. This object contains different labels based on the type of transaction. The list will change over time depending on different use-cases. For more information, see [Glossary of Labels](/apis/docs/transaction-response-labels).
     * @type {{ [key: string]: string; }}
     * @memberof WalletTransactionResponseDTO
     */
    'labels'?: { [key: string]: string; };
    /**
     * The local date of the transaction.
     * @type {string}
     * @memberof WalletTransactionResponseDTO
     */
    'localDate'?: string;
    /**
     * The local time of the transaction.
     * @type {string}
     * @memberof WalletTransactionResponseDTO
     */
    'localTime'?: string;
    /**
     * The 16-digit masked card number in format 1234-56xx-xxxx-3456.
     * @type {string}
     * @memberof WalletTransactionResponseDTO
     */
    'maskedCardNumber'?: string;
    /**
     * The four-digit Merchant Category Code.
     * @type {string}
     * @memberof WalletTransactionResponseDTO
     */
    'mcc'?: string;
    /**
     * The merchant category such as Airlines, Hotels, Shopping, etc.
     * @type {string}
     * @memberof WalletTransactionResponseDTO
     */
    'merchantCategory'?: string;
    /**
     * The name of the merchant\'s city.
     * @type {string}
     * @memberof WalletTransactionResponseDTO
     */
    'merchantCity'?: string;
    /**
     * The country of the merchant.
     * @type {string}
     * @memberof WalletTransactionResponseDTO
     */
    'merchantCountry'?: string;
    /**
     * The unique merchant identifier.
     * @type {string}
     * @memberof WalletTransactionResponseDTO
     */
    'merchantID'?: string;
    /**
     * The latitude of the merchant captured during geo-tagging.
     * @type {string}
     * @memberof WalletTransactionResponseDTO
     */
    'merchantLatitude'?: string;
    /**
     * The longitude of the merchant captured during geo-tagging.
     * @type {string}
     * @memberof WalletTransactionResponseDTO
     */
    'merchantLongitude'?: string;
    /**
     * The name of the merchant.
     * @type {string}
     * @memberof WalletTransactionResponseDTO
     */
    'merchantName'?: string;
    /**
     * The full name of the merchant and location data as received from network.
     * @type {string}
     * @memberof WalletTransactionResponseDTO
     */
    'merchantNameLocation'?: string;
    /**
     * The tagged name of the merchant.
     * @type {string}
     * @memberof WalletTransactionResponseDTO
     */
    'merchantTaggedName'?: string;
    /**
     * The merchant map zoom index.
     * @type {string}
     * @memberof WalletTransactionResponseDTO
     */
    'merchantZoomIndex'?: string;
    /**
     * The authorization code of the original transaction in case of reversal.
     * @type {string}
     * @memberof WalletTransactionResponseDTO
     */
    'originalAuthorizationCode'?: string;
    /**
     * This field contains the identifier provided by an RHA client in response to an authorization.
     * @type {string}
     * @memberof WalletTransactionResponseDTO
     */
    'partnerReferenceNumber'?: string;
    /**
     * The unique payment instrument identifier generated for the linked card.
     * @type {string}
     * @memberof WalletTransactionResponseDTO
     */
    'paymentInstrumentHashId'?: string;
    /**
     * The pos condition code that describes how the transaction took place at the point of service. 00 - Normal transaction 01 - Cardholder not present 03 - Merchant suspicious 08 - Mail/telephone order 51 - Account Verification Message(AVM) 55 - ICC Capable Branch ATM 59 - Electronic Commerce 90 - Recurring Payment
     * @type {string}
     * @memberof WalletTransactionResponseDTO
     */
    'posConditionCode'?: string;
    /**
     * Provides details about the terminal used at the point of service. Types of terminal field values include: 0 - Unspecified 2 - Unattended terminal(customer-operated) 4 - Electronic cash register 7 - Telephone device 8 - MCAS device 9 - Mobile acceptance solution(mPOS) Capability of terminal field values include: 0 - Unspecified 1 - Terminal not used 2 - Magnetic stripe read capability 3 - Bar code read capability 4 - OCR read capability 5 - Integrated circuit card read capability 9 - Terminal does not read card data 
     * @type {string}
     * @memberof WalletTransactionResponseDTO
     */
    'posEntryCapabilityCode'?: string;
    /**
     * This field contains the pos entry code that identifies the actual method used to capture the account number and expiration date, and the PIN capture capability of the terminal. This is a fixed‑length field with three subfields: 1. Positions 1‑2 - PAN and Date Entry Mode: This is a two‑digit code that identifies the actual method used at the point of service to enter the cardholder account number and card expiry date. 00 - Unknown 01 - Keyed transaction 02 - Magnetic stripe read 05 - Chip was read at the terminal 07 - Contactless 90 - Magnetic stripe read and transmitted unaltered 91 - Contactless - Magnetic stripe data (MSD) transmitted 2. Position 3 - PIN Entry Capability: This is a one‑digit code that identifies the capability of the authorization terminal, if one was used, to capture PINs. This coding does not necessarily mean that a PIN was entered or is included in this message: 0 - Unknown 1 - Terminal can accept PINs 2 - Terminal cannot accept PINs 3 - mPOS terminal can accept software-based PINs (Mastercard only) 3. Position 4 - Unused(filler): This is one digit of filler, which must be zero. 
     * @type {string}
     * @memberof WalletTransactionResponseDTO
     */
    'posEntryMode'?: string;
    /**
     * The previous balance in the wallet.
     * @type {number}
     * @memberof WalletTransactionResponseDTO
     */
    'previousBalance'?: number;
    /**
     * The processing code is a 6 character Visa field. Refer to the [link](https://en.wikipedia.org/wiki/ISO_8583#Processing_code) for more details on the processing code.
     * @type {string}
     * @memberof WalletTransactionResponseDTO
     */
    'processingCode'?: string;
    /**
     * The name of the receipt file.
     * @type {string}
     * @memberof WalletTransactionResponseDTO
     */
    'receiptFileName'?: string;
    /**
     * The receipt type.Expected values are as follows:  image/png image/jpg image/jpeg application/pdf
     * @type {string}
     * @memberof WalletTransactionResponseDTO
     */
    'receiptType'?: string;
    /**
     * The 12 digit number that is used with other data elements as a key to identify and track all messages related to a given customer transaction.
     * @type {string}
     * @memberof WalletTransactionResponseDTO
     */
    'retrievalReferenceNumber'?: string;
    /**
     * An array that holds RFI details.
     * @type {Array<WalletTransactionRfiDetailsResponse>}
     * @memberof WalletTransactionResponseDTO
     */
    'rfiDetails'?: Array<WalletTransactionRfiDetailsResponse>;
    /**
     * The transaction Id for an RHA client.
     * @type {string}
     * @memberof WalletTransactionResponseDTO
     */
    'rhaTransactionId'?: string;
    /**
     * The settlement amount of the transaction. This amount is valid only for a settled transaction.
     * @type {number}
     * @memberof WalletTransactionResponseDTO
     */
    'settlementAmount'?: number;
    /**
     * The settlement authorization amount of a transaction. This amount is valid only for a settled transaction.
     * @type {number}
     * @memberof WalletTransactionResponseDTO
     */
    'settlementAuthAmount'?: number;
    /**
     * 
     * @type {number}
     * @memberof WalletTransactionResponseDTO
     */
    'settlementBillingAmount'?: number;
    /**
     * 
     * @type {string}
     * @memberof WalletTransactionResponseDTO
     */
    'settlementCurrency'?: string;
    /**
     * The settlement date in case of a Settled transaction. Otherwise, returns null.
     * @type {string}
     * @memberof WalletTransactionResponseDTO
     */
    'settlementDate'?: string;
    /**
     * The settlement status. Available vlues include: Unsettled Settled  Released Disputed DisputeClosed Waived
     * @type {string}
     * @memberof WalletTransactionResponseDTO
     */
    'settlementStatus'?: WalletTransactionResponseDTOSettlementStatusEnum;
    /**
     * 
     * @type {number}
     * @memberof WalletTransactionResponseDTO
     */
    'settlementTransactionAmount'?: number;
    /**
     * The status of the transaction. Available values include: Pending: Transaction authorization is awaiting success or failure. Approved: Transaction is successfully authorized. Rejected: Transaction is rejected due to NIUM risk and compliance policies. Declined: Transaction is declined. Reversal: Transaction is reversed. Blocked: Transaction is blocked
     * @type {string}
     * @memberof WalletTransactionResponseDTO
     */
    'status'?: WalletTransactionResponseDTOStatusEnum;
    /**
     * The system trace audit number assigned to uniquely identify transactions.
     * @type {string}
     * @memberof WalletTransactionResponseDTO
     */
    'systemTraceAuditNumber'?: string;
    /**
     * The unique terminal ID.
     * @type {string}
     * @memberof WalletTransactionResponseDTO
     */
    'terminalID'?: string;
    /**
     * The 3-letter [ISO-4217 currency code](doc:currency-and-country-codes) for the transaction currency.
     * @type {string}
     * @memberof WalletTransactionResponseDTO
     */
    'transactionCurrencyCode'?: string;
    /**
     * The corrected amount of a transaction in a partial reversal. This is defined by ISO-8583 as a fixed length field with four subfields, but only the first subfield is used. A 12 position field for the corrected, actual amount of a customer\'s transaction, in the transaction currency. The field is right justified, with lead zero fill.
     * @type {number}
     * @memberof WalletTransactionResponseDTO
     */
    'transactionReplacementAmount'?: number;
    /**
     * The type of transaction. Can be any one of the list of transaction types mentioned in [Transaction Types](https://docs.nium.com/apis/docs/transaction-types).
     * @type {string}
     * @memberof WalletTransactionResponseDTO
     */
    'transactionType'?: WalletTransactionResponseDTOTransactionTypeEnum;
    /**
     * TThe date and time when the transaction was last updated in UTC.
     * @type {string}
     * @memberof WalletTransactionResponseDTO
     */
    'updatedAt'?: string;
    /**
     * The unique wallet identifier generated when a new wallet is created.
     * @type {string}
     * @memberof WalletTransactionResponseDTO
     */
    'walletHashId'?: string;
}

export const WalletTransactionResponseDTOComplianceStatusEnum = {
    None: 'NONE',
    InProgress: 'IN_PROGRESS',
    Completed: 'COMPLETED',
    ActionRequired: 'ACTION_REQUIRED',
    Error: 'ERROR',
    Reject: 'REJECT',
    Expired: 'EXPIRED',
    RfiRequested: 'RFI_REQUESTED',
    RfiResponded: 'RFI_RESPONDED',
    Unknown: 'UNKNOWN',
    Initiated: 'INITIATED',
    Pending: 'PENDING',
    Clear: 'CLEAR',
    Closed: 'CLOSED'
} as const;

export type WalletTransactionResponseDTOComplianceStatusEnum = typeof WalletTransactionResponseDTOComplianceStatusEnum[keyof typeof WalletTransactionResponseDTOComplianceStatusEnum];
export const WalletTransactionResponseDTOSettlementStatusEnum = {
    Unsettled: 'Unsettled',
    Settled: 'Settled',
    Released: 'Released',
    Disputed: 'Disputed',
    DisputeClosed: 'DisputeClosed',
    Waived: 'Waived'
} as const;

export type WalletTransactionResponseDTOSettlementStatusEnum = typeof WalletTransactionResponseDTOSettlementStatusEnum[keyof typeof WalletTransactionResponseDTOSettlementStatusEnum];
export const WalletTransactionResponseDTOStatusEnum = {
    Approved: 'APPROVED',
    Declined: 'DECLINED',
    Blocked: 'BLOCKED',
    Settled: 'SETTLED',
    Unsettled: 'UNSETTLED',
    Reversal: 'REVERSAL',
    Released: 'RELEASED',
    Pending: 'PENDING',
    Waived: 'WAIVED',
    Disputed: 'DISPUTED',
    DisputeClosed: 'DISPUTE_CLOSED',
    InProgress: 'IN_PROGRESS',
    Rejected: 'REJECTED',
    Returned: 'RETURNED',
    AwaitingFunds: 'AWAITING_FUNDS',
    Expired: 'EXPIRED',
    Cancelled: 'CANCELLED',
    Scheduled: 'SCHEDULED',
    Na: 'NA'
} as const;

export type WalletTransactionResponseDTOStatusEnum = typeof WalletTransactionResponseDTOStatusEnum[keyof typeof WalletTransactionResponseDTOStatusEnum];
export const WalletTransactionResponseDTOTransactionTypeEnum = {
    Debit: 'Debit',
    Reversal: 'Reversal',
    OriginalCredit: 'Original_Credit',
    OriginalCreditReversal: 'Original_Credit_Reversal',
    BalanceInquiry: 'Balance_Inquiry',
    PartialReversal: 'Partial_Reversal',
    ReversalAdvice: 'Reversal_Advice',
    DeclineAdvice: 'Decline_Advice',
    IncrementalAuthReversal: 'Incremental_Auth_Reversal',
    AutoSweep: 'Auto_Sweep',
    AutoSweepPayout: 'Auto_Sweep_Payout',
    AutoSweepPayoutReversal: 'Auto_Sweep_Payout_Reversal',
    SettlementDebit: 'Settlement_Debit',
    SettlementCredit: 'Settlement_Credit',
    SettlementReversal: 'Settlement_Reversal',
    SettlementDirectReversal: 'Settlement_Direct_Reversal',
    SettlementDirectDebit: 'Settlement_Direct_Debit',
    FeeDebit: 'Fee_Debit',
    FeeReversal: 'Fee_Reversal',
    FeeWaiver: 'Fee_Waiver',
    ClientPrefund: 'Client_Prefund',
    ClientRefund: 'Client_Refund',
    WalletRefund: 'Wallet_Refund',
    WalletCreditModeCard: 'Wallet_Credit_Mode_Card',
    WalletCreditModePrefund: 'Wallet_Credit_Mode_Prefund',
    WalletCreditModePrefundCrossCurrency: 'Wallet_Credit_Mode_Prefund_Cross_Currency',
    WalletCreditModeOffline: 'Wallet_Credit_Mode_Offline',
    WalletCreditModeOfflineCrossCurrency: 'Wallet_Credit_Mode_Offline_Cross_Currency',
    WalletCreditModeOfflineThirdParty: 'Wallet_Credit_Mode_Offline_ThirdParty',
    WalletCreditModeDirectDebit: 'Wallet_Credit_Mode_Direct_Debit',
    WalletCreditModeDirectDebitReversal: 'Wallet_Credit_Mode_Direct_Debit_Reversal',
    CustomerWalletCreditFundTransfer: 'Customer_Wallet_Credit_Fund_Transfer',
    CustomerWalletDebitFundTransfer: 'Customer_Wallet_Debit_Fund_Transfer',
    WalletFundTransfer: 'Wallet_Fund_Transfer',
    ClientFundTransfer: 'Client_Fund_Transfer',
    WalletHold: 'Wallet_Hold',
    WalletUnhold: 'Wallet_Unhold',
    RemittanceDebit: 'Remittance_Debit',
    RemittanceDebitExternal: 'Remittance_Debit_External',
    RemittanceReversal: 'Remittance_Reversal',
    RemittanceClientAutoSweep: 'Remittance_Client_Auto_Sweep',
    RemittanceClientAutoSweepReversal: 'Remittance_Client_Auto_Sweep_Reversal',
    RemittanceDebitPrescreening: 'Remittance_Debit_Prescreening',
    RemittanceDebitExternalPrescreening: 'Remittance_Debit_External_Prescreening',
    RemittanceBeneMicrodeposit: 'Remittance_Bene_Microdeposit',
    RemittanceBeneMicrodepositReversal: 'Remittance_Bene_Microdeposit_Reversal',
    RegulatoryAutoSweep: 'Regulatory_Auto_Sweep',
    RegulatoryBlock: 'Regulatory_Block',
    RegulatoryBlockRelease: 'Regulatory_Block_Release',
    RegulatoryDebit: 'Regulatory_Debit',
    RegulatoryDebitReversal: 'Regulatory_Debit_Reversal',
    TransferLocal: 'Transfer_Local',
    TransferLocalReversal: 'Transfer_Local_Reversal',
    CashbackCredit: 'Cashback_Credit',
    CashbackCreditClient: 'Cashback_Credit_Client',
    ChargebackCredit: 'Chargeback_Credit',
    CustomerWalletDebitIntraRegion: 'Customer_Wallet_Debit_Intra_Region',
    CustomerWalletCreditIntraRegion: 'Customer_Wallet_Credit_Intra_Region',
    CustomerWalletDebitCrossRegion: 'Customer_Wallet_Debit_Cross_Region',
    CustomerWalletCreditCrossRegion: 'Customer_Wallet_Credit_Cross_Region',
    DirectDebitPayout: 'Direct_Debit_Payout',
    DirectDebitPayoutReversal: 'Direct_Debit_Payout_Reversal',
    InvoicingDebit: 'Invoicing_Debit',
    Na: 'NA'
} as const;

export type WalletTransactionResponseDTOTransactionTypeEnum = typeof WalletTransactionResponseDTOTransactionTypeEnum[keyof typeof WalletTransactionResponseDTOTransactionTypeEnum];


